# Generated from KotlinParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,173,3520,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,1,0,3,0,350,8,0,
        1,0,5,0,353,8,0,10,0,12,0,356,9,0,1,0,5,0,359,8,0,10,0,12,0,362,
        9,0,1,0,1,0,1,0,5,0,367,8,0,10,0,12,0,370,9,0,1,0,1,0,1,1,3,1,375,
        8,1,1,1,5,1,378,8,1,10,1,12,1,381,9,1,1,1,5,1,384,8,1,10,1,12,1,
        387,9,1,1,1,1,1,1,1,1,1,1,1,5,1,394,8,1,10,1,12,1,397,9,1,1,1,1,
        1,1,2,1,2,4,2,403,8,2,11,2,12,2,404,1,3,1,3,1,3,5,3,410,8,3,10,3,
        12,3,413,9,3,1,3,1,3,5,3,417,8,3,10,3,12,3,420,9,3,1,3,1,3,4,3,424,
        8,3,11,3,12,3,425,1,3,1,3,1,3,3,3,431,8,3,1,3,5,3,434,8,3,10,3,12,
        3,437,9,3,1,4,1,4,1,4,3,4,442,8,4,3,4,444,8,4,1,5,5,5,447,8,5,10,
        5,12,5,450,9,5,1,6,1,6,1,6,1,6,1,6,3,6,457,8,6,1,6,3,6,460,8,6,1,
        7,1,7,1,7,1,8,1,8,3,8,467,8,8,1,9,3,9,470,8,9,1,9,1,9,5,9,474,8,
        9,10,9,12,9,477,9,9,1,9,1,9,5,9,481,8,9,10,9,12,9,484,9,9,1,9,3,
        9,487,8,9,1,9,5,9,490,8,9,10,9,12,9,493,9,9,1,9,1,9,5,9,497,8,9,
        10,9,12,9,500,9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,509,8,10,
        1,11,3,11,512,8,11,1,11,1,11,1,11,5,11,517,8,11,10,11,12,11,520,
        9,11,3,11,522,8,11,1,11,3,11,525,8,11,1,11,5,11,528,8,11,10,11,12,
        11,531,9,11,1,11,1,11,5,11,535,8,11,10,11,12,11,538,9,11,1,11,3,
        11,541,8,11,1,11,5,11,544,8,11,10,11,12,11,547,9,11,1,11,3,11,550,
        8,11,1,11,5,11,553,8,11,10,11,12,11,556,9,11,1,11,1,11,5,11,560,
        8,11,10,11,12,11,563,9,11,1,11,3,11,566,8,11,1,11,5,11,569,8,11,
        10,11,12,11,572,9,11,1,11,3,11,575,8,11,1,11,5,11,578,8,11,10,11,
        12,11,581,9,11,1,11,1,11,5,11,585,8,11,10,11,12,11,588,9,11,1,11,
        3,11,591,8,11,1,12,3,12,594,8,12,1,12,1,12,5,12,598,8,12,10,12,12,
        12,601,9,12,3,12,603,8,12,1,12,1,12,1,13,1,13,5,13,609,8,13,10,13,
        12,13,612,9,13,1,13,1,13,5,13,616,8,13,10,13,12,13,619,9,13,1,13,
        1,13,1,14,1,14,5,14,625,8,14,10,14,12,14,628,9,14,1,14,1,14,5,14,
        632,8,14,10,14,12,14,635,9,14,1,14,1,14,5,14,639,8,14,10,14,12,14,
        642,9,14,1,14,5,14,645,8,14,10,14,12,14,648,9,14,1,14,5,14,651,8,
        14,10,14,12,14,654,9,14,1,14,3,14,657,8,14,3,14,659,8,14,1,14,5,
        14,662,8,14,10,14,12,14,665,9,14,1,14,1,14,1,15,3,15,670,8,15,1,
        15,3,15,673,8,15,1,15,5,15,676,8,15,10,15,12,15,679,9,15,1,15,1,
        15,1,15,5,15,684,8,15,10,15,12,15,687,9,15,1,15,1,15,5,15,691,8,
        15,10,15,12,15,694,9,15,1,15,1,15,5,15,698,8,15,10,15,12,15,701,
        9,15,1,15,3,15,704,8,15,1,16,1,16,5,16,708,8,16,10,16,12,16,711,
        9,16,1,16,1,16,5,16,715,8,16,10,16,12,16,718,9,16,1,16,5,16,721,
        8,16,10,16,12,16,724,9,16,1,17,1,17,1,17,1,17,1,17,1,17,5,17,732,
        8,17,10,17,12,17,735,9,17,1,17,3,17,738,8,17,1,18,1,18,5,18,742,
        8,18,10,18,12,18,745,9,18,1,18,1,18,1,19,5,19,750,8,19,10,19,12,
        19,753,9,19,1,19,5,19,756,8,19,10,19,12,19,759,9,19,1,19,1,19,1,
        20,1,20,3,20,765,8,20,1,20,5,20,768,8,20,10,20,12,20,771,9,20,1,
        20,1,20,5,20,775,8,20,10,20,12,20,778,9,20,1,20,1,20,1,21,1,21,5,
        21,784,8,21,10,21,12,21,787,9,21,1,21,1,21,5,21,791,8,21,10,21,12,
        21,794,9,21,1,21,1,21,5,21,798,8,21,10,21,12,21,801,9,21,1,21,5,
        21,804,8,21,10,21,12,21,807,9,21,1,21,5,21,810,8,21,10,21,12,21,
        813,9,21,1,21,3,21,816,8,21,1,21,5,21,819,8,21,10,21,12,21,822,9,
        21,1,21,1,21,1,22,3,22,827,8,22,1,22,5,22,830,8,22,10,22,12,22,833,
        9,22,1,22,1,22,5,22,837,8,22,10,22,12,22,840,9,22,1,22,1,22,5,22,
        844,8,22,10,22,12,22,847,9,22,1,22,3,22,850,8,22,1,23,1,23,5,23,
        854,8,23,10,23,12,23,857,9,23,1,23,1,23,5,23,861,8,23,10,23,12,23,
        864,9,23,1,23,1,23,5,23,868,8,23,10,23,12,23,871,9,23,1,23,5,23,
        874,8,23,10,23,12,23,877,9,23,1,24,5,24,880,8,24,10,24,12,24,883,
        9,24,1,24,1,24,5,24,887,8,24,10,24,12,24,890,9,24,1,24,1,24,5,24,
        894,8,24,10,24,12,24,897,9,24,1,24,1,24,1,25,1,25,3,25,903,8,25,
        5,25,905,8,25,10,25,12,25,908,9,25,1,26,1,26,1,26,1,26,3,26,914,
        8,26,1,27,1,27,5,27,918,8,27,10,27,12,27,921,9,27,1,27,1,27,1,28,
        3,28,926,8,28,1,28,1,28,5,28,930,8,28,10,28,12,28,933,9,28,1,28,
        3,28,936,8,28,1,28,5,28,939,8,28,10,28,12,28,942,9,28,1,28,1,28,
        5,28,946,8,28,10,28,12,28,949,9,28,1,28,3,28,952,8,28,1,28,5,28,
        955,8,28,10,28,12,28,958,9,28,1,28,1,28,5,28,962,8,28,10,28,12,28,
        965,9,28,1,28,3,28,968,8,28,1,28,5,28,971,8,28,10,28,12,28,974,9,
        28,1,28,3,28,977,8,28,1,29,1,29,5,29,981,8,29,10,29,12,29,984,9,
        29,1,29,1,29,5,29,988,8,29,10,29,12,29,991,9,29,1,29,1,29,5,29,995,
        8,29,10,29,12,29,998,9,29,1,29,5,29,1001,8,29,10,29,12,29,1004,9,
        29,1,29,5,29,1007,8,29,10,29,12,29,1010,9,29,1,29,3,29,1013,8,29,
        3,29,1015,8,29,1,29,5,29,1018,8,29,10,29,12,29,1021,9,29,1,29,1,
        29,1,30,3,30,1026,8,30,1,30,1,30,5,30,1030,8,30,10,30,12,30,1033,
        9,30,1,30,1,30,5,30,1037,8,30,10,30,12,30,1040,9,30,1,30,3,30,1043,
        8,30,1,31,3,31,1046,8,31,1,31,1,31,5,31,1050,8,31,10,31,12,31,1053,
        9,31,1,31,3,31,1056,8,31,1,31,5,31,1059,8,31,10,31,12,31,1062,9,
        31,1,31,1,31,5,31,1066,8,31,10,31,12,31,1069,9,31,1,31,1,31,3,31,
        1073,8,31,1,31,5,31,1076,8,31,10,31,12,31,1079,9,31,1,31,1,31,5,
        31,1083,8,31,10,31,12,31,1086,9,31,1,31,1,31,5,31,1090,8,31,10,31,
        12,31,1093,9,31,1,31,1,31,5,31,1097,8,31,10,31,12,31,1100,9,31,1,
        31,3,31,1103,8,31,1,31,5,31,1106,8,31,10,31,12,31,1109,9,31,1,31,
        3,31,1112,8,31,1,31,5,31,1115,8,31,10,31,12,31,1118,9,31,1,31,3,
        31,1121,8,31,1,32,1,32,1,32,5,32,1126,8,32,10,32,12,32,1129,9,32,
        1,32,3,32,1132,8,32,1,33,5,33,1135,8,33,10,33,12,33,1138,9,33,1,
        33,5,33,1141,8,33,10,33,12,33,1144,9,33,1,33,1,33,5,33,1148,8,33,
        10,33,12,33,1151,9,33,1,33,1,33,5,33,1155,8,33,10,33,12,33,1158,
        9,33,1,33,3,33,1161,8,33,1,34,1,34,5,34,1165,8,34,10,34,12,34,1168,
        9,34,1,34,1,34,5,34,1172,8,34,10,34,12,34,1175,9,34,1,34,1,34,5,
        34,1179,8,34,10,34,12,34,1182,9,34,1,34,5,34,1185,8,34,10,34,12,
        34,1188,9,34,1,34,5,34,1191,8,34,10,34,12,34,1194,9,34,1,34,3,34,
        1197,8,34,1,34,5,34,1200,8,34,10,34,12,34,1203,9,34,1,34,1,34,1,
        35,3,35,1208,8,35,1,35,1,35,5,35,1212,8,35,10,35,12,35,1215,9,35,
        1,35,3,35,1218,8,35,1,35,5,35,1221,8,35,10,35,12,35,1224,9,35,1,
        35,1,35,5,35,1228,8,35,10,35,12,35,1231,9,35,1,35,1,35,3,35,1235,
        8,35,1,35,5,35,1238,8,35,10,35,12,35,1241,9,35,1,35,1,35,3,35,1245,
        8,35,1,35,5,35,1248,8,35,10,35,12,35,1251,9,35,1,35,3,35,1254,8,
        35,1,35,5,35,1257,8,35,10,35,12,35,1260,9,35,1,35,1,35,5,35,1264,
        8,35,10,35,12,35,1267,9,35,1,35,1,35,3,35,1271,8,35,3,35,1273,8,
        35,1,35,5,35,1276,8,35,10,35,12,35,1279,9,35,1,35,3,35,1282,8,35,
        1,35,5,35,1285,8,35,10,35,12,35,1288,9,35,1,35,3,35,1291,8,35,1,
        35,5,35,1294,8,35,10,35,12,35,1297,9,35,1,35,3,35,1300,8,35,1,35,
        3,35,1303,8,35,1,35,3,35,1306,8,35,1,35,5,35,1309,8,35,10,35,12,
        35,1312,9,35,1,35,3,35,1315,8,35,1,35,3,35,1318,8,35,3,35,1320,8,
        35,1,36,1,36,5,36,1324,8,36,10,36,12,36,1327,9,36,1,36,1,36,1,37,
        3,37,1332,8,37,1,37,1,37,5,37,1336,8,37,10,37,12,37,1339,9,37,1,
        37,1,37,5,37,1343,8,37,10,37,12,37,1346,9,37,1,37,1,37,5,37,1350,
        8,37,10,37,12,37,1353,9,37,1,37,1,37,5,37,1357,8,37,10,37,12,37,
        1360,9,37,1,37,3,37,1363,8,37,1,37,5,37,1366,8,37,10,37,12,37,1369,
        9,37,1,37,3,37,1372,8,37,1,38,3,38,1375,8,38,1,38,1,38,5,38,1379,
        8,38,10,38,12,38,1382,9,38,1,38,1,38,5,38,1386,8,38,10,38,12,38,
        1389,9,38,1,38,1,38,5,38,1393,8,38,10,38,12,38,1396,9,38,1,38,3,
        38,1399,8,38,1,38,5,38,1402,8,38,10,38,12,38,1405,9,38,1,38,1,38,
        5,38,1409,8,38,10,38,12,38,1412,9,38,1,38,1,38,5,38,1416,8,38,10,
        38,12,38,1419,9,38,1,38,3,38,1422,8,38,1,38,5,38,1425,8,38,10,38,
        12,38,1428,9,38,1,38,1,38,3,38,1432,8,38,1,39,1,39,5,39,1436,8,39,
        10,39,12,39,1439,9,39,1,39,1,39,5,39,1443,8,39,10,39,12,39,1446,
        9,39,1,39,1,39,5,39,1450,8,39,10,39,12,39,1453,9,39,1,39,5,39,1456,
        8,39,10,39,12,39,1459,9,39,1,39,5,39,1462,8,39,10,39,12,39,1465,
        9,39,1,39,3,39,1468,8,39,3,39,1470,8,39,1,39,5,39,1473,8,39,10,39,
        12,39,1476,9,39,1,39,1,39,1,40,3,40,1481,8,40,1,40,1,40,5,40,1485,
        8,40,10,40,12,40,1488,9,40,1,40,1,40,5,40,1492,8,40,10,40,12,40,
        1495,9,40,1,40,3,40,1498,8,40,1,41,1,41,5,41,1502,8,41,10,41,12,
        41,1505,9,41,1,41,1,41,5,41,1509,8,41,10,41,12,41,1512,9,41,1,41,
        3,41,1515,8,41,1,42,1,42,5,42,1519,8,42,10,42,12,42,1522,9,42,1,
        42,1,42,5,42,1526,8,42,10,42,12,42,1529,9,42,1,42,1,42,1,43,3,43,
        1534,8,43,1,43,1,43,5,43,1538,8,43,10,43,12,43,1541,9,43,1,43,1,
        43,5,43,1545,8,43,10,43,12,43,1548,9,43,1,43,1,43,5,43,1552,8,43,
        10,43,12,43,1555,9,43,1,43,3,43,1558,8,43,1,43,5,43,1561,8,43,10,
        43,12,43,1564,9,43,1,43,3,43,1567,8,43,1,44,3,44,1570,8,44,1,44,
        1,44,5,44,1574,8,44,10,44,12,44,1577,9,44,1,44,1,44,5,44,1581,8,
        44,10,44,12,44,1584,9,44,1,44,1,44,5,44,1588,8,44,10,44,12,44,1591,
        9,44,1,44,3,44,1594,8,44,1,44,5,44,1597,8,44,10,44,12,44,1600,9,
        44,1,44,3,44,1603,8,44,1,45,1,45,5,45,1607,8,45,10,45,12,45,1610,
        9,45,1,45,1,45,1,46,1,46,5,46,1616,8,46,10,46,12,46,1619,9,46,1,
        46,3,46,1622,8,46,1,46,5,46,1625,8,46,10,46,12,46,1628,9,46,1,46,
        1,46,5,46,1632,8,46,10,46,12,46,1635,9,46,1,46,3,46,1638,8,46,1,
        46,5,46,1641,8,46,10,46,12,46,1644,9,46,1,46,1,46,1,47,1,47,5,47,
        1650,8,47,10,47,12,47,1653,9,47,1,47,1,47,5,47,1657,8,47,10,47,12,
        47,1660,9,47,1,47,5,47,1663,8,47,10,47,12,47,1666,9,47,1,47,5,47,
        1669,8,47,10,47,12,47,1672,9,47,1,47,3,47,1675,8,47,1,48,1,48,5,
        48,1679,8,48,10,48,12,48,1682,9,48,3,48,1684,8,48,1,48,1,48,5,48,
        1688,8,48,10,48,12,48,1691,9,48,1,48,3,48,1694,8,48,1,48,5,48,1697,
        8,48,10,48,12,48,1700,9,48,1,48,3,48,1703,8,48,1,49,3,49,1706,8,
        49,1,49,1,49,1,49,1,49,1,49,3,49,1713,8,49,1,50,1,50,3,50,1717,8,
        50,1,51,1,51,3,51,1721,8,51,1,51,5,51,1724,8,51,10,51,12,51,1727,
        9,51,1,51,4,51,1730,8,51,11,51,12,51,1731,1,52,1,52,1,53,1,53,5,
        53,1738,8,53,10,53,12,53,1741,9,53,1,53,1,53,5,53,1745,8,53,10,53,
        12,53,1748,9,53,1,53,5,53,1751,8,53,10,53,12,53,1754,9,53,1,54,1,
        54,5,54,1758,8,54,10,54,12,54,1761,9,54,1,54,3,54,1764,8,54,1,55,
        3,55,1767,8,55,1,55,1,55,3,55,1771,8,55,1,56,4,56,1774,8,56,11,56,
        12,56,1775,1,57,1,57,5,57,1780,8,57,10,57,12,57,1783,9,57,1,57,3,
        57,1786,8,57,1,58,1,58,5,58,1790,8,58,10,58,12,58,1793,9,58,1,58,
        1,58,5,58,1797,8,58,10,58,12,58,1800,9,58,3,58,1802,8,58,1,58,1,
        58,5,58,1806,8,58,10,58,12,58,1809,9,58,1,58,1,58,5,58,1813,8,58,
        10,58,12,58,1816,9,58,1,58,1,58,1,59,1,59,5,59,1822,8,59,10,59,12,
        59,1825,9,59,1,59,1,59,3,59,1829,8,59,1,59,5,59,1832,8,59,10,59,
        12,59,1835,9,59,1,59,1,59,5,59,1839,8,59,10,59,12,59,1842,9,59,1,
        59,1,59,3,59,1846,8,59,5,59,1848,8,59,10,59,12,59,1851,9,59,1,59,
        5,59,1854,8,59,10,59,12,59,1857,9,59,1,59,3,59,1860,8,59,1,59,5,
        59,1863,8,59,10,59,12,59,1866,9,59,1,59,1,59,1,60,1,60,5,60,1872,
        8,60,10,60,12,60,1875,9,60,1,60,1,60,5,60,1879,8,60,10,60,12,60,
        1882,9,60,1,60,1,60,1,61,3,61,1887,8,61,1,61,1,61,1,61,3,61,1892,
        8,61,1,62,1,62,5,62,1896,8,62,10,62,12,62,1899,9,62,1,62,1,62,3,
        62,1903,8,62,1,62,5,62,1906,8,62,10,62,12,62,1909,9,62,1,62,1,62,
        1,63,3,63,1914,8,63,1,63,1,63,3,63,1918,8,63,1,63,5,63,1921,8,63,
        10,63,12,63,1924,9,63,1,63,1,63,5,63,1928,8,63,10,63,12,63,1931,
        9,63,1,63,3,63,1934,8,63,1,63,1,63,3,63,1938,8,63,1,64,1,64,1,64,
        1,64,5,64,1944,8,64,10,64,12,64,1947,9,64,3,64,1949,8,64,1,64,3,
        64,1952,8,64,1,65,1,65,5,65,1956,8,65,10,65,12,65,1959,9,65,1,65,
        1,65,1,65,1,65,3,65,1965,8,65,1,66,1,66,1,66,5,66,1970,8,66,10,66,
        12,66,1973,9,66,1,67,1,67,3,67,1977,8,67,1,68,1,68,5,68,1981,8,68,
        10,68,12,68,1984,9,68,1,68,1,68,5,68,1988,8,68,10,68,12,68,1991,
        9,68,1,68,1,68,1,69,1,69,1,69,3,69,1998,8,69,1,70,1,70,5,70,2002,
        8,70,10,70,12,70,2005,9,70,1,70,1,70,5,70,2009,8,70,10,70,12,70,
        2012,9,70,1,70,1,70,3,70,2016,8,70,1,70,1,70,1,70,1,70,5,70,2022,
        8,70,10,70,12,70,2025,9,70,1,70,3,70,2028,8,70,1,71,1,71,5,71,2032,
        8,71,10,71,12,71,2035,9,71,1,71,1,71,1,71,1,71,5,71,2041,8,71,10,
        71,12,71,2044,9,71,1,71,1,71,3,71,2048,8,71,1,72,1,72,5,72,2052,
        8,72,10,72,12,72,2055,9,72,1,72,3,72,2058,8,72,1,72,5,72,2061,8,
        72,10,72,12,72,2064,9,72,1,72,1,72,5,72,2068,8,72,10,72,12,72,2071,
        9,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2083,
        8,73,1,73,5,73,2086,8,73,10,73,12,73,2089,9,73,1,73,1,73,1,74,1,
        74,5,74,2095,8,74,10,74,12,74,2098,9,74,1,75,4,75,2101,8,75,11,75,
        12,75,2102,1,76,1,76,1,77,1,77,5,77,2109,8,77,10,77,12,77,2112,9,
        77,1,77,1,77,5,77,2116,8,77,10,77,12,77,2119,9,77,1,77,5,77,2122,
        8,77,10,77,12,77,2125,9,77,1,78,1,78,5,78,2129,8,78,10,78,12,78,
        2132,9,78,1,78,1,78,5,78,2136,8,78,10,78,12,78,2139,9,78,1,78,5,
        78,2142,8,78,10,78,12,78,2145,9,78,1,79,1,79,1,79,5,79,2150,8,79,
        10,79,12,79,2153,9,79,1,79,1,79,5,79,2157,8,79,10,79,12,79,2160,
        9,79,1,80,1,80,1,80,5,80,2165,8,80,10,80,12,80,2168,9,80,1,80,1,
        80,5,80,2172,8,80,10,80,12,80,2175,9,80,1,81,1,81,5,81,2179,8,81,
        10,81,12,81,2182,9,81,1,82,1,82,1,82,5,82,2187,8,82,10,82,12,82,
        2190,9,82,1,82,1,82,1,82,1,82,5,82,2196,8,82,10,82,12,82,2199,9,
        82,1,82,1,82,5,82,2203,8,82,10,82,12,82,2206,9,82,1,83,1,83,5,83,
        2210,8,83,10,83,12,83,2213,9,83,1,83,1,83,5,83,2217,8,83,10,83,12,
        83,2220,9,83,1,83,1,83,5,83,2224,8,83,10,83,12,83,2227,9,83,1,84,
        1,84,1,84,1,85,1,85,1,85,5,85,2235,8,85,10,85,12,85,2238,9,85,1,
        85,1,85,5,85,2242,8,85,10,85,12,85,2245,9,85,1,86,1,86,1,86,5,86,
        2250,8,86,10,86,12,86,2253,9,86,1,86,5,86,2256,8,86,10,86,12,86,
        2259,9,86,1,87,1,87,1,87,5,87,2264,8,87,10,87,12,87,2267,9,87,1,
        87,1,87,5,87,2271,8,87,10,87,12,87,2274,9,87,1,88,1,88,1,88,5,88,
        2279,8,88,10,88,12,88,2282,9,88,1,88,1,88,5,88,2286,8,88,10,88,12,
        88,2289,9,88,1,89,1,89,5,89,2293,8,89,10,89,12,89,2296,9,89,1,89,
        1,89,5,89,2300,8,89,10,89,12,89,2303,9,89,1,89,1,89,5,89,2307,8,
        89,10,89,12,89,2310,9,89,1,90,5,90,2313,8,90,10,90,12,90,2316,9,
        90,1,90,1,90,1,91,1,91,1,91,1,91,5,91,2324,8,91,10,91,12,91,2327,
        9,91,3,91,2329,8,91,1,92,1,92,5,92,2333,8,92,10,92,12,92,2336,9,
        92,1,93,1,93,1,93,1,93,1,93,3,93,2343,8,93,1,94,1,94,1,94,1,94,1,
        94,3,94,2350,8,94,1,95,1,95,5,95,2354,8,95,10,95,12,95,2357,9,95,
        1,95,1,95,5,95,2361,8,95,10,95,12,95,2364,9,95,1,95,1,95,1,96,1,
        96,3,96,2370,8,96,1,97,1,97,5,97,2374,8,97,10,97,12,97,2377,9,97,
        1,97,1,97,5,97,2381,8,97,10,97,12,97,2384,9,97,1,97,1,97,1,98,1,
        98,1,98,3,98,2391,8,98,1,99,1,99,5,99,2395,8,99,10,99,12,99,2398,
        9,99,1,99,1,99,5,99,2402,8,99,10,99,12,99,2405,9,99,1,99,1,99,5,
        99,2409,8,99,10,99,12,99,2412,9,99,1,99,5,99,2415,8,99,10,99,12,
        99,2418,9,99,1,99,5,99,2421,8,99,10,99,12,99,2424,9,99,1,99,3,99,
        2427,8,99,1,99,5,99,2430,8,99,10,99,12,99,2433,9,99,1,99,1,99,1,
        100,1,100,5,100,2439,8,100,10,100,12,100,2442,9,100,1,100,1,100,
        1,100,3,100,2447,8,100,1,101,3,101,2450,8,101,1,101,3,101,2453,8,
        101,1,101,1,101,3,101,2457,8,101,1,102,5,102,2460,8,102,10,102,12,
        102,2463,9,102,1,102,3,102,2466,8,102,1,102,5,102,2469,8,102,10,
        102,12,102,2472,9,102,1,102,1,102,1,103,1,103,5,103,2478,8,103,10,
        103,12,103,2481,9,103,1,103,1,103,5,103,2485,8,103,10,103,12,103,
        2488,9,103,1,103,1,103,5,103,2492,8,103,10,103,12,103,2495,9,103,
        1,103,5,103,2498,8,103,10,103,12,103,2501,9,103,1,103,5,103,2504,
        8,103,10,103,12,103,2507,9,103,1,103,3,103,2510,8,103,1,103,5,103,
        2513,8,103,10,103,12,103,2516,9,103,1,103,1,103,1,104,1,104,5,104,
        2522,8,104,10,104,12,104,2525,9,104,1,104,1,104,5,104,2529,8,104,
        10,104,12,104,2532,9,104,1,104,1,104,5,104,2536,8,104,10,104,12,
        104,2539,9,104,1,104,5,104,2542,8,104,10,104,12,104,2545,9,104,1,
        104,5,104,2548,8,104,10,104,12,104,2551,9,104,1,104,3,104,2554,8,
        104,1,104,5,104,2557,8,104,10,104,12,104,2560,9,104,3,104,2562,8,
        104,1,104,1,104,1,105,3,105,2567,8,105,1,105,5,105,2570,8,105,10,
        105,12,105,2573,9,105,1,105,1,105,5,105,2577,8,105,10,105,12,105,
        2580,9,105,1,105,1,105,5,105,2584,8,105,10,105,12,105,2587,9,105,
        3,105,2589,8,105,1,105,3,105,2592,8,105,1,105,5,105,2595,8,105,10,
        105,12,105,2598,9,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,2616,
        8,106,1,107,1,107,5,107,2620,8,107,10,107,12,107,2623,9,107,1,107,
        1,107,5,107,2627,8,107,10,107,12,107,2630,9,107,1,107,1,107,1,108,
        1,108,5,108,2636,8,108,10,108,12,108,2639,9,108,1,108,1,108,5,108,
        2643,8,108,10,108,12,108,2646,9,108,1,108,1,108,5,108,2650,8,108,
        10,108,12,108,2653,9,108,1,108,5,108,2656,8,108,10,108,12,108,2659,
        9,108,1,108,5,108,2662,8,108,10,108,12,108,2665,9,108,1,108,3,108,
        2668,8,108,1,108,5,108,2671,8,108,10,108,12,108,2674,9,108,3,108,
        2676,8,108,1,108,1,108,1,109,1,109,1,110,1,110,3,110,2684,8,110,
        1,111,1,111,1,111,5,111,2689,8,111,10,111,12,111,2692,9,111,1,111,
        1,111,1,112,1,112,1,112,1,112,5,112,2700,8,112,10,112,12,112,2703,
        9,112,1,112,1,112,1,113,1,113,1,114,1,114,5,114,2711,8,114,10,114,
        12,114,2714,9,114,1,114,1,114,5,114,2718,8,114,10,114,12,114,2721,
        9,114,1,114,1,114,1,115,1,115,1,116,1,116,5,116,2729,8,116,10,116,
        12,116,2732,9,116,1,116,1,116,5,116,2736,8,116,10,116,12,116,2739,
        9,116,1,116,1,116,1,117,1,117,5,117,2745,8,117,10,117,12,117,2748,
        9,117,1,117,3,117,2751,8,117,1,117,5,117,2754,8,117,10,117,12,117,
        2757,9,117,1,117,1,117,5,117,2761,8,117,10,117,12,117,2764,9,117,
        3,117,2766,8,117,1,117,1,117,5,117,2770,8,117,10,117,12,117,2773,
        9,117,1,117,1,117,1,118,1,118,5,118,2779,8,118,10,118,12,118,2782,
        9,118,1,118,1,118,5,118,2786,8,118,10,118,12,118,2789,9,118,1,118,
        5,118,2792,8,118,10,118,12,118,2795,9,118,1,118,5,118,2798,8,118,
        10,118,12,118,2801,9,118,1,118,3,118,2804,8,118,1,119,1,119,1,119,
        5,119,2809,8,119,10,119,12,119,2812,9,119,1,119,1,119,5,119,2816,
        8,119,10,119,12,119,2819,9,119,1,119,3,119,2822,8,119,3,119,2824,
        8,119,1,120,3,120,2827,8,120,1,120,5,120,2830,8,120,10,120,12,120,
        2833,9,120,1,120,1,120,5,120,2837,8,120,10,120,12,120,2840,9,120,
        1,120,1,120,5,120,2844,8,120,10,120,12,120,2847,9,120,1,120,1,120,
        3,120,2851,8,120,1,120,5,120,2854,8,120,10,120,12,120,2857,9,120,
        1,120,1,120,5,120,2861,8,120,10,120,12,120,2864,9,120,1,120,1,120,
        5,120,2868,8,120,10,120,12,120,2871,9,120,1,120,3,120,2874,8,120,
        1,120,5,120,2877,8,120,10,120,12,120,2880,9,120,1,120,3,120,2883,
        8,120,1,120,5,120,2886,8,120,10,120,12,120,2889,9,120,1,120,3,120,
        2892,8,120,1,121,1,121,3,121,2896,8,121,1,122,3,122,2899,8,122,1,
        122,5,122,2902,8,122,10,122,12,122,2905,9,122,1,122,1,122,5,122,
        2909,8,122,10,122,12,122,2912,9,122,1,122,1,122,5,122,2916,8,122,
        10,122,12,122,2919,9,122,1,122,1,122,5,122,2923,8,122,10,122,12,
        122,2926,9,122,3,122,2928,8,122,1,122,5,122,2931,8,122,10,122,12,
        122,2934,9,122,1,122,3,122,2937,8,122,1,123,1,123,1,124,1,124,1,
        124,5,124,2944,8,124,10,124,12,124,2947,9,124,1,124,1,124,5,124,
        2951,8,124,10,124,12,124,2954,9,124,1,124,1,124,3,124,2958,8,124,
        1,124,1,124,3,124,2962,8,124,1,124,3,124,2965,8,124,1,125,1,125,
        5,125,2969,8,125,10,125,12,125,2972,9,125,1,125,1,125,5,125,2976,
        8,125,10,125,12,125,2979,9,125,1,125,1,125,5,125,2983,8,125,10,125,
        12,125,2986,9,125,1,125,1,125,5,125,2990,8,125,10,125,12,125,2993,
        9,125,1,125,1,125,3,125,2997,8,125,1,125,5,125,3000,8,125,10,125,
        12,125,3003,9,125,1,125,3,125,3006,8,125,1,125,5,125,3009,8,125,
        10,125,12,125,3012,9,125,1,125,1,125,5,125,3016,8,125,10,125,12,
        125,3019,9,125,1,125,1,125,3,125,3023,8,125,1,125,3,125,3026,8,125,
        1,126,1,126,5,126,3030,8,126,10,126,12,126,3033,9,126,1,126,5,126,
        3036,8,126,10,126,12,126,3039,9,126,1,126,1,126,5,126,3043,8,126,
        10,126,12,126,3046,9,126,1,126,1,126,5,126,3050,8,126,10,126,12,
        126,3053,9,126,1,126,1,126,5,126,3057,8,126,10,126,12,126,3060,9,
        126,3,126,3062,8,126,1,126,1,126,1,126,1,127,1,127,5,127,3069,8,
        127,10,127,12,127,3072,9,127,1,127,3,127,3075,8,127,1,127,5,127,
        3078,8,127,10,127,12,127,3081,9,127,1,127,1,127,5,127,3085,8,127,
        10,127,12,127,3088,9,127,1,127,1,127,5,127,3092,8,127,10,127,12,
        127,3095,9,127,5,127,3097,8,127,10,127,12,127,3100,9,127,1,127,5,
        127,3103,8,127,10,127,12,127,3106,9,127,1,127,1,127,1,128,1,128,
        5,128,3112,8,128,10,128,12,128,3115,9,128,1,128,1,128,5,128,3119,
        8,128,10,128,12,128,3122,9,128,1,128,5,128,3125,8,128,10,128,12,
        128,3128,9,128,1,128,5,128,3131,8,128,10,128,12,128,3134,9,128,1,
        128,3,128,3137,8,128,1,128,5,128,3140,8,128,10,128,12,128,3143,9,
        128,1,128,1,128,5,128,3147,8,128,10,128,12,128,3150,9,128,1,128,
        1,128,3,128,3154,8,128,1,128,1,128,5,128,3158,8,128,10,128,12,128,
        3161,9,128,1,128,1,128,5,128,3165,8,128,10,128,12,128,3168,9,128,
        1,128,1,128,3,128,3172,8,128,3,128,3174,8,128,1,129,1,129,1,129,
        3,129,3179,8,129,1,130,1,130,5,130,3183,8,130,10,130,12,130,3186,
        9,130,1,130,1,130,1,131,1,131,5,131,3192,8,131,10,131,12,131,3195,
        9,131,1,131,1,131,1,132,1,132,5,132,3201,8,132,10,132,12,132,3204,
        9,132,1,132,1,132,5,132,3208,8,132,10,132,12,132,3211,9,132,1,132,
        4,132,3214,8,132,11,132,12,132,3215,1,132,5,132,3219,8,132,10,132,
        12,132,3222,9,132,1,132,3,132,3225,8,132,1,132,5,132,3228,8,132,
        10,132,12,132,3231,9,132,1,132,3,132,3234,8,132,1,133,1,133,5,133,
        3238,8,133,10,133,12,133,3241,9,133,1,133,1,133,5,133,3245,8,133,
        10,133,12,133,3248,9,133,1,133,1,133,1,133,1,133,5,133,3254,8,133,
        10,133,12,133,3257,9,133,1,133,3,133,3260,8,133,1,133,1,133,5,133,
        3264,8,133,10,133,12,133,3267,9,133,1,133,1,133,1,134,1,134,5,134,
        3273,8,134,10,134,12,134,3276,9,134,1,134,1,134,1,135,1,135,5,135,
        3282,8,135,10,135,12,135,3285,9,135,1,135,1,135,1,135,3,135,3290,
        8,135,1,135,1,135,1,135,1,135,3,135,3296,8,135,1,136,3,136,3299,
        8,136,1,136,1,136,5,136,3303,8,136,10,136,12,136,3306,9,136,1,136,
        1,136,3,136,3310,8,136,1,137,1,137,1,138,1,138,1,139,1,139,1,140,
        1,140,1,141,1,141,1,142,1,142,1,143,1,143,1,144,1,144,1,145,1,145,
        1,145,1,145,1,145,3,145,3333,8,145,1,146,1,146,1,146,1,146,3,146,
        3339,8,146,1,147,1,147,1,148,5,148,3344,8,148,10,148,12,148,3347,
        9,148,1,148,1,148,5,148,3351,8,148,10,148,12,148,3354,9,148,1,148,
        1,148,3,148,3358,8,148,1,149,1,149,1,149,1,150,1,150,4,150,3365,
        8,150,11,150,12,150,3366,1,151,1,151,4,151,3371,8,151,11,151,12,
        151,3372,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,3383,
        8,152,1,152,5,152,3386,8,152,10,152,12,152,3389,9,152,1,153,4,153,
        3392,8,153,11,153,12,153,3393,1,154,1,154,1,154,5,154,3399,8,154,
        10,154,12,154,3402,9,154,3,154,3404,8,154,1,155,1,155,1,156,1,156,
        1,157,1,157,1,158,1,158,1,159,4,159,3415,8,159,11,159,12,159,3416,
        1,160,1,160,5,160,3421,8,160,10,160,12,160,3424,9,160,1,160,1,160,
        5,160,3428,8,160,10,160,12,160,3431,9,160,1,160,3,160,3434,8,160,
        1,161,1,161,1,162,1,162,1,163,1,163,1,164,1,164,1,165,1,165,1,166,
        1,166,1,167,1,167,3,167,3450,8,167,1,167,5,167,3453,8,167,10,167,
        12,167,3456,9,167,1,168,1,168,5,168,3460,8,168,10,168,12,168,3463,
        9,168,1,168,1,168,3,168,3467,8,168,1,168,1,168,1,169,1,169,5,169,
        3473,8,169,10,169,12,169,3476,9,169,1,169,1,169,3,169,3480,8,169,
        1,169,1,169,4,169,3484,8,169,11,169,12,169,3485,1,169,1,169,1,170,
        1,170,1,170,5,170,3493,8,170,10,170,12,170,3496,9,170,1,170,1,170,
        1,171,1,171,3,171,3502,8,171,1,172,1,172,1,173,1,173,5,173,3508,
        8,173,10,173,12,173,3511,9,173,1,173,1,173,5,173,3515,8,173,10,173,
        12,173,3518,9,173,1,173,0,0,174,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
        142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
        174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
        206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,
        238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
        270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,
        302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
        334,336,338,340,342,344,346,0,31,2,0,41,41,43,43,1,0,78,79,1,0,85,
        86,1,0,45,46,1,0,41,42,2,0,5,5,27,27,1,0,36,37,2,0,137,137,140,147,
        1,0,161,163,1,0,166,168,2,0,61,61,85,85,2,0,58,58,99,99,1,0,29,33,
        2,0,51,52,54,55,1,0,47,50,2,0,104,104,106,106,2,0,103,103,105,105,
        1,0,18,19,1,0,15,17,2,0,53,53,102,102,1,0,24,25,1,0,113,118,2,0,
        125,125,130,130,1,0,109,112,2,0,104,104,107,107,1,0,119,124,1,0,
        126,128,1,0,131,133,1,0,135,136,1,0,64,71,7,0,63,71,73,73,81,84,
        88,88,93,94,107,136,148,148,3945,0,349,1,0,0,0,2,374,1,0,0,0,4,400,
        1,0,0,0,6,406,1,0,0,0,8,443,1,0,0,0,10,448,1,0,0,0,12,451,1,0,0,
        0,14,461,1,0,0,0,16,464,1,0,0,0,18,469,1,0,0,0,20,508,1,0,0,0,22,
        511,1,0,0,0,24,602,1,0,0,0,26,606,1,0,0,0,28,622,1,0,0,0,30,669,
        1,0,0,0,32,705,1,0,0,0,34,737,1,0,0,0,36,739,1,0,0,0,38,751,1,0,
        0,0,40,764,1,0,0,0,42,781,1,0,0,0,44,826,1,0,0,0,46,851,1,0,0,0,
        48,881,1,0,0,0,50,906,1,0,0,0,52,913,1,0,0,0,54,915,1,0,0,0,56,925,
        1,0,0,0,58,978,1,0,0,0,60,1025,1,0,0,0,62,1045,1,0,0,0,64,1131,1,
        0,0,0,66,1136,1,0,0,0,68,1162,1,0,0,0,70,1207,1,0,0,0,72,1321,1,
        0,0,0,74,1331,1,0,0,0,76,1374,1,0,0,0,78,1433,1,0,0,0,80,1480,1,
        0,0,0,82,1499,1,0,0,0,84,1516,1,0,0,0,86,1533,1,0,0,0,88,1569,1,
        0,0,0,90,1604,1,0,0,0,92,1613,1,0,0,0,94,1647,1,0,0,0,96,1683,1,
        0,0,0,98,1705,1,0,0,0,100,1716,1,0,0,0,102,1720,1,0,0,0,104,1733,
        1,0,0,0,106,1735,1,0,0,0,108,1755,1,0,0,0,110,1770,1,0,0,0,112,1773,
        1,0,0,0,114,1785,1,0,0,0,116,1801,1,0,0,0,118,1819,1,0,0,0,120,1869,
        1,0,0,0,122,1886,1,0,0,0,124,1893,1,0,0,0,126,1913,1,0,0,0,128,1948,
        1,0,0,0,130,1957,1,0,0,0,132,1966,1,0,0,0,134,1976,1,0,0,0,136,1978,
        1,0,0,0,138,1997,1,0,0,0,140,1999,1,0,0,0,142,2029,1,0,0,0,144,2049,
        1,0,0,0,146,2082,1,0,0,0,148,2092,1,0,0,0,150,2100,1,0,0,0,152,2104,
        1,0,0,0,154,2106,1,0,0,0,156,2126,1,0,0,0,158,2146,1,0,0,0,160,2161,
        1,0,0,0,162,2176,1,0,0,0,164,2183,1,0,0,0,166,2207,1,0,0,0,168,2228,
        1,0,0,0,170,2231,1,0,0,0,172,2246,1,0,0,0,174,2260,1,0,0,0,176,2275,
        1,0,0,0,178,2290,1,0,0,0,180,2314,1,0,0,0,182,2328,1,0,0,0,184,2330,
        1,0,0,0,186,2342,1,0,0,0,188,2349,1,0,0,0,190,2351,1,0,0,0,192,2369,
        1,0,0,0,194,2371,1,0,0,0,196,2390,1,0,0,0,198,2392,1,0,0,0,200,2436,
        1,0,0,0,202,2449,1,0,0,0,204,2461,1,0,0,0,206,2475,1,0,0,0,208,2519,
        1,0,0,0,210,2566,1,0,0,0,212,2615,1,0,0,0,214,2617,1,0,0,0,216,2633,
        1,0,0,0,218,2679,1,0,0,0,220,2683,1,0,0,0,222,2685,1,0,0,0,224,2695,
        1,0,0,0,226,2706,1,0,0,0,228,2708,1,0,0,0,230,2724,1,0,0,0,232,2726,
        1,0,0,0,234,2742,1,0,0,0,236,2776,1,0,0,0,238,2823,1,0,0,0,240,2826,
        1,0,0,0,242,2895,1,0,0,0,244,2898,1,0,0,0,246,2938,1,0,0,0,248,2964,
        1,0,0,0,250,2966,1,0,0,0,252,3027,1,0,0,0,254,3066,1,0,0,0,256,3173,
        1,0,0,0,258,3178,1,0,0,0,260,3180,1,0,0,0,262,3189,1,0,0,0,264,3198,
        1,0,0,0,266,3235,1,0,0,0,268,3270,1,0,0,0,270,3295,1,0,0,0,272,3298,
        1,0,0,0,274,3311,1,0,0,0,276,3313,1,0,0,0,278,3315,1,0,0,0,280,3317,
        1,0,0,0,282,3319,1,0,0,0,284,3321,1,0,0,0,286,3323,1,0,0,0,288,3325,
        1,0,0,0,290,3332,1,0,0,0,292,3338,1,0,0,0,294,3340,1,0,0,0,296,3357,
        1,0,0,0,298,3359,1,0,0,0,300,3364,1,0,0,0,302,3370,1,0,0,0,304,3382,
        1,0,0,0,306,3391,1,0,0,0,308,3403,1,0,0,0,310,3405,1,0,0,0,312,3407,
        1,0,0,0,314,3409,1,0,0,0,316,3411,1,0,0,0,318,3414,1,0,0,0,320,3433,
        1,0,0,0,322,3435,1,0,0,0,324,3437,1,0,0,0,326,3439,1,0,0,0,328,3441,
        1,0,0,0,330,3443,1,0,0,0,332,3445,1,0,0,0,334,3449,1,0,0,0,336,3466,
        1,0,0,0,338,3479,1,0,0,0,340,3489,1,0,0,0,342,3501,1,0,0,0,344,3503,
        1,0,0,0,346,3505,1,0,0,0,348,350,3,4,2,0,349,348,1,0,0,0,349,350,
        1,0,0,0,350,354,1,0,0,0,351,353,5,5,0,0,352,351,1,0,0,0,353,356,
        1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,360,1,0,0,0,356,354,
        1,0,0,0,357,359,3,6,3,0,358,357,1,0,0,0,359,362,1,0,0,0,360,358,
        1,0,0,0,360,361,1,0,0,0,361,363,1,0,0,0,362,360,1,0,0,0,363,364,
        3,8,4,0,364,368,3,10,5,0,365,367,3,16,8,0,366,365,1,0,0,0,367,370,
        1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,371,1,0,0,0,370,368,
        1,0,0,0,371,372,5,0,0,1,372,1,1,0,0,0,373,375,3,4,2,0,374,373,1,
        0,0,0,374,375,1,0,0,0,375,379,1,0,0,0,376,378,5,5,0,0,377,376,1,
        0,0,0,378,381,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,385,1,
        0,0,0,381,379,1,0,0,0,382,384,3,6,3,0,383,382,1,0,0,0,384,387,1,
        0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,385,1,
        0,0,0,388,389,3,8,4,0,389,395,3,10,5,0,390,391,3,130,65,0,391,392,
        3,148,74,0,392,394,1,0,0,0,393,390,1,0,0,0,394,397,1,0,0,0,395,393,
        1,0,0,0,395,396,1,0,0,0,396,398,1,0,0,0,397,395,1,0,0,0,398,399,
        5,0,0,1,399,3,1,0,0,0,400,402,5,1,0,0,401,403,5,5,0,0,402,401,1,
        0,0,0,403,404,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,5,1,0,
        0,0,406,407,7,0,0,0,407,411,5,63,0,0,408,410,5,5,0,0,409,408,1,0,
        0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,414,1,0,
        0,0,413,411,1,0,0,0,414,418,5,26,0,0,415,417,5,5,0,0,416,415,1,0,
        0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,430,1,0,
        0,0,420,418,1,0,0,0,421,423,5,11,0,0,422,424,3,342,171,0,423,422,
        1,0,0,0,424,425,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,427,
        1,0,0,0,427,428,5,12,0,0,428,431,1,0,0,0,429,431,3,342,171,0,430,
        421,1,0,0,0,430,429,1,0,0,0,431,435,1,0,0,0,432,434,5,5,0,0,433,
        432,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,
        7,1,0,0,0,437,435,1,0,0,0,438,439,5,72,0,0,439,441,3,346,173,0,440,
        442,3,148,74,0,441,440,1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,
        438,1,0,0,0,443,444,1,0,0,0,444,9,1,0,0,0,445,447,3,12,6,0,446,445,
        1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,11,1,
        0,0,0,450,448,1,0,0,0,451,452,5,73,0,0,452,456,3,346,173,0,453,454,
        5,7,0,0,454,457,5,15,0,0,455,457,3,14,7,0,456,453,1,0,0,0,456,455,
        1,0,0,0,456,457,1,0,0,0,457,459,1,0,0,0,458,460,3,148,74,0,459,458,
        1,0,0,0,459,460,1,0,0,0,460,13,1,0,0,0,461,462,5,102,0,0,462,463,
        3,344,172,0,463,15,1,0,0,0,464,466,3,20,10,0,465,467,3,150,75,0,
        466,465,1,0,0,0,466,467,1,0,0,0,467,17,1,0,0,0,468,470,3,300,150,
        0,469,468,1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,475,5,80,0,
        0,472,474,5,5,0,0,473,472,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,
        0,475,476,1,0,0,0,476,478,1,0,0,0,477,475,1,0,0,0,478,486,3,344,
        172,0,479,481,5,5,0,0,480,479,1,0,0,0,481,484,1,0,0,0,482,480,1,
        0,0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,482,1,0,0,0,485,487,3,
        42,21,0,486,482,1,0,0,0,486,487,1,0,0,0,487,491,1,0,0,0,488,490,
        5,5,0,0,489,488,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,
        1,0,0,0,492,494,1,0,0,0,493,491,1,0,0,0,494,498,5,28,0,0,495,497,
        5,5,0,0,496,495,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,
        1,0,0,0,499,501,1,0,0,0,500,498,1,0,0,0,501,502,3,98,49,0,502,19,
        1,0,0,0,503,509,3,22,11,0,504,509,3,86,43,0,505,509,3,62,31,0,506,
        509,3,70,35,0,507,509,3,18,9,0,508,503,1,0,0,0,508,504,1,0,0,0,508,
        505,1,0,0,0,508,506,1,0,0,0,508,507,1,0,0,0,509,21,1,0,0,0,510,512,
        3,300,150,0,511,510,1,0,0,0,511,512,1,0,0,0,512,524,1,0,0,0,513,
        525,5,74,0,0,514,518,5,76,0,0,515,517,5,5,0,0,516,515,1,0,0,0,517,
        520,1,0,0,0,518,516,1,0,0,0,518,519,1,0,0,0,519,522,1,0,0,0,520,
        518,1,0,0,0,521,514,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,
        525,5,75,0,0,524,513,1,0,0,0,524,521,1,0,0,0,525,529,1,0,0,0,526,
        528,5,5,0,0,527,526,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,
        530,1,0,0,0,530,532,1,0,0,0,531,529,1,0,0,0,532,540,3,344,172,0,
        533,535,5,5,0,0,534,533,1,0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,
        536,537,1,0,0,0,537,539,1,0,0,0,538,536,1,0,0,0,539,541,3,42,21,
        0,540,536,1,0,0,0,540,541,1,0,0,0,541,549,1,0,0,0,542,544,5,5,0,
        0,543,542,1,0,0,0,544,547,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,
        0,546,548,1,0,0,0,547,545,1,0,0,0,548,550,3,24,12,0,549,545,1,0,
        0,0,549,550,1,0,0,0,550,565,1,0,0,0,551,553,5,5,0,0,552,551,1,0,
        0,0,553,556,1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,557,1,0,
        0,0,556,554,1,0,0,0,557,561,5,26,0,0,558,560,5,5,0,0,559,558,1,0,
        0,0,560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,564,1,0,
        0,0,563,561,1,0,0,0,564,566,3,32,16,0,565,554,1,0,0,0,565,566,1,
        0,0,0,566,574,1,0,0,0,567,569,5,5,0,0,568,567,1,0,0,0,569,572,1,
        0,0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,570,1,
        0,0,0,573,575,3,46,23,0,574,570,1,0,0,0,574,575,1,0,0,0,575,590,
        1,0,0,0,576,578,5,5,0,0,577,576,1,0,0,0,578,581,1,0,0,0,579,577,
        1,0,0,0,579,580,1,0,0,0,580,582,1,0,0,0,581,579,1,0,0,0,582,591,
        3,26,13,0,583,585,5,5,0,0,584,583,1,0,0,0,585,588,1,0,0,0,586,584,
        1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,586,1,0,0,0,589,591,
        3,92,46,0,590,579,1,0,0,0,590,586,1,0,0,0,590,591,1,0,0,0,591,23,
        1,0,0,0,592,594,3,300,150,0,593,592,1,0,0,0,593,594,1,0,0,0,594,
        595,1,0,0,0,595,599,5,81,0,0,596,598,5,5,0,0,597,596,1,0,0,0,598,
        601,1,0,0,0,599,597,1,0,0,0,599,600,1,0,0,0,600,603,1,0,0,0,601,
        599,1,0,0,0,602,593,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,
        605,3,28,14,0,605,25,1,0,0,0,606,610,5,13,0,0,607,609,5,5,0,0,608,
        607,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,
        613,1,0,0,0,612,610,1,0,0,0,613,617,3,50,25,0,614,616,5,5,0,0,615,
        614,1,0,0,0,616,619,1,0,0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,
        620,1,0,0,0,619,617,1,0,0,0,620,621,5,14,0,0,621,27,1,0,0,0,622,
        626,5,9,0,0,623,625,5,5,0,0,624,623,1,0,0,0,625,628,1,0,0,0,626,
        624,1,0,0,0,626,627,1,0,0,0,627,658,1,0,0,0,628,626,1,0,0,0,629,
        646,3,30,15,0,630,632,5,5,0,0,631,630,1,0,0,0,632,635,1,0,0,0,633,
        631,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,633,1,0,0,0,636,
        640,5,8,0,0,637,639,5,5,0,0,638,637,1,0,0,0,639,642,1,0,0,0,640,
        638,1,0,0,0,640,641,1,0,0,0,641,643,1,0,0,0,642,640,1,0,0,0,643,
        645,3,30,15,0,644,633,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,
        647,1,0,0,0,647,656,1,0,0,0,648,646,1,0,0,0,649,651,5,5,0,0,650,
        649,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,
        655,1,0,0,0,654,652,1,0,0,0,655,657,5,8,0,0,656,652,1,0,0,0,656,
        657,1,0,0,0,657,659,1,0,0,0,658,629,1,0,0,0,658,659,1,0,0,0,659,
        663,1,0,0,0,660,662,5,5,0,0,661,660,1,0,0,0,662,665,1,0,0,0,663,
        661,1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,663,1,0,0,0,666,
        667,5,10,0,0,667,29,1,0,0,0,668,670,3,300,150,0,669,668,1,0,0,0,
        669,670,1,0,0,0,670,672,1,0,0,0,671,673,7,1,0,0,672,671,1,0,0,0,
        672,673,1,0,0,0,673,677,1,0,0,0,674,676,5,5,0,0,675,674,1,0,0,0,
        676,679,1,0,0,0,677,675,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,
        679,677,1,0,0,0,680,681,3,344,172,0,681,685,5,26,0,0,682,684,5,5,
        0,0,683,682,1,0,0,0,684,687,1,0,0,0,685,683,1,0,0,0,685,686,1,0,
        0,0,686,688,1,0,0,0,687,685,1,0,0,0,688,703,3,98,49,0,689,691,5,
        5,0,0,690,689,1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,
        0,0,0,693,695,1,0,0,0,694,692,1,0,0,0,695,699,5,28,0,0,696,698,5,
        5,0,0,697,696,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,699,700,1,
        0,0,0,700,702,1,0,0,0,701,699,1,0,0,0,702,704,3,152,76,0,703,692,
        1,0,0,0,703,704,1,0,0,0,704,31,1,0,0,0,705,722,3,38,19,0,706,708,
        5,5,0,0,707,706,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,709,710,
        1,0,0,0,710,712,1,0,0,0,711,709,1,0,0,0,712,716,5,8,0,0,713,715,
        5,5,0,0,714,713,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,717,
        1,0,0,0,717,719,1,0,0,0,718,716,1,0,0,0,719,721,3,38,19,0,720,709,
        1,0,0,0,721,724,1,0,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,33,1,
        0,0,0,724,722,1,0,0,0,725,738,3,36,18,0,726,738,3,40,20,0,727,738,
        3,106,53,0,728,738,3,116,58,0,729,733,5,124,0,0,730,732,5,5,0,0,
        731,730,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,
        734,736,1,0,0,0,735,733,1,0,0,0,736,738,3,116,58,0,737,725,1,0,0,
        0,737,726,1,0,0,0,737,727,1,0,0,0,737,728,1,0,0,0,737,729,1,0,0,
        0,738,35,1,0,0,0,739,743,3,106,53,0,740,742,5,5,0,0,741,740,1,0,
        0,0,742,745,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,746,1,0,
        0,0,745,743,1,0,0,0,746,747,3,208,104,0,747,37,1,0,0,0,748,750,3,
        334,167,0,749,748,1,0,0,0,750,753,1,0,0,0,751,749,1,0,0,0,751,752,
        1,0,0,0,752,757,1,0,0,0,753,751,1,0,0,0,754,756,5,5,0,0,755,754,
        1,0,0,0,756,759,1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,760,
        1,0,0,0,759,757,1,0,0,0,760,761,3,34,17,0,761,39,1,0,0,0,762,765,
        3,106,53,0,763,765,3,116,58,0,764,762,1,0,0,0,764,763,1,0,0,0,765,
        769,1,0,0,0,766,768,5,5,0,0,767,766,1,0,0,0,768,771,1,0,0,0,769,
        767,1,0,0,0,769,770,1,0,0,0,770,772,1,0,0,0,771,769,1,0,0,0,772,
        776,5,82,0,0,773,775,5,5,0,0,774,773,1,0,0,0,775,778,1,0,0,0,776,
        774,1,0,0,0,776,777,1,0,0,0,777,779,1,0,0,0,778,776,1,0,0,0,779,
        780,3,152,76,0,780,41,1,0,0,0,781,785,5,47,0,0,782,784,5,5,0,0,783,
        782,1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,
        788,1,0,0,0,787,785,1,0,0,0,788,805,3,44,22,0,789,791,5,5,0,0,790,
        789,1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,
        795,1,0,0,0,794,792,1,0,0,0,795,799,5,8,0,0,796,798,5,5,0,0,797,
        796,1,0,0,0,798,801,1,0,0,0,799,797,1,0,0,0,799,800,1,0,0,0,800,
        802,1,0,0,0,801,799,1,0,0,0,802,804,3,44,22,0,803,792,1,0,0,0,804,
        807,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,806,815,1,0,0,0,807,
        805,1,0,0,0,808,810,5,5,0,0,809,808,1,0,0,0,810,813,1,0,0,0,811,
        809,1,0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,813,811,1,0,0,0,814,
        816,5,8,0,0,815,811,1,0,0,0,815,816,1,0,0,0,816,820,1,0,0,0,817,
        819,5,5,0,0,818,817,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,820,
        821,1,0,0,0,821,823,1,0,0,0,822,820,1,0,0,0,823,824,5,48,0,0,824,
        43,1,0,0,0,825,827,3,318,159,0,826,825,1,0,0,0,826,827,1,0,0,0,827,
        831,1,0,0,0,828,830,5,5,0,0,829,828,1,0,0,0,830,833,1,0,0,0,831,
        829,1,0,0,0,831,832,1,0,0,0,832,834,1,0,0,0,833,831,1,0,0,0,834,
        849,3,344,172,0,835,837,5,5,0,0,836,835,1,0,0,0,837,840,1,0,0,0,
        838,836,1,0,0,0,838,839,1,0,0,0,839,841,1,0,0,0,840,838,1,0,0,0,
        841,845,5,26,0,0,842,844,5,5,0,0,843,842,1,0,0,0,844,847,1,0,0,0,
        845,843,1,0,0,0,845,846,1,0,0,0,846,848,1,0,0,0,847,845,1,0,0,0,
        848,850,3,98,49,0,849,838,1,0,0,0,849,850,1,0,0,0,850,45,1,0,0,0,
        851,855,5,88,0,0,852,854,5,5,0,0,853,852,1,0,0,0,854,857,1,0,0,0,
        855,853,1,0,0,0,855,856,1,0,0,0,856,858,1,0,0,0,857,855,1,0,0,0,
        858,875,3,48,24,0,859,861,5,5,0,0,860,859,1,0,0,0,861,864,1,0,0,
        0,862,860,1,0,0,0,862,863,1,0,0,0,863,865,1,0,0,0,864,862,1,0,0,
        0,865,869,5,8,0,0,866,868,5,5,0,0,867,866,1,0,0,0,868,871,1,0,0,
        0,869,867,1,0,0,0,869,870,1,0,0,0,870,872,1,0,0,0,871,869,1,0,0,
        0,872,874,3,48,24,0,873,862,1,0,0,0,874,877,1,0,0,0,875,873,1,0,
        0,0,875,876,1,0,0,0,876,47,1,0,0,0,877,875,1,0,0,0,878,880,3,334,
        167,0,879,878,1,0,0,0,880,883,1,0,0,0,881,879,1,0,0,0,881,882,1,
        0,0,0,882,884,1,0,0,0,883,881,1,0,0,0,884,888,3,344,172,0,885,887,
        5,5,0,0,886,885,1,0,0,0,887,890,1,0,0,0,888,886,1,0,0,0,888,889,
        1,0,0,0,889,891,1,0,0,0,890,888,1,0,0,0,891,895,5,26,0,0,892,894,
        5,5,0,0,893,892,1,0,0,0,894,897,1,0,0,0,895,893,1,0,0,0,895,896,
        1,0,0,0,896,898,1,0,0,0,897,895,1,0,0,0,898,899,3,98,49,0,899,49,
        1,0,0,0,900,902,3,52,26,0,901,903,3,150,75,0,902,901,1,0,0,0,902,
        903,1,0,0,0,903,905,1,0,0,0,904,900,1,0,0,0,905,908,1,0,0,0,906,
        904,1,0,0,0,906,907,1,0,0,0,907,51,1,0,0,0,908,906,1,0,0,0,909,914,
        3,20,10,0,910,914,3,56,28,0,911,914,3,54,27,0,912,914,3,88,44,0,
        913,909,1,0,0,0,913,910,1,0,0,0,913,911,1,0,0,0,913,912,1,0,0,0,
        914,53,1,0,0,0,915,919,5,84,0,0,916,918,5,5,0,0,917,916,1,0,0,0,
        918,921,1,0,0,0,919,917,1,0,0,0,919,920,1,0,0,0,920,922,1,0,0,0,
        921,919,1,0,0,0,922,923,3,136,68,0,923,55,1,0,0,0,924,926,3,300,
        150,0,925,924,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,931,5,
        83,0,0,928,930,5,5,0,0,929,928,1,0,0,0,930,933,1,0,0,0,931,929,1,
        0,0,0,931,932,1,0,0,0,932,935,1,0,0,0,933,931,1,0,0,0,934,936,5,
        116,0,0,935,934,1,0,0,0,935,936,1,0,0,0,936,940,1,0,0,0,937,939,
        5,5,0,0,938,937,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,940,941,
        1,0,0,0,941,943,1,0,0,0,942,940,1,0,0,0,943,951,5,77,0,0,944,946,
        5,5,0,0,945,944,1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,947,948,
        1,0,0,0,948,950,1,0,0,0,949,947,1,0,0,0,950,952,3,344,172,0,951,
        947,1,0,0,0,951,952,1,0,0,0,952,967,1,0,0,0,953,955,5,5,0,0,954,
        953,1,0,0,0,955,958,1,0,0,0,956,954,1,0,0,0,956,957,1,0,0,0,957,
        959,1,0,0,0,958,956,1,0,0,0,959,963,5,26,0,0,960,962,5,5,0,0,961,
        960,1,0,0,0,962,965,1,0,0,0,963,961,1,0,0,0,963,964,1,0,0,0,964,
        966,1,0,0,0,965,963,1,0,0,0,966,968,3,32,16,0,967,956,1,0,0,0,967,
        968,1,0,0,0,968,976,1,0,0,0,969,971,5,5,0,0,970,969,1,0,0,0,971,
        974,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,975,1,0,0,0,974,
        972,1,0,0,0,975,977,3,26,13,0,976,972,1,0,0,0,976,977,1,0,0,0,977,
        57,1,0,0,0,978,982,5,9,0,0,979,981,5,5,0,0,980,979,1,0,0,0,981,984,
        1,0,0,0,982,980,1,0,0,0,982,983,1,0,0,0,983,1014,1,0,0,0,984,982,
        1,0,0,0,985,1002,3,60,30,0,986,988,5,5,0,0,987,986,1,0,0,0,988,991,
        1,0,0,0,989,987,1,0,0,0,989,990,1,0,0,0,990,992,1,0,0,0,991,989,
        1,0,0,0,992,996,5,8,0,0,993,995,5,5,0,0,994,993,1,0,0,0,995,998,
        1,0,0,0,996,994,1,0,0,0,996,997,1,0,0,0,997,999,1,0,0,0,998,996,
        1,0,0,0,999,1001,3,60,30,0,1000,989,1,0,0,0,1001,1004,1,0,0,0,1002,
        1000,1,0,0,0,1002,1003,1,0,0,0,1003,1012,1,0,0,0,1004,1002,1,0,0,
        0,1005,1007,5,5,0,0,1006,1005,1,0,0,0,1007,1010,1,0,0,0,1008,1006,
        1,0,0,0,1008,1009,1,0,0,0,1009,1011,1,0,0,0,1010,1008,1,0,0,0,1011,
        1013,5,8,0,0,1012,1008,1,0,0,0,1012,1013,1,0,0,0,1013,1015,1,0,0,
        0,1014,985,1,0,0,0,1014,1015,1,0,0,0,1015,1019,1,0,0,0,1016,1018,
        5,5,0,0,1017,1016,1,0,0,0,1018,1021,1,0,0,0,1019,1017,1,0,0,0,1019,
        1020,1,0,0,0,1020,1022,1,0,0,0,1021,1019,1,0,0,0,1022,1023,5,10,
        0,0,1023,59,1,0,0,0,1024,1026,3,302,151,0,1025,1024,1,0,0,0,1025,
        1026,1,0,0,0,1026,1027,1,0,0,0,1027,1042,3,84,42,0,1028,1030,5,5,
        0,0,1029,1028,1,0,0,0,1030,1033,1,0,0,0,1031,1029,1,0,0,0,1031,1032,
        1,0,0,0,1032,1034,1,0,0,0,1033,1031,1,0,0,0,1034,1038,5,28,0,0,1035,
        1037,5,5,0,0,1036,1035,1,0,0,0,1037,1040,1,0,0,0,1038,1036,1,0,0,
        0,1038,1039,1,0,0,0,1039,1041,1,0,0,0,1040,1038,1,0,0,0,1041,1043,
        3,152,76,0,1042,1031,1,0,0,0,1042,1043,1,0,0,0,1043,61,1,0,0,0,1044,
        1046,3,300,150,0,1045,1044,1,0,0,0,1045,1046,1,0,0,0,1046,1047,1,
        0,0,0,1047,1055,5,76,0,0,1048,1050,5,5,0,0,1049,1048,1,0,0,0,1050,
        1053,1,0,0,0,1051,1049,1,0,0,0,1051,1052,1,0,0,0,1052,1054,1,0,0,
        0,1053,1051,1,0,0,0,1054,1056,3,42,21,0,1055,1051,1,0,0,0,1055,1056,
        1,0,0,0,1056,1072,1,0,0,0,1057,1059,5,5,0,0,1058,1057,1,0,0,0,1059,
        1062,1,0,0,0,1060,1058,1,0,0,0,1060,1061,1,0,0,0,1061,1063,1,0,0,
        0,1062,1060,1,0,0,0,1063,1067,3,122,61,0,1064,1066,5,5,0,0,1065,
        1064,1,0,0,0,1066,1069,1,0,0,0,1067,1065,1,0,0,0,1067,1068,1,0,0,
        0,1068,1070,1,0,0,0,1069,1067,1,0,0,0,1070,1071,5,7,0,0,1071,1073,
        1,0,0,0,1072,1060,1,0,0,0,1072,1073,1,0,0,0,1073,1077,1,0,0,0,1074,
        1076,5,5,0,0,1075,1074,1,0,0,0,1076,1079,1,0,0,0,1077,1075,1,0,0,
        0,1077,1078,1,0,0,0,1078,1080,1,0,0,0,1079,1077,1,0,0,0,1080,1084,
        3,344,172,0,1081,1083,5,5,0,0,1082,1081,1,0,0,0,1083,1086,1,0,0,
        0,1084,1082,1,0,0,0,1084,1085,1,0,0,0,1085,1087,1,0,0,0,1086,1084,
        1,0,0,0,1087,1102,3,58,29,0,1088,1090,5,5,0,0,1089,1088,1,0,0,0,
        1090,1093,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,1094,
        1,0,0,0,1093,1091,1,0,0,0,1094,1098,5,26,0,0,1095,1097,5,5,0,0,1096,
        1095,1,0,0,0,1097,1100,1,0,0,0,1098,1096,1,0,0,0,1098,1099,1,0,0,
        0,1099,1101,1,0,0,0,1100,1098,1,0,0,0,1101,1103,3,98,49,0,1102,1091,
        1,0,0,0,1102,1103,1,0,0,0,1103,1111,1,0,0,0,1104,1106,5,5,0,0,1105,
        1104,1,0,0,0,1106,1109,1,0,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,
        0,1108,1110,1,0,0,0,1109,1107,1,0,0,0,1110,1112,3,46,23,0,1111,1107,
        1,0,0,0,1111,1112,1,0,0,0,1112,1120,1,0,0,0,1113,1115,5,5,0,0,1114,
        1113,1,0,0,0,1115,1118,1,0,0,0,1116,1114,1,0,0,0,1116,1117,1,0,0,
        0,1117,1119,1,0,0,0,1118,1116,1,0,0,0,1119,1121,3,64,32,0,1120,1116,
        1,0,0,0,1120,1121,1,0,0,0,1121,63,1,0,0,0,1122,1132,3,136,68,0,1123,
        1127,5,28,0,0,1124,1126,5,5,0,0,1125,1124,1,0,0,0,1126,1129,1,0,
        0,0,1127,1125,1,0,0,0,1127,1128,1,0,0,0,1128,1130,1,0,0,0,1129,1127,
        1,0,0,0,1130,1132,3,152,76,0,1131,1122,1,0,0,0,1131,1123,1,0,0,0,
        1132,65,1,0,0,0,1133,1135,3,334,167,0,1134,1133,1,0,0,0,1135,1138,
        1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,1142,1,0,0,0,1138,
        1136,1,0,0,0,1139,1141,5,5,0,0,1140,1139,1,0,0,0,1141,1144,1,0,0,
        0,1142,1140,1,0,0,0,1142,1143,1,0,0,0,1143,1145,1,0,0,0,1144,1142,
        1,0,0,0,1145,1160,3,344,172,0,1146,1148,5,5,0,0,1147,1146,1,0,0,
        0,1148,1151,1,0,0,0,1149,1147,1,0,0,0,1149,1150,1,0,0,0,1150,1152,
        1,0,0,0,1151,1149,1,0,0,0,1152,1156,5,26,0,0,1153,1155,5,5,0,0,1154,
        1153,1,0,0,0,1155,1158,1,0,0,0,1156,1154,1,0,0,0,1156,1157,1,0,0,
        0,1157,1159,1,0,0,0,1158,1156,1,0,0,0,1159,1161,3,98,49,0,1160,1149,
        1,0,0,0,1160,1161,1,0,0,0,1161,67,1,0,0,0,1162,1166,5,9,0,0,1163,
        1165,5,5,0,0,1164,1163,1,0,0,0,1165,1168,1,0,0,0,1166,1164,1,0,0,
        0,1166,1167,1,0,0,0,1167,1169,1,0,0,0,1168,1166,1,0,0,0,1169,1186,
        3,66,33,0,1170,1172,5,5,0,0,1171,1170,1,0,0,0,1172,1175,1,0,0,0,
        1173,1171,1,0,0,0,1173,1174,1,0,0,0,1174,1176,1,0,0,0,1175,1173,
        1,0,0,0,1176,1180,5,8,0,0,1177,1179,5,5,0,0,1178,1177,1,0,0,0,1179,
        1182,1,0,0,0,1180,1178,1,0,0,0,1180,1181,1,0,0,0,1181,1183,1,0,0,
        0,1182,1180,1,0,0,0,1183,1185,3,66,33,0,1184,1173,1,0,0,0,1185,1188,
        1,0,0,0,1186,1184,1,0,0,0,1186,1187,1,0,0,0,1187,1196,1,0,0,0,1188,
        1186,1,0,0,0,1189,1191,5,5,0,0,1190,1189,1,0,0,0,1191,1194,1,0,0,
        0,1192,1190,1,0,0,0,1192,1193,1,0,0,0,1193,1195,1,0,0,0,1194,1192,
        1,0,0,0,1195,1197,5,8,0,0,1196,1192,1,0,0,0,1196,1197,1,0,0,0,1197,
        1201,1,0,0,0,1198,1200,5,5,0,0,1199,1198,1,0,0,0,1200,1203,1,0,0,
        0,1201,1199,1,0,0,0,1201,1202,1,0,0,0,1202,1204,1,0,0,0,1203,1201,
        1,0,0,0,1204,1205,5,10,0,0,1205,69,1,0,0,0,1206,1208,3,300,150,0,
        1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1209,1,0,0,0,1209,1217,
        7,1,0,0,1210,1212,5,5,0,0,1211,1210,1,0,0,0,1212,1215,1,0,0,0,1213,
        1211,1,0,0,0,1213,1214,1,0,0,0,1214,1216,1,0,0,0,1215,1213,1,0,0,
        0,1216,1218,3,42,21,0,1217,1213,1,0,0,0,1217,1218,1,0,0,0,1218,1234,
        1,0,0,0,1219,1221,5,5,0,0,1220,1219,1,0,0,0,1221,1224,1,0,0,0,1222,
        1220,1,0,0,0,1222,1223,1,0,0,0,1223,1225,1,0,0,0,1224,1222,1,0,0,
        0,1225,1229,3,122,61,0,1226,1228,5,5,0,0,1227,1226,1,0,0,0,1228,
        1231,1,0,0,0,1229,1227,1,0,0,0,1229,1230,1,0,0,0,1230,1232,1,0,0,
        0,1231,1229,1,0,0,0,1232,1233,5,7,0,0,1233,1235,1,0,0,0,1234,1222,
        1,0,0,0,1234,1235,1,0,0,0,1235,1239,1,0,0,0,1236,1238,5,5,0,0,1237,
        1236,1,0,0,0,1238,1241,1,0,0,0,1239,1237,1,0,0,0,1239,1240,1,0,0,
        0,1240,1244,1,0,0,0,1241,1239,1,0,0,0,1242,1245,3,68,34,0,1243,1245,
        3,66,33,0,1244,1242,1,0,0,0,1244,1243,1,0,0,0,1245,1253,1,0,0,0,
        1246,1248,5,5,0,0,1247,1246,1,0,0,0,1248,1251,1,0,0,0,1249,1247,
        1,0,0,0,1249,1250,1,0,0,0,1250,1252,1,0,0,0,1251,1249,1,0,0,0,1252,
        1254,3,46,23,0,1253,1249,1,0,0,0,1253,1254,1,0,0,0,1254,1272,1,0,
        0,0,1255,1257,5,5,0,0,1256,1255,1,0,0,0,1257,1260,1,0,0,0,1258,1256,
        1,0,0,0,1258,1259,1,0,0,0,1259,1270,1,0,0,0,1260,1258,1,0,0,0,1261,
        1265,5,28,0,0,1262,1264,5,5,0,0,1263,1262,1,0,0,0,1264,1267,1,0,
        0,0,1265,1263,1,0,0,0,1265,1266,1,0,0,0,1266,1268,1,0,0,0,1267,1265,
        1,0,0,0,1268,1271,3,152,76,0,1269,1271,3,72,36,0,1270,1261,1,0,0,
        0,1270,1269,1,0,0,0,1271,1273,1,0,0,0,1272,1258,1,0,0,0,1272,1273,
        1,0,0,0,1273,1281,1,0,0,0,1274,1276,5,5,0,0,1275,1274,1,0,0,0,1276,
        1279,1,0,0,0,1277,1275,1,0,0,0,1277,1278,1,0,0,0,1278,1280,1,0,0,
        0,1279,1277,1,0,0,0,1280,1282,5,27,0,0,1281,1277,1,0,0,0,1281,1282,
        1,0,0,0,1282,1286,1,0,0,0,1283,1285,5,5,0,0,1284,1283,1,0,0,0,1285,
        1288,1,0,0,0,1286,1284,1,0,0,0,1286,1287,1,0,0,0,1287,1319,1,0,0,
        0,1288,1286,1,0,0,0,1289,1291,3,74,37,0,1290,1289,1,0,0,0,1290,1291,
        1,0,0,0,1291,1302,1,0,0,0,1292,1294,5,5,0,0,1293,1292,1,0,0,0,1294,
        1297,1,0,0,0,1295,1293,1,0,0,0,1295,1296,1,0,0,0,1296,1299,1,0,0,
        0,1297,1295,1,0,0,0,1298,1300,3,148,74,0,1299,1298,1,0,0,0,1299,
        1300,1,0,0,0,1300,1301,1,0,0,0,1301,1303,3,76,38,0,1302,1295,1,0,
        0,0,1302,1303,1,0,0,0,1303,1320,1,0,0,0,1304,1306,3,76,38,0,1305,
        1304,1,0,0,0,1305,1306,1,0,0,0,1306,1317,1,0,0,0,1307,1309,5,5,0,
        0,1308,1307,1,0,0,0,1309,1312,1,0,0,0,1310,1308,1,0,0,0,1310,1311,
        1,0,0,0,1311,1314,1,0,0,0,1312,1310,1,0,0,0,1313,1315,3,148,74,0,
        1314,1313,1,0,0,0,1314,1315,1,0,0,0,1315,1316,1,0,0,0,1316,1318,
        3,74,37,0,1317,1310,1,0,0,0,1317,1318,1,0,0,0,1318,1320,1,0,0,0,
        1319,1290,1,0,0,0,1319,1305,1,0,0,0,1320,71,1,0,0,0,1321,1325,5,
        82,0,0,1322,1324,5,5,0,0,1323,1322,1,0,0,0,1324,1327,1,0,0,0,1325,
        1323,1,0,0,0,1325,1326,1,0,0,0,1326,1328,1,0,0,0,1327,1325,1,0,0,
        0,1328,1329,3,152,76,0,1329,73,1,0,0,0,1330,1332,3,300,150,0,1331,
        1330,1,0,0,0,1331,1332,1,0,0,0,1332,1333,1,0,0,0,1333,1371,5,66,
        0,0,1334,1336,5,5,0,0,1335,1334,1,0,0,0,1336,1339,1,0,0,0,1337,1335,
        1,0,0,0,1337,1338,1,0,0,0,1338,1340,1,0,0,0,1339,1337,1,0,0,0,1340,
        1344,5,9,0,0,1341,1343,5,5,0,0,1342,1341,1,0,0,0,1343,1346,1,0,0,
        0,1344,1342,1,0,0,0,1344,1345,1,0,0,0,1345,1347,1,0,0,0,1346,1344,
        1,0,0,0,1347,1362,5,10,0,0,1348,1350,5,5,0,0,1349,1348,1,0,0,0,1350,
        1353,1,0,0,0,1351,1349,1,0,0,0,1351,1352,1,0,0,0,1352,1354,1,0,0,
        0,1353,1351,1,0,0,0,1354,1358,5,26,0,0,1355,1357,5,5,0,0,1356,1355,
        1,0,0,0,1357,1360,1,0,0,0,1358,1356,1,0,0,0,1358,1359,1,0,0,0,1359,
        1361,1,0,0,0,1360,1358,1,0,0,0,1361,1363,3,98,49,0,1362,1351,1,0,
        0,0,1362,1363,1,0,0,0,1363,1367,1,0,0,0,1364,1366,5,5,0,0,1365,1364,
        1,0,0,0,1366,1369,1,0,0,0,1367,1365,1,0,0,0,1367,1368,1,0,0,0,1368,
        1370,1,0,0,0,1369,1367,1,0,0,0,1370,1372,3,64,32,0,1371,1337,1,0,
        0,0,1371,1372,1,0,0,0,1372,75,1,0,0,0,1373,1375,3,300,150,0,1374,
        1373,1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,0,0,1376,1431,5,67,
        0,0,1377,1379,5,5,0,0,1378,1377,1,0,0,0,1379,1382,1,0,0,0,1380,1378,
        1,0,0,0,1380,1381,1,0,0,0,1381,1383,1,0,0,0,1382,1380,1,0,0,0,1383,
        1387,5,9,0,0,1384,1386,5,5,0,0,1385,1384,1,0,0,0,1386,1389,1,0,0,
        0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,1390,1,0,0,0,1389,1387,
        1,0,0,0,1390,1398,3,80,40,0,1391,1393,5,5,0,0,1392,1391,1,0,0,0,
        1393,1396,1,0,0,0,1394,1392,1,0,0,0,1394,1395,1,0,0,0,1395,1397,
        1,0,0,0,1396,1394,1,0,0,0,1397,1399,5,8,0,0,1398,1394,1,0,0,0,1398,
        1399,1,0,0,0,1399,1403,1,0,0,0,1400,1402,5,5,0,0,1401,1400,1,0,0,
        0,1402,1405,1,0,0,0,1403,1401,1,0,0,0,1403,1404,1,0,0,0,1404,1406,
        1,0,0,0,1405,1403,1,0,0,0,1406,1421,5,10,0,0,1407,1409,5,5,0,0,1408,
        1407,1,0,0,0,1409,1412,1,0,0,0,1410,1408,1,0,0,0,1410,1411,1,0,0,
        0,1411,1413,1,0,0,0,1412,1410,1,0,0,0,1413,1417,5,26,0,0,1414,1416,
        5,5,0,0,1415,1414,1,0,0,0,1416,1419,1,0,0,0,1417,1415,1,0,0,0,1417,
        1418,1,0,0,0,1418,1420,1,0,0,0,1419,1417,1,0,0,0,1420,1422,3,98,
        49,0,1421,1410,1,0,0,0,1421,1422,1,0,0,0,1422,1426,1,0,0,0,1423,
        1425,5,5,0,0,1424,1423,1,0,0,0,1425,1428,1,0,0,0,1426,1424,1,0,0,
        0,1426,1427,1,0,0,0,1427,1429,1,0,0,0,1428,1426,1,0,0,0,1429,1430,
        3,64,32,0,1430,1432,1,0,0,0,1431,1380,1,0,0,0,1431,1432,1,0,0,0,
        1432,77,1,0,0,0,1433,1437,5,9,0,0,1434,1436,5,5,0,0,1435,1434,1,
        0,0,0,1436,1439,1,0,0,0,1437,1435,1,0,0,0,1437,1438,1,0,0,0,1438,
        1469,1,0,0,0,1439,1437,1,0,0,0,1440,1457,3,80,40,0,1441,1443,5,5,
        0,0,1442,1441,1,0,0,0,1443,1446,1,0,0,0,1444,1442,1,0,0,0,1444,1445,
        1,0,0,0,1445,1447,1,0,0,0,1446,1444,1,0,0,0,1447,1451,5,8,0,0,1448,
        1450,5,5,0,0,1449,1448,1,0,0,0,1450,1453,1,0,0,0,1451,1449,1,0,0,
        0,1451,1452,1,0,0,0,1452,1454,1,0,0,0,1453,1451,1,0,0,0,1454,1456,
        3,80,40,0,1455,1444,1,0,0,0,1456,1459,1,0,0,0,1457,1455,1,0,0,0,
        1457,1458,1,0,0,0,1458,1467,1,0,0,0,1459,1457,1,0,0,0,1460,1462,
        5,5,0,0,1461,1460,1,0,0,0,1462,1465,1,0,0,0,1463,1461,1,0,0,0,1463,
        1464,1,0,0,0,1464,1466,1,0,0,0,1465,1463,1,0,0,0,1466,1468,5,8,0,
        0,1467,1463,1,0,0,0,1467,1468,1,0,0,0,1468,1470,1,0,0,0,1469,1440,
        1,0,0,0,1469,1470,1,0,0,0,1470,1474,1,0,0,0,1471,1473,5,5,0,0,1472,
        1471,1,0,0,0,1473,1476,1,0,0,0,1474,1472,1,0,0,0,1474,1475,1,0,0,
        0,1475,1477,1,0,0,0,1476,1474,1,0,0,0,1477,1478,5,10,0,0,1478,79,
        1,0,0,0,1479,1481,3,302,151,0,1480,1479,1,0,0,0,1480,1481,1,0,0,
        0,1481,1482,1,0,0,0,1482,1497,3,82,41,0,1483,1485,5,5,0,0,1484,1483,
        1,0,0,0,1485,1488,1,0,0,0,1486,1484,1,0,0,0,1486,1487,1,0,0,0,1487,
        1489,1,0,0,0,1488,1486,1,0,0,0,1489,1493,5,28,0,0,1490,1492,5,5,
        0,0,1491,1490,1,0,0,0,1492,1495,1,0,0,0,1493,1491,1,0,0,0,1493,1494,
        1,0,0,0,1494,1496,1,0,0,0,1495,1493,1,0,0,0,1496,1498,3,152,76,0,
        1497,1486,1,0,0,0,1497,1498,1,0,0,0,1498,81,1,0,0,0,1499,1503,3,
        344,172,0,1500,1502,5,5,0,0,1501,1500,1,0,0,0,1502,1505,1,0,0,0,
        1503,1501,1,0,0,0,1503,1504,1,0,0,0,1504,1514,1,0,0,0,1505,1503,
        1,0,0,0,1506,1510,5,26,0,0,1507,1509,5,5,0,0,1508,1507,1,0,0,0,1509,
        1512,1,0,0,0,1510,1508,1,0,0,0,1510,1511,1,0,0,0,1511,1513,1,0,0,
        0,1512,1510,1,0,0,0,1513,1515,3,98,49,0,1514,1506,1,0,0,0,1514,1515,
        1,0,0,0,1515,83,1,0,0,0,1516,1520,3,344,172,0,1517,1519,5,5,0,0,
        1518,1517,1,0,0,0,1519,1522,1,0,0,0,1520,1518,1,0,0,0,1520,1521,
        1,0,0,0,1521,1523,1,0,0,0,1522,1520,1,0,0,0,1523,1527,5,26,0,0,1524,
        1526,5,5,0,0,1525,1524,1,0,0,0,1526,1529,1,0,0,0,1527,1525,1,0,0,
        0,1527,1528,1,0,0,0,1528,1530,1,0,0,0,1529,1527,1,0,0,0,1530,1531,
        3,98,49,0,1531,85,1,0,0,0,1532,1534,3,300,150,0,1533,1532,1,0,0,
        0,1533,1534,1,0,0,0,1534,1535,1,0,0,0,1535,1539,5,77,0,0,1536,1538,
        5,5,0,0,1537,1536,1,0,0,0,1538,1541,1,0,0,0,1539,1537,1,0,0,0,1539,
        1540,1,0,0,0,1540,1542,1,0,0,0,1541,1539,1,0,0,0,1542,1557,3,344,
        172,0,1543,1545,5,5,0,0,1544,1543,1,0,0,0,1545,1548,1,0,0,0,1546,
        1544,1,0,0,0,1546,1547,1,0,0,0,1547,1549,1,0,0,0,1548,1546,1,0,0,
        0,1549,1553,5,26,0,0,1550,1552,5,5,0,0,1551,1550,1,0,0,0,1552,1555,
        1,0,0,0,1553,1551,1,0,0,0,1553,1554,1,0,0,0,1554,1556,1,0,0,0,1555,
        1553,1,0,0,0,1556,1558,3,32,16,0,1557,1546,1,0,0,0,1557,1558,1,0,
        0,0,1558,1566,1,0,0,0,1559,1561,5,5,0,0,1560,1559,1,0,0,0,1561,1564,
        1,0,0,0,1562,1560,1,0,0,0,1562,1563,1,0,0,0,1563,1565,1,0,0,0,1564,
        1562,1,0,0,0,1565,1567,3,26,13,0,1566,1562,1,0,0,0,1566,1567,1,0,
        0,0,1567,87,1,0,0,0,1568,1570,3,300,150,0,1569,1568,1,0,0,0,1569,
        1570,1,0,0,0,1570,1571,1,0,0,0,1571,1575,5,81,0,0,1572,1574,5,5,
        0,0,1573,1572,1,0,0,0,1574,1577,1,0,0,0,1575,1573,1,0,0,0,1575,1576,
        1,0,0,0,1576,1578,1,0,0,0,1577,1575,1,0,0,0,1578,1593,3,58,29,0,
        1579,1581,5,5,0,0,1580,1579,1,0,0,0,1581,1584,1,0,0,0,1582,1580,
        1,0,0,0,1582,1583,1,0,0,0,1583,1585,1,0,0,0,1584,1582,1,0,0,0,1585,
        1589,5,26,0,0,1586,1588,5,5,0,0,1587,1586,1,0,0,0,1588,1591,1,0,
        0,0,1589,1587,1,0,0,0,1589,1590,1,0,0,0,1590,1592,1,0,0,0,1591,1589,
        1,0,0,0,1592,1594,3,90,45,0,1593,1582,1,0,0,0,1593,1594,1,0,0,0,
        1594,1598,1,0,0,0,1595,1597,5,5,0,0,1596,1595,1,0,0,0,1597,1600,
        1,0,0,0,1598,1596,1,0,0,0,1598,1599,1,0,0,0,1599,1602,1,0,0,0,1600,
        1598,1,0,0,0,1601,1603,3,136,68,0,1602,1601,1,0,0,0,1602,1603,1,
        0,0,0,1603,89,1,0,0,0,1604,1608,7,2,0,0,1605,1607,5,5,0,0,1606,1605,
        1,0,0,0,1607,1610,1,0,0,0,1608,1606,1,0,0,0,1608,1609,1,0,0,0,1609,
        1611,1,0,0,0,1610,1608,1,0,0,0,1611,1612,3,208,104,0,1612,91,1,0,
        0,0,1613,1617,5,13,0,0,1614,1616,5,5,0,0,1615,1614,1,0,0,0,1616,
        1619,1,0,0,0,1617,1615,1,0,0,0,1617,1618,1,0,0,0,1618,1621,1,0,0,
        0,1619,1617,1,0,0,0,1620,1622,3,94,47,0,1621,1620,1,0,0,0,1621,1622,
        1,0,0,0,1622,1637,1,0,0,0,1623,1625,5,5,0,0,1624,1623,1,0,0,0,1625,
        1628,1,0,0,0,1626,1624,1,0,0,0,1626,1627,1,0,0,0,1627,1629,1,0,0,
        0,1628,1626,1,0,0,0,1629,1633,5,27,0,0,1630,1632,5,5,0,0,1631,1630,
        1,0,0,0,1632,1635,1,0,0,0,1633,1631,1,0,0,0,1633,1634,1,0,0,0,1634,
        1636,1,0,0,0,1635,1633,1,0,0,0,1636,1638,3,50,25,0,1637,1626,1,0,
        0,0,1637,1638,1,0,0,0,1638,1642,1,0,0,0,1639,1641,5,5,0,0,1640,1639,
        1,0,0,0,1641,1644,1,0,0,0,1642,1640,1,0,0,0,1642,1643,1,0,0,0,1643,
        1645,1,0,0,0,1644,1642,1,0,0,0,1645,1646,5,14,0,0,1646,93,1,0,0,
        0,1647,1664,3,96,48,0,1648,1650,5,5,0,0,1649,1648,1,0,0,0,1650,1653,
        1,0,0,0,1651,1649,1,0,0,0,1651,1652,1,0,0,0,1652,1654,1,0,0,0,1653,
        1651,1,0,0,0,1654,1658,5,8,0,0,1655,1657,5,5,0,0,1656,1655,1,0,0,
        0,1657,1660,1,0,0,0,1658,1656,1,0,0,0,1658,1659,1,0,0,0,1659,1661,
        1,0,0,0,1660,1658,1,0,0,0,1661,1663,3,96,48,0,1662,1651,1,0,0,0,
        1663,1666,1,0,0,0,1664,1662,1,0,0,0,1664,1665,1,0,0,0,1665,1670,
        1,0,0,0,1666,1664,1,0,0,0,1667,1669,5,5,0,0,1668,1667,1,0,0,0,1669,
        1672,1,0,0,0,1670,1668,1,0,0,0,1670,1671,1,0,0,0,1671,1674,1,0,0,
        0,1672,1670,1,0,0,0,1673,1675,5,8,0,0,1674,1673,1,0,0,0,1674,1675,
        1,0,0,0,1675,95,1,0,0,0,1676,1680,3,300,150,0,1677,1679,5,5,0,0,
        1678,1677,1,0,0,0,1679,1682,1,0,0,0,1680,1678,1,0,0,0,1680,1681,
        1,0,0,0,1681,1684,1,0,0,0,1682,1680,1,0,0,0,1683,1676,1,0,0,0,1683,
        1684,1,0,0,0,1684,1685,1,0,0,0,1685,1693,3,344,172,0,1686,1688,5,
        5,0,0,1687,1686,1,0,0,0,1688,1691,1,0,0,0,1689,1687,1,0,0,0,1689,
        1690,1,0,0,0,1690,1692,1,0,0,0,1691,1689,1,0,0,0,1692,1694,3,208,
        104,0,1693,1689,1,0,0,0,1693,1694,1,0,0,0,1694,1702,1,0,0,0,1695,
        1697,5,5,0,0,1696,1695,1,0,0,0,1697,1700,1,0,0,0,1698,1696,1,0,0,
        0,1698,1699,1,0,0,0,1699,1701,1,0,0,0,1700,1698,1,0,0,0,1701,1703,
        3,26,13,0,1702,1698,1,0,0,0,1702,1703,1,0,0,0,1703,97,1,0,0,0,1704,
        1706,3,306,153,0,1705,1704,1,0,0,0,1705,1706,1,0,0,0,1706,1712,1,
        0,0,0,1707,1713,3,116,58,0,1708,1713,3,120,60,0,1709,1713,3,102,
        51,0,1710,1713,3,100,50,0,1711,1713,3,126,63,0,1712,1707,1,0,0,0,
        1712,1708,1,0,0,0,1712,1709,1,0,0,0,1712,1710,1,0,0,0,1712,1711,
        1,0,0,0,1713,99,1,0,0,0,1714,1717,3,106,53,0,1715,1717,5,108,0,0,
        1716,1714,1,0,0,0,1716,1715,1,0,0,0,1717,101,1,0,0,0,1718,1721,3,
        100,50,0,1719,1721,3,120,60,0,1720,1718,1,0,0,0,1720,1719,1,0,0,
        0,1721,1725,1,0,0,0,1722,1724,5,5,0,0,1723,1722,1,0,0,0,1724,1727,
        1,0,0,0,1725,1723,1,0,0,0,1725,1726,1,0,0,0,1726,1729,1,0,0,0,1727,
        1725,1,0,0,0,1728,1730,3,104,52,0,1729,1728,1,0,0,0,1730,1731,1,
        0,0,0,1731,1729,1,0,0,0,1731,1732,1,0,0,0,1732,103,1,0,0,0,1733,
        1734,7,3,0,0,1734,105,1,0,0,0,1735,1752,3,108,54,0,1736,1738,5,5,
        0,0,1737,1736,1,0,0,0,1738,1741,1,0,0,0,1739,1737,1,0,0,0,1739,1740,
        1,0,0,0,1740,1742,1,0,0,0,1741,1739,1,0,0,0,1742,1746,5,7,0,0,1743,
        1745,5,5,0,0,1744,1743,1,0,0,0,1745,1748,1,0,0,0,1746,1744,1,0,0,
        0,1746,1747,1,0,0,0,1747,1749,1,0,0,0,1748,1746,1,0,0,0,1749,1751,
        3,108,54,0,1750,1739,1,0,0,0,1751,1754,1,0,0,0,1752,1750,1,0,0,0,
        1752,1753,1,0,0,0,1753,107,1,0,0,0,1754,1752,1,0,0,0,1755,1763,3,
        344,172,0,1756,1758,5,5,0,0,1757,1756,1,0,0,0,1758,1761,1,0,0,0,
        1759,1757,1,0,0,0,1759,1760,1,0,0,0,1760,1762,1,0,0,0,1761,1759,
        1,0,0,0,1762,1764,3,206,103,0,1763,1759,1,0,0,0,1763,1764,1,0,0,
        0,1764,109,1,0,0,0,1765,1767,3,112,56,0,1766,1765,1,0,0,0,1766,1767,
        1,0,0,0,1767,1768,1,0,0,0,1768,1771,3,98,49,0,1769,1771,5,15,0,0,
        1770,1766,1,0,0,0,1770,1769,1,0,0,0,1771,111,1,0,0,0,1772,1774,3,
        114,57,0,1773,1772,1,0,0,0,1774,1775,1,0,0,0,1775,1773,1,0,0,0,1775,
        1776,1,0,0,0,1776,113,1,0,0,0,1777,1781,3,316,158,0,1778,1780,5,
        5,0,0,1779,1778,1,0,0,0,1780,1783,1,0,0,0,1781,1779,1,0,0,0,1781,
        1782,1,0,0,0,1782,1786,1,0,0,0,1783,1781,1,0,0,0,1784,1786,3,334,
        167,0,1785,1777,1,0,0,0,1785,1784,1,0,0,0,1786,115,1,0,0,0,1787,
        1791,3,122,61,0,1788,1790,5,5,0,0,1789,1788,1,0,0,0,1790,1793,1,
        0,0,0,1791,1789,1,0,0,0,1791,1792,1,0,0,0,1792,1794,1,0,0,0,1793,
        1791,1,0,0,0,1794,1798,5,7,0,0,1795,1797,5,5,0,0,1796,1795,1,0,0,
        0,1797,1800,1,0,0,0,1798,1796,1,0,0,0,1798,1799,1,0,0,0,1799,1802,
        1,0,0,0,1800,1798,1,0,0,0,1801,1787,1,0,0,0,1801,1802,1,0,0,0,1802,
        1803,1,0,0,0,1803,1807,3,118,59,0,1804,1806,5,5,0,0,1805,1804,1,
        0,0,0,1806,1809,1,0,0,0,1807,1805,1,0,0,0,1807,1808,1,0,0,0,1808,
        1810,1,0,0,0,1809,1807,1,0,0,0,1810,1814,5,34,0,0,1811,1813,5,5,
        0,0,1812,1811,1,0,0,0,1813,1816,1,0,0,0,1814,1812,1,0,0,0,1814,1815,
        1,0,0,0,1815,1817,1,0,0,0,1816,1814,1,0,0,0,1817,1818,3,98,49,0,
        1818,117,1,0,0,0,1819,1823,5,9,0,0,1820,1822,5,5,0,0,1821,1820,1,
        0,0,0,1822,1825,1,0,0,0,1823,1821,1,0,0,0,1823,1824,1,0,0,0,1824,
        1828,1,0,0,0,1825,1823,1,0,0,0,1826,1829,3,84,42,0,1827,1829,3,98,
        49,0,1828,1826,1,0,0,0,1828,1827,1,0,0,0,1828,1829,1,0,0,0,1829,
        1849,1,0,0,0,1830,1832,5,5,0,0,1831,1830,1,0,0,0,1832,1835,1,0,0,
        0,1833,1831,1,0,0,0,1833,1834,1,0,0,0,1834,1836,1,0,0,0,1835,1833,
        1,0,0,0,1836,1840,5,8,0,0,1837,1839,5,5,0,0,1838,1837,1,0,0,0,1839,
        1842,1,0,0,0,1840,1838,1,0,0,0,1840,1841,1,0,0,0,1841,1845,1,0,0,
        0,1842,1840,1,0,0,0,1843,1846,3,84,42,0,1844,1846,3,98,49,0,1845,
        1843,1,0,0,0,1845,1844,1,0,0,0,1846,1848,1,0,0,0,1847,1833,1,0,0,
        0,1848,1851,1,0,0,0,1849,1847,1,0,0,0,1849,1850,1,0,0,0,1850,1859,
        1,0,0,0,1851,1849,1,0,0,0,1852,1854,5,5,0,0,1853,1852,1,0,0,0,1854,
        1857,1,0,0,0,1855,1853,1,0,0,0,1855,1856,1,0,0,0,1856,1858,1,0,0,
        0,1857,1855,1,0,0,0,1858,1860,5,8,0,0,1859,1855,1,0,0,0,1859,1860,
        1,0,0,0,1860,1864,1,0,0,0,1861,1863,5,5,0,0,1862,1861,1,0,0,0,1863,
        1866,1,0,0,0,1864,1862,1,0,0,0,1864,1865,1,0,0,0,1865,1867,1,0,0,
        0,1866,1864,1,0,0,0,1867,1868,5,10,0,0,1868,119,1,0,0,0,1869,1873,
        5,9,0,0,1870,1872,5,5,0,0,1871,1870,1,0,0,0,1872,1875,1,0,0,0,1873,
        1871,1,0,0,0,1873,1874,1,0,0,0,1874,1876,1,0,0,0,1875,1873,1,0,0,
        0,1876,1880,3,98,49,0,1877,1879,5,5,0,0,1878,1877,1,0,0,0,1879,1882,
        1,0,0,0,1880,1878,1,0,0,0,1880,1881,1,0,0,0,1881,1883,1,0,0,0,1882,
        1880,1,0,0,0,1883,1884,5,10,0,0,1884,121,1,0,0,0,1885,1887,3,306,
        153,0,1886,1885,1,0,0,0,1886,1887,1,0,0,0,1887,1891,1,0,0,0,1888,
        1892,3,120,60,0,1889,1892,3,102,51,0,1890,1892,3,100,50,0,1891,1888,
        1,0,0,0,1891,1889,1,0,0,0,1891,1890,1,0,0,0,1892,123,1,0,0,0,1893,
        1897,5,9,0,0,1894,1896,5,5,0,0,1895,1894,1,0,0,0,1896,1899,1,0,0,
        0,1897,1895,1,0,0,0,1897,1898,1,0,0,0,1898,1902,1,0,0,0,1899,1897,
        1,0,0,0,1900,1903,3,106,53,0,1901,1903,3,124,62,0,1902,1900,1,0,
        0,0,1902,1901,1,0,0,0,1903,1907,1,0,0,0,1904,1906,5,5,0,0,1905,1904,
        1,0,0,0,1906,1909,1,0,0,0,1907,1905,1,0,0,0,1907,1908,1,0,0,0,1908,
        1910,1,0,0,0,1909,1907,1,0,0,0,1910,1911,5,10,0,0,1911,125,1,0,0,
        0,1912,1914,3,306,153,0,1913,1912,1,0,0,0,1913,1914,1,0,0,0,1914,
        1917,1,0,0,0,1915,1918,3,106,53,0,1916,1918,3,124,62,0,1917,1915,
        1,0,0,0,1917,1916,1,0,0,0,1918,1922,1,0,0,0,1919,1921,5,5,0,0,1920,
        1919,1,0,0,0,1921,1924,1,0,0,0,1922,1920,1,0,0,0,1922,1923,1,0,0,
        0,1923,1925,1,0,0,0,1924,1922,1,0,0,0,1925,1929,5,57,0,0,1926,1928,
        5,5,0,0,1927,1926,1,0,0,0,1928,1931,1,0,0,0,1929,1927,1,0,0,0,1929,
        1930,1,0,0,0,1930,1933,1,0,0,0,1931,1929,1,0,0,0,1932,1934,3,306,
        153,0,1933,1932,1,0,0,0,1933,1934,1,0,0,0,1934,1937,1,0,0,0,1935,
        1938,3,106,53,0,1936,1938,3,124,62,0,1937,1935,1,0,0,0,1937,1936,
        1,0,0,0,1938,127,1,0,0,0,1939,1945,3,130,65,0,1940,1941,3,150,75,
        0,1941,1942,3,130,65,0,1942,1944,1,0,0,0,1943,1940,1,0,0,0,1944,
        1947,1,0,0,0,1945,1943,1,0,0,0,1945,1946,1,0,0,0,1946,1949,1,0,0,
        0,1947,1945,1,0,0,0,1948,1939,1,0,0,0,1948,1949,1,0,0,0,1949,1951,
        1,0,0,0,1950,1952,3,150,75,0,1951,1950,1,0,0,0,1951,1952,1,0,0,0,
        1952,129,1,0,0,0,1953,1956,3,132,66,0,1954,1956,3,334,167,0,1955,
        1953,1,0,0,0,1955,1954,1,0,0,0,1956,1959,1,0,0,0,1957,1955,1,0,0,
        0,1957,1958,1,0,0,0,1958,1964,1,0,0,0,1959,1957,1,0,0,0,1960,1965,
        3,20,10,0,1961,1965,3,146,73,0,1962,1965,3,138,69,0,1963,1965,3,
        152,76,0,1964,1960,1,0,0,0,1964,1961,1,0,0,0,1964,1962,1,0,0,0,1964,
        1963,1,0,0,0,1965,131,1,0,0,0,1966,1967,3,344,172,0,1967,1971,7,
        4,0,0,1968,1970,5,5,0,0,1969,1968,1,0,0,0,1970,1973,1,0,0,0,1971,
        1969,1,0,0,0,1971,1972,1,0,0,0,1972,133,1,0,0,0,1973,1971,1,0,0,
        0,1974,1977,3,136,68,0,1975,1977,3,130,65,0,1976,1974,1,0,0,0,1976,
        1975,1,0,0,0,1977,135,1,0,0,0,1978,1982,5,13,0,0,1979,1981,5,5,0,
        0,1980,1979,1,0,0,0,1981,1984,1,0,0,0,1982,1980,1,0,0,0,1982,1983,
        1,0,0,0,1983,1985,1,0,0,0,1984,1982,1,0,0,0,1985,1989,3,128,64,0,
        1986,1988,5,5,0,0,1987,1986,1,0,0,0,1988,1991,1,0,0,0,1989,1987,
        1,0,0,0,1989,1990,1,0,0,0,1990,1992,1,0,0,0,1991,1989,1,0,0,0,1992,
        1993,5,14,0,0,1993,137,1,0,0,0,1994,1998,3,140,70,0,1995,1998,3,
        142,71,0,1996,1998,3,144,72,0,1997,1994,1,0,0,0,1997,1995,1,0,0,
        0,1997,1996,1,0,0,0,1998,139,1,0,0,0,1999,2003,5,95,0,0,2000,2002,
        5,5,0,0,2001,2000,1,0,0,0,2002,2005,1,0,0,0,2003,2001,1,0,0,0,2003,
        2004,1,0,0,0,2004,2006,1,0,0,0,2005,2003,1,0,0,0,2006,2010,5,9,0,
        0,2007,2009,3,334,167,0,2008,2007,1,0,0,0,2009,2012,1,0,0,0,2010,
        2008,1,0,0,0,2010,2011,1,0,0,0,2011,2015,1,0,0,0,2012,2010,1,0,0,
        0,2013,2016,3,66,33,0,2014,2016,3,68,34,0,2015,2013,1,0,0,0,2015,
        2014,1,0,0,0,2016,2017,1,0,0,0,2017,2018,5,104,0,0,2018,2019,3,152,
        76,0,2019,2023,5,10,0,0,2020,2022,5,5,0,0,2021,2020,1,0,0,0,2022,
        2025,1,0,0,0,2023,2021,1,0,0,0,2023,2024,1,0,0,0,2024,2027,1,0,0,
        0,2025,2023,1,0,0,0,2026,2028,3,134,67,0,2027,2026,1,0,0,0,2027,
        2028,1,0,0,0,2028,141,1,0,0,0,2029,2033,5,97,0,0,2030,2032,5,5,0,
        0,2031,2030,1,0,0,0,2032,2035,1,0,0,0,2033,2031,1,0,0,0,2033,2034,
        1,0,0,0,2034,2036,1,0,0,0,2035,2033,1,0,0,0,2036,2037,5,9,0,0,2037,
        2038,3,152,76,0,2038,2042,5,10,0,0,2039,2041,5,5,0,0,2040,2039,1,
        0,0,0,2041,2044,1,0,0,0,2042,2040,1,0,0,0,2042,2043,1,0,0,0,2043,
        2047,1,0,0,0,2044,2042,1,0,0,0,2045,2048,3,134,67,0,2046,2048,5,
        27,0,0,2047,2045,1,0,0,0,2047,2046,1,0,0,0,2048,143,1,0,0,0,2049,
        2053,5,96,0,0,2050,2052,5,5,0,0,2051,2050,1,0,0,0,2052,2055,1,0,
        0,0,2053,2051,1,0,0,0,2053,2054,1,0,0,0,2054,2057,1,0,0,0,2055,2053,
        1,0,0,0,2056,2058,3,134,67,0,2057,2056,1,0,0,0,2057,2058,1,0,0,0,
        2058,2062,1,0,0,0,2059,2061,5,5,0,0,2060,2059,1,0,0,0,2061,2064,
        1,0,0,0,2062,2060,1,0,0,0,2062,2063,1,0,0,0,2063,2065,1,0,0,0,2064,
        2062,1,0,0,0,2065,2069,5,97,0,0,2066,2068,5,5,0,0,2067,2066,1,0,
        0,0,2068,2071,1,0,0,0,2069,2067,1,0,0,0,2069,2070,1,0,0,0,2070,2072,
        1,0,0,0,2071,2069,1,0,0,0,2072,2073,5,9,0,0,2073,2074,3,152,76,0,
        2074,2075,5,10,0,0,2075,145,1,0,0,0,2076,2077,3,188,94,0,2077,2078,
        5,28,0,0,2078,2083,1,0,0,0,2079,2080,3,192,96,0,2080,2081,3,274,
        137,0,2081,2083,1,0,0,0,2082,2076,1,0,0,0,2082,2079,1,0,0,0,2083,
        2087,1,0,0,0,2084,2086,5,5,0,0,2085,2084,1,0,0,0,2086,2089,1,0,0,
        0,2087,2085,1,0,0,0,2087,2088,1,0,0,0,2088,2090,1,0,0,0,2089,2087,
        1,0,0,0,2090,2091,3,152,76,0,2091,147,1,0,0,0,2092,2096,7,5,0,0,
        2093,2095,5,5,0,0,2094,2093,1,0,0,0,2095,2098,1,0,0,0,2096,2094,
        1,0,0,0,2096,2097,1,0,0,0,2097,149,1,0,0,0,2098,2096,1,0,0,0,2099,
        2101,7,5,0,0,2100,2099,1,0,0,0,2101,2102,1,0,0,0,2102,2100,1,0,0,
        0,2102,2103,1,0,0,0,2103,151,1,0,0,0,2104,2105,3,154,77,0,2105,153,
        1,0,0,0,2106,2123,3,156,78,0,2107,2109,5,5,0,0,2108,2107,1,0,0,0,
        2109,2112,1,0,0,0,2110,2108,1,0,0,0,2110,2111,1,0,0,0,2111,2113,
        1,0,0,0,2112,2110,1,0,0,0,2113,2117,5,23,0,0,2114,2116,5,5,0,0,2115,
        2114,1,0,0,0,2116,2119,1,0,0,0,2117,2115,1,0,0,0,2117,2118,1,0,0,
        0,2118,2120,1,0,0,0,2119,2117,1,0,0,0,2120,2122,3,156,78,0,2121,
        2110,1,0,0,0,2122,2125,1,0,0,0,2123,2121,1,0,0,0,2123,2124,1,0,0,
        0,2124,155,1,0,0,0,2125,2123,1,0,0,0,2126,2143,3,158,79,0,2127,2129,
        5,5,0,0,2128,2127,1,0,0,0,2129,2132,1,0,0,0,2130,2128,1,0,0,0,2130,
        2131,1,0,0,0,2131,2133,1,0,0,0,2132,2130,1,0,0,0,2133,2137,5,22,
        0,0,2134,2136,5,5,0,0,2135,2134,1,0,0,0,2136,2139,1,0,0,0,2137,2135,
        1,0,0,0,2137,2138,1,0,0,0,2138,2140,1,0,0,0,2139,2137,1,0,0,0,2140,
        2142,3,158,79,0,2141,2130,1,0,0,0,2142,2145,1,0,0,0,2143,2141,1,
        0,0,0,2143,2144,1,0,0,0,2144,157,1,0,0,0,2145,2143,1,0,0,0,2146,
        2158,3,160,80,0,2147,2151,3,276,138,0,2148,2150,5,5,0,0,2149,2148,
        1,0,0,0,2150,2153,1,0,0,0,2151,2149,1,0,0,0,2151,2152,1,0,0,0,2152,
        2154,1,0,0,0,2153,2151,1,0,0,0,2154,2155,3,160,80,0,2155,2157,1,
        0,0,0,2156,2147,1,0,0,0,2157,2160,1,0,0,0,2158,2156,1,0,0,0,2158,
        2159,1,0,0,0,2159,159,1,0,0,0,2160,2158,1,0,0,0,2161,2173,3,162,
        81,0,2162,2166,3,278,139,0,2163,2165,5,5,0,0,2164,2163,1,0,0,0,2165,
        2168,1,0,0,0,2166,2164,1,0,0,0,2166,2167,1,0,0,0,2167,2169,1,0,0,
        0,2168,2166,1,0,0,0,2169,2170,3,162,81,0,2170,2172,1,0,0,0,2171,
        2162,1,0,0,0,2172,2175,1,0,0,0,2173,2171,1,0,0,0,2173,2174,1,0,0,
        0,2174,161,1,0,0,0,2175,2173,1,0,0,0,2176,2180,3,164,82,0,2177,2179,
        3,202,101,0,2178,2177,1,0,0,0,2179,2182,1,0,0,0,2180,2178,1,0,0,
        0,2180,2181,1,0,0,0,2181,163,1,0,0,0,2182,2180,1,0,0,0,2183,2204,
        3,166,83,0,2184,2188,3,280,140,0,2185,2187,5,5,0,0,2186,2185,1,0,
        0,0,2187,2190,1,0,0,0,2188,2186,1,0,0,0,2188,2189,1,0,0,0,2189,2191,
        1,0,0,0,2190,2188,1,0,0,0,2191,2192,3,166,83,0,2192,2203,1,0,0,0,
        2193,2197,3,282,141,0,2194,2196,5,5,0,0,2195,2194,1,0,0,0,2196,2199,
        1,0,0,0,2197,2195,1,0,0,0,2197,2198,1,0,0,0,2198,2200,1,0,0,0,2199,
        2197,1,0,0,0,2200,2201,3,98,49,0,2201,2203,1,0,0,0,2202,2184,1,0,
        0,0,2202,2193,1,0,0,0,2203,2206,1,0,0,0,2204,2202,1,0,0,0,2204,2205,
        1,0,0,0,2205,165,1,0,0,0,2206,2204,1,0,0,0,2207,2225,3,170,85,0,
        2208,2210,5,5,0,0,2209,2208,1,0,0,0,2210,2213,1,0,0,0,2211,2209,
        1,0,0,0,2211,2212,1,0,0,0,2212,2214,1,0,0,0,2213,2211,1,0,0,0,2214,
        2218,3,168,84,0,2215,2217,5,5,0,0,2216,2215,1,0,0,0,2217,2220,1,
        0,0,0,2218,2216,1,0,0,0,2218,2219,1,0,0,0,2219,2221,1,0,0,0,2220,
        2218,1,0,0,0,2221,2222,3,170,85,0,2222,2224,1,0,0,0,2223,2211,1,
        0,0,0,2224,2227,1,0,0,0,2225,2223,1,0,0,0,2225,2226,1,0,0,0,2226,
        167,1,0,0,0,2227,2225,1,0,0,0,2228,2229,5,46,0,0,2229,2230,5,26,
        0,0,2230,169,1,0,0,0,2231,2243,3,172,86,0,2232,2236,3,344,172,0,
        2233,2235,5,5,0,0,2234,2233,1,0,0,0,2235,2238,1,0,0,0,2236,2234,
        1,0,0,0,2236,2237,1,0,0,0,2237,2239,1,0,0,0,2238,2236,1,0,0,0,2239,
        2240,3,172,86,0,2240,2242,1,0,0,0,2241,2232,1,0,0,0,2242,2245,1,
        0,0,0,2243,2241,1,0,0,0,2243,2244,1,0,0,0,2244,171,1,0,0,0,2245,
        2243,1,0,0,0,2246,2257,3,174,87,0,2247,2251,7,6,0,0,2248,2250,5,
        5,0,0,2249,2248,1,0,0,0,2250,2253,1,0,0,0,2251,2249,1,0,0,0,2251,
        2252,1,0,0,0,2252,2254,1,0,0,0,2253,2251,1,0,0,0,2254,2256,3,174,
        87,0,2255,2247,1,0,0,0,2256,2259,1,0,0,0,2257,2255,1,0,0,0,2257,
        2258,1,0,0,0,2258,173,1,0,0,0,2259,2257,1,0,0,0,2260,2272,3,176,
        88,0,2261,2265,3,284,142,0,2262,2264,5,5,0,0,2263,2262,1,0,0,0,2264,
        2267,1,0,0,0,2265,2263,1,0,0,0,2265,2266,1,0,0,0,2266,2268,1,0,0,
        0,2267,2265,1,0,0,0,2268,2269,3,176,88,0,2269,2271,1,0,0,0,2270,
        2261,1,0,0,0,2271,2274,1,0,0,0,2272,2270,1,0,0,0,2272,2273,1,0,0,
        0,2273,175,1,0,0,0,2274,2272,1,0,0,0,2275,2287,3,178,89,0,2276,2280,
        3,286,143,0,2277,2279,5,5,0,0,2278,2277,1,0,0,0,2279,2282,1,0,0,
        0,2280,2278,1,0,0,0,2280,2281,1,0,0,0,2281,2283,1,0,0,0,2282,2280,
        1,0,0,0,2283,2284,3,178,89,0,2284,2286,1,0,0,0,2285,2276,1,0,0,0,
        2286,2289,1,0,0,0,2287,2285,1,0,0,0,2287,2288,1,0,0,0,2288,177,1,
        0,0,0,2289,2287,1,0,0,0,2290,2308,3,180,90,0,2291,2293,5,5,0,0,2292,
        2291,1,0,0,0,2293,2296,1,0,0,0,2294,2292,1,0,0,0,2294,2295,1,0,0,
        0,2295,2297,1,0,0,0,2296,2294,1,0,0,0,2297,2301,3,288,144,0,2298,
        2300,5,5,0,0,2299,2298,1,0,0,0,2300,2303,1,0,0,0,2301,2299,1,0,0,
        0,2301,2302,1,0,0,0,2302,2304,1,0,0,0,2303,2301,1,0,0,0,2304,2305,
        3,98,49,0,2305,2307,1,0,0,0,2306,2294,1,0,0,0,2307,2310,1,0,0,0,
        2308,2306,1,0,0,0,2308,2309,1,0,0,0,2309,179,1,0,0,0,2310,2308,1,
        0,0,0,2311,2313,3,182,91,0,2312,2311,1,0,0,0,2313,2316,1,0,0,0,2314,
        2312,1,0,0,0,2314,2315,1,0,0,0,2315,2317,1,0,0,0,2316,2314,1,0,0,
        0,2317,2318,3,184,92,0,2318,181,1,0,0,0,2319,2329,3,334,167,0,2320,
        2329,3,132,66,0,2321,2325,3,290,145,0,2322,2324,5,5,0,0,2323,2322,
        1,0,0,0,2324,2327,1,0,0,0,2325,2323,1,0,0,0,2325,2326,1,0,0,0,2326,
        2329,1,0,0,0,2327,2325,1,0,0,0,2328,2319,1,0,0,0,2328,2320,1,0,0,
        0,2328,2321,1,0,0,0,2329,183,1,0,0,0,2330,2334,3,212,106,0,2331,
        2333,3,186,93,0,2332,2331,1,0,0,0,2333,2336,1,0,0,0,2334,2332,1,
        0,0,0,2334,2335,1,0,0,0,2335,185,1,0,0,0,2336,2334,1,0,0,0,2337,
        2343,3,292,146,0,2338,2343,3,206,103,0,2339,2343,3,202,101,0,2340,
        2343,3,198,99,0,2341,2343,3,200,100,0,2342,2337,1,0,0,0,2342,2338,
        1,0,0,0,2342,2339,1,0,0,0,2342,2340,1,0,0,0,2342,2341,1,0,0,0,2343,
        187,1,0,0,0,2344,2345,3,184,92,0,2345,2346,3,196,98,0,2346,2350,
        1,0,0,0,2347,2350,3,344,172,0,2348,2350,3,190,95,0,2349,2344,1,0,
        0,0,2349,2347,1,0,0,0,2349,2348,1,0,0,0,2350,189,1,0,0,0,2351,2355,
        5,9,0,0,2352,2354,5,5,0,0,2353,2352,1,0,0,0,2354,2357,1,0,0,0,2355,
        2353,1,0,0,0,2355,2356,1,0,0,0,2356,2358,1,0,0,0,2357,2355,1,0,0,
        0,2358,2362,3,188,94,0,2359,2361,5,5,0,0,2360,2359,1,0,0,0,2361,
        2364,1,0,0,0,2362,2360,1,0,0,0,2362,2363,1,0,0,0,2363,2365,1,0,0,
        0,2364,2362,1,0,0,0,2365,2366,5,10,0,0,2366,191,1,0,0,0,2367,2370,
        3,180,90,0,2368,2370,3,194,97,0,2369,2367,1,0,0,0,2369,2368,1,0,
        0,0,2370,193,1,0,0,0,2371,2375,5,9,0,0,2372,2374,5,5,0,0,2373,2372,
        1,0,0,0,2374,2377,1,0,0,0,2375,2373,1,0,0,0,2375,2376,1,0,0,0,2376,
        2378,1,0,0,0,2377,2375,1,0,0,0,2378,2382,3,192,96,0,2379,2381,5,
        5,0,0,2380,2379,1,0,0,0,2381,2384,1,0,0,0,2382,2380,1,0,0,0,2382,
        2383,1,0,0,0,2383,2385,1,0,0,0,2384,2382,1,0,0,0,2385,2386,5,10,
        0,0,2386,195,1,0,0,0,2387,2391,3,206,103,0,2388,2391,3,198,99,0,
        2389,2391,3,200,100,0,2390,2387,1,0,0,0,2390,2388,1,0,0,0,2390,2389,
        1,0,0,0,2391,197,1,0,0,0,2392,2396,5,11,0,0,2393,2395,5,5,0,0,2394,
        2393,1,0,0,0,2395,2398,1,0,0,0,2396,2394,1,0,0,0,2396,2397,1,0,0,
        0,2397,2399,1,0,0,0,2398,2396,1,0,0,0,2399,2416,3,152,76,0,2400,
        2402,5,5,0,0,2401,2400,1,0,0,0,2402,2405,1,0,0,0,2403,2401,1,0,0,
        0,2403,2404,1,0,0,0,2404,2406,1,0,0,0,2405,2403,1,0,0,0,2406,2410,
        5,8,0,0,2407,2409,5,5,0,0,2408,2407,1,0,0,0,2409,2412,1,0,0,0,2410,
        2408,1,0,0,0,2410,2411,1,0,0,0,2411,2413,1,0,0,0,2412,2410,1,0,0,
        0,2413,2415,3,152,76,0,2414,2403,1,0,0,0,2415,2418,1,0,0,0,2416,
        2414,1,0,0,0,2416,2417,1,0,0,0,2417,2426,1,0,0,0,2418,2416,1,0,0,
        0,2419,2421,5,5,0,0,2420,2419,1,0,0,0,2421,2424,1,0,0,0,2422,2420,
        1,0,0,0,2422,2423,1,0,0,0,2423,2425,1,0,0,0,2424,2422,1,0,0,0,2425,
        2427,5,8,0,0,2426,2422,1,0,0,0,2426,2427,1,0,0,0,2427,2431,1,0,0,
        0,2428,2430,5,5,0,0,2429,2428,1,0,0,0,2430,2433,1,0,0,0,2431,2429,
        1,0,0,0,2431,2432,1,0,0,0,2432,2434,1,0,0,0,2433,2431,1,0,0,0,2434,
        2435,5,12,0,0,2435,199,1,0,0,0,2436,2440,3,296,148,0,2437,2439,5,
        5,0,0,2438,2437,1,0,0,0,2439,2442,1,0,0,0,2440,2438,1,0,0,0,2440,
        2441,1,0,0,0,2441,2446,1,0,0,0,2442,2440,1,0,0,0,2443,2447,3,344,
        172,0,2444,2447,3,214,107,0,2445,2447,5,74,0,0,2446,2443,1,0,0,0,
        2446,2444,1,0,0,0,2446,2445,1,0,0,0,2447,201,1,0,0,0,2448,2450,3,
        206,103,0,2449,2448,1,0,0,0,2449,2450,1,0,0,0,2450,2456,1,0,0,0,
        2451,2453,3,208,104,0,2452,2451,1,0,0,0,2452,2453,1,0,0,0,2453,2454,
        1,0,0,0,2454,2457,3,204,102,0,2455,2457,3,208,104,0,2456,2452,1,
        0,0,0,2456,2455,1,0,0,0,2457,203,1,0,0,0,2458,2460,3,334,167,0,2459,
        2458,1,0,0,0,2460,2463,1,0,0,0,2461,2459,1,0,0,0,2461,2462,1,0,0,
        0,2462,2465,1,0,0,0,2463,2461,1,0,0,0,2464,2466,3,132,66,0,2465,
        2464,1,0,0,0,2465,2466,1,0,0,0,2466,2470,1,0,0,0,2467,2469,5,5,0,
        0,2468,2467,1,0,0,0,2469,2472,1,0,0,0,2470,2468,1,0,0,0,2470,2471,
        1,0,0,0,2471,2473,1,0,0,0,2472,2470,1,0,0,0,2473,2474,3,234,117,
        0,2474,205,1,0,0,0,2475,2479,5,47,0,0,2476,2478,5,5,0,0,2477,2476,
        1,0,0,0,2478,2481,1,0,0,0,2479,2477,1,0,0,0,2479,2480,1,0,0,0,2480,
        2482,1,0,0,0,2481,2479,1,0,0,0,2482,2499,3,110,55,0,2483,2485,5,
        5,0,0,2484,2483,1,0,0,0,2485,2488,1,0,0,0,2486,2484,1,0,0,0,2486,
        2487,1,0,0,0,2487,2489,1,0,0,0,2488,2486,1,0,0,0,2489,2493,5,8,0,
        0,2490,2492,5,5,0,0,2491,2490,1,0,0,0,2492,2495,1,0,0,0,2493,2491,
        1,0,0,0,2493,2494,1,0,0,0,2494,2496,1,0,0,0,2495,2493,1,0,0,0,2496,
        2498,3,110,55,0,2497,2486,1,0,0,0,2498,2501,1,0,0,0,2499,2497,1,
        0,0,0,2499,2500,1,0,0,0,2500,2509,1,0,0,0,2501,2499,1,0,0,0,2502,
        2504,5,5,0,0,2503,2502,1,0,0,0,2504,2507,1,0,0,0,2505,2503,1,0,0,
        0,2505,2506,1,0,0,0,2506,2508,1,0,0,0,2507,2505,1,0,0,0,2508,2510,
        5,8,0,0,2509,2505,1,0,0,0,2509,2510,1,0,0,0,2510,2514,1,0,0,0,2511,
        2513,5,5,0,0,2512,2511,1,0,0,0,2513,2516,1,0,0,0,2514,2512,1,0,0,
        0,2514,2515,1,0,0,0,2515,2517,1,0,0,0,2516,2514,1,0,0,0,2517,2518,
        5,48,0,0,2518,207,1,0,0,0,2519,2523,5,9,0,0,2520,2522,5,5,0,0,2521,
        2520,1,0,0,0,2522,2525,1,0,0,0,2523,2521,1,0,0,0,2523,2524,1,0,0,
        0,2524,2561,1,0,0,0,2525,2523,1,0,0,0,2526,2543,3,210,105,0,2527,
        2529,5,5,0,0,2528,2527,1,0,0,0,2529,2532,1,0,0,0,2530,2528,1,0,0,
        0,2530,2531,1,0,0,0,2531,2533,1,0,0,0,2532,2530,1,0,0,0,2533,2537,
        5,8,0,0,2534,2536,5,5,0,0,2535,2534,1,0,0,0,2536,2539,1,0,0,0,2537,
        2535,1,0,0,0,2537,2538,1,0,0,0,2538,2540,1,0,0,0,2539,2537,1,0,0,
        0,2540,2542,3,210,105,0,2541,2530,1,0,0,0,2542,2545,1,0,0,0,2543,
        2541,1,0,0,0,2543,2544,1,0,0,0,2544,2553,1,0,0,0,2545,2543,1,0,0,
        0,2546,2548,5,5,0,0,2547,2546,1,0,0,0,2548,2551,1,0,0,0,2549,2547,
        1,0,0,0,2549,2550,1,0,0,0,2550,2552,1,0,0,0,2551,2549,1,0,0,0,2552,
        2554,5,8,0,0,2553,2549,1,0,0,0,2553,2554,1,0,0,0,2554,2558,1,0,0,
        0,2555,2557,5,5,0,0,2556,2555,1,0,0,0,2557,2560,1,0,0,0,2558,2556,
        1,0,0,0,2558,2559,1,0,0,0,2559,2562,1,0,0,0,2560,2558,1,0,0,0,2561,
        2526,1,0,0,0,2561,2562,1,0,0,0,2562,2563,1,0,0,0,2563,2564,5,10,
        0,0,2564,209,1,0,0,0,2565,2567,3,334,167,0,2566,2565,1,0,0,0,2566,
        2567,1,0,0,0,2567,2571,1,0,0,0,2568,2570,5,5,0,0,2569,2568,1,0,0,
        0,2570,2573,1,0,0,0,2571,2569,1,0,0,0,2571,2572,1,0,0,0,2572,2588,
        1,0,0,0,2573,2571,1,0,0,0,2574,2578,3,344,172,0,2575,2577,5,5,0,
        0,2576,2575,1,0,0,0,2577,2580,1,0,0,0,2578,2576,1,0,0,0,2578,2579,
        1,0,0,0,2579,2581,1,0,0,0,2580,2578,1,0,0,0,2581,2585,5,28,0,0,2582,
        2584,5,5,0,0,2583,2582,1,0,0,0,2584,2587,1,0,0,0,2585,2583,1,0,0,
        0,2585,2586,1,0,0,0,2586,2589,1,0,0,0,2587,2585,1,0,0,0,2588,2574,
        1,0,0,0,2588,2589,1,0,0,0,2589,2591,1,0,0,0,2590,2592,5,15,0,0,2591,
        2590,1,0,0,0,2591,2592,1,0,0,0,2592,2596,1,0,0,0,2593,2595,5,5,0,
        0,2594,2593,1,0,0,0,2595,2598,1,0,0,0,2596,2594,1,0,0,0,2596,2597,
        1,0,0,0,2597,2599,1,0,0,0,2598,2596,1,0,0,0,2599,2600,3,152,76,0,
        2600,211,1,0,0,0,2601,2616,3,214,107,0,2602,2616,3,344,172,0,2603,
        2616,3,218,109,0,2604,2616,3,220,110,0,2605,2616,3,272,136,0,2606,
        2616,3,242,121,0,2607,2616,3,244,122,0,2608,2616,3,216,108,0,2609,
        2616,3,246,123,0,2610,2616,3,248,124,0,2611,2616,3,250,125,0,2612,
        2616,3,254,127,0,2613,2616,3,264,132,0,2614,2616,3,270,135,0,2615,
        2601,1,0,0,0,2615,2602,1,0,0,0,2615,2603,1,0,0,0,2615,2604,1,0,0,
        0,2615,2605,1,0,0,0,2615,2606,1,0,0,0,2615,2607,1,0,0,0,2615,2608,
        1,0,0,0,2615,2609,1,0,0,0,2615,2610,1,0,0,0,2615,2611,1,0,0,0,2615,
        2612,1,0,0,0,2615,2613,1,0,0,0,2615,2614,1,0,0,0,2616,213,1,0,0,
        0,2617,2621,5,9,0,0,2618,2620,5,5,0,0,2619,2618,1,0,0,0,2620,2623,
        1,0,0,0,2621,2619,1,0,0,0,2621,2622,1,0,0,0,2622,2624,1,0,0,0,2623,
        2621,1,0,0,0,2624,2628,3,152,76,0,2625,2627,5,5,0,0,2626,2625,1,
        0,0,0,2627,2630,1,0,0,0,2628,2626,1,0,0,0,2628,2629,1,0,0,0,2629,
        2631,1,0,0,0,2630,2628,1,0,0,0,2631,2632,5,10,0,0,2632,215,1,0,0,
        0,2633,2637,5,11,0,0,2634,2636,5,5,0,0,2635,2634,1,0,0,0,2636,2639,
        1,0,0,0,2637,2635,1,0,0,0,2637,2638,1,0,0,0,2638,2675,1,0,0,0,2639,
        2637,1,0,0,0,2640,2657,3,152,76,0,2641,2643,5,5,0,0,2642,2641,1,
        0,0,0,2643,2646,1,0,0,0,2644,2642,1,0,0,0,2644,2645,1,0,0,0,2645,
        2647,1,0,0,0,2646,2644,1,0,0,0,2647,2651,5,8,0,0,2648,2650,5,5,0,
        0,2649,2648,1,0,0,0,2650,2653,1,0,0,0,2651,2649,1,0,0,0,2651,2652,
        1,0,0,0,2652,2654,1,0,0,0,2653,2651,1,0,0,0,2654,2656,3,152,76,0,
        2655,2644,1,0,0,0,2656,2659,1,0,0,0,2657,2655,1,0,0,0,2657,2658,
        1,0,0,0,2658,2667,1,0,0,0,2659,2657,1,0,0,0,2660,2662,5,5,0,0,2661,
        2660,1,0,0,0,2662,2665,1,0,0,0,2663,2661,1,0,0,0,2663,2664,1,0,0,
        0,2664,2666,1,0,0,0,2665,2663,1,0,0,0,2666,2668,5,8,0,0,2667,2663,
        1,0,0,0,2667,2668,1,0,0,0,2668,2672,1,0,0,0,2669,2671,5,5,0,0,2670,
        2669,1,0,0,0,2671,2674,1,0,0,0,2672,2670,1,0,0,0,2672,2673,1,0,0,
        0,2673,2676,1,0,0,0,2674,2672,1,0,0,0,2675,2640,1,0,0,0,2675,2676,
        1,0,0,0,2676,2677,1,0,0,0,2677,2678,5,12,0,0,2678,217,1,0,0,0,2679,
        2680,7,7,0,0,2680,219,1,0,0,0,2681,2684,3,222,111,0,2682,2684,3,
        224,112,0,2683,2681,1,0,0,0,2683,2682,1,0,0,0,2684,221,1,0,0,0,2685,
        2690,5,151,0,0,2686,2689,3,226,113,0,2687,2689,3,228,114,0,2688,
        2686,1,0,0,0,2688,2687,1,0,0,0,2689,2692,1,0,0,0,2690,2688,1,0,0,
        0,2690,2691,1,0,0,0,2691,2693,1,0,0,0,2692,2690,1,0,0,0,2693,2694,
        5,160,0,0,2694,223,1,0,0,0,2695,2701,5,152,0,0,2696,2700,3,230,115,
        0,2697,2700,3,232,116,0,2698,2700,5,166,0,0,2699,2696,1,0,0,0,2699,
        2697,1,0,0,0,2699,2698,1,0,0,0,2700,2703,1,0,0,0,2701,2699,1,0,0,
        0,2701,2702,1,0,0,0,2702,2704,1,0,0,0,2703,2701,1,0,0,0,2704,2705,
        5,165,0,0,2705,225,1,0,0,0,2706,2707,7,8,0,0,2707,227,1,0,0,0,2708,
        2712,5,164,0,0,2709,2711,5,5,0,0,2710,2709,1,0,0,0,2711,2714,1,0,
        0,0,2712,2710,1,0,0,0,2712,2713,1,0,0,0,2713,2715,1,0,0,0,2714,2712,
        1,0,0,0,2715,2719,3,152,76,0,2716,2718,5,5,0,0,2717,2716,1,0,0,0,
        2718,2721,1,0,0,0,2719,2717,1,0,0,0,2719,2720,1,0,0,0,2720,2722,
        1,0,0,0,2721,2719,1,0,0,0,2722,2723,5,14,0,0,2723,229,1,0,0,0,2724,
        2725,7,9,0,0,2725,231,1,0,0,0,2726,2730,5,169,0,0,2727,2729,5,5,
        0,0,2728,2727,1,0,0,0,2729,2732,1,0,0,0,2730,2728,1,0,0,0,2730,2731,
        1,0,0,0,2731,2733,1,0,0,0,2732,2730,1,0,0,0,2733,2737,3,152,76,0,
        2734,2736,5,5,0,0,2735,2734,1,0,0,0,2736,2739,1,0,0,0,2737,2735,
        1,0,0,0,2737,2738,1,0,0,0,2738,2740,1,0,0,0,2739,2737,1,0,0,0,2740,
        2741,5,14,0,0,2741,233,1,0,0,0,2742,2746,5,13,0,0,2743,2745,5,5,
        0,0,2744,2743,1,0,0,0,2745,2748,1,0,0,0,2746,2744,1,0,0,0,2746,2747,
        1,0,0,0,2747,2765,1,0,0,0,2748,2746,1,0,0,0,2749,2751,3,236,118,
        0,2750,2749,1,0,0,0,2750,2751,1,0,0,0,2751,2755,1,0,0,0,2752,2754,
        5,5,0,0,2753,2752,1,0,0,0,2754,2757,1,0,0,0,2755,2753,1,0,0,0,2755,
        2756,1,0,0,0,2756,2758,1,0,0,0,2757,2755,1,0,0,0,2758,2762,5,34,
        0,0,2759,2761,5,5,0,0,2760,2759,1,0,0,0,2761,2764,1,0,0,0,2762,2760,
        1,0,0,0,2762,2763,1,0,0,0,2763,2766,1,0,0,0,2764,2762,1,0,0,0,2765,
        2750,1,0,0,0,2765,2766,1,0,0,0,2766,2767,1,0,0,0,2767,2771,3,128,
        64,0,2768,2770,5,5,0,0,2769,2768,1,0,0,0,2770,2773,1,0,0,0,2771,
        2769,1,0,0,0,2771,2772,1,0,0,0,2772,2774,1,0,0,0,2773,2771,1,0,0,
        0,2774,2775,5,14,0,0,2775,235,1,0,0,0,2776,2793,3,238,119,0,2777,
        2779,5,5,0,0,2778,2777,1,0,0,0,2779,2782,1,0,0,0,2780,2778,1,0,0,
        0,2780,2781,1,0,0,0,2781,2783,1,0,0,0,2782,2780,1,0,0,0,2783,2787,
        5,8,0,0,2784,2786,5,5,0,0,2785,2784,1,0,0,0,2786,2789,1,0,0,0,2787,
        2785,1,0,0,0,2787,2788,1,0,0,0,2788,2790,1,0,0,0,2789,2787,1,0,0,
        0,2790,2792,3,238,119,0,2791,2780,1,0,0,0,2792,2795,1,0,0,0,2793,
        2791,1,0,0,0,2793,2794,1,0,0,0,2794,2803,1,0,0,0,2795,2793,1,0,0,
        0,2796,2798,5,5,0,0,2797,2796,1,0,0,0,2798,2801,1,0,0,0,2799,2797,
        1,0,0,0,2799,2800,1,0,0,0,2800,2802,1,0,0,0,2801,2799,1,0,0,0,2802,
        2804,5,8,0,0,2803,2799,1,0,0,0,2803,2804,1,0,0,0,2804,237,1,0,0,
        0,2805,2824,3,66,33,0,2806,2821,3,68,34,0,2807,2809,5,5,0,0,2808,
        2807,1,0,0,0,2809,2812,1,0,0,0,2810,2808,1,0,0,0,2810,2811,1,0,0,
        0,2811,2813,1,0,0,0,2812,2810,1,0,0,0,2813,2817,5,26,0,0,2814,2816,
        5,5,0,0,2815,2814,1,0,0,0,2816,2819,1,0,0,0,2817,2815,1,0,0,0,2817,
        2818,1,0,0,0,2818,2820,1,0,0,0,2819,2817,1,0,0,0,2820,2822,3,98,
        49,0,2821,2810,1,0,0,0,2821,2822,1,0,0,0,2822,2824,1,0,0,0,2823,
        2805,1,0,0,0,2823,2806,1,0,0,0,2824,239,1,0,0,0,2825,2827,5,124,
        0,0,2826,2825,1,0,0,0,2826,2827,1,0,0,0,2827,2831,1,0,0,0,2828,2830,
        5,5,0,0,2829,2828,1,0,0,0,2830,2833,1,0,0,0,2831,2829,1,0,0,0,2831,
        2832,1,0,0,0,2832,2834,1,0,0,0,2833,2831,1,0,0,0,2834,2850,5,76,
        0,0,2835,2837,5,5,0,0,2836,2835,1,0,0,0,2837,2840,1,0,0,0,2838,2836,
        1,0,0,0,2838,2839,1,0,0,0,2839,2841,1,0,0,0,2840,2838,1,0,0,0,2841,
        2845,3,98,49,0,2842,2844,5,5,0,0,2843,2842,1,0,0,0,2844,2847,1,0,
        0,0,2845,2843,1,0,0,0,2845,2846,1,0,0,0,2846,2848,1,0,0,0,2847,2845,
        1,0,0,0,2848,2849,5,7,0,0,2849,2851,1,0,0,0,2850,2838,1,0,0,0,2850,
        2851,1,0,0,0,2851,2855,1,0,0,0,2852,2854,5,5,0,0,2853,2852,1,0,0,
        0,2854,2857,1,0,0,0,2855,2853,1,0,0,0,2855,2856,1,0,0,0,2856,2858,
        1,0,0,0,2857,2855,1,0,0,0,2858,2873,3,78,39,0,2859,2861,5,5,0,0,
        2860,2859,1,0,0,0,2861,2864,1,0,0,0,2862,2860,1,0,0,0,2862,2863,
        1,0,0,0,2863,2865,1,0,0,0,2864,2862,1,0,0,0,2865,2869,5,26,0,0,2866,
        2868,5,5,0,0,2867,2866,1,0,0,0,2868,2871,1,0,0,0,2869,2867,1,0,0,
        0,2869,2870,1,0,0,0,2870,2872,1,0,0,0,2871,2869,1,0,0,0,2872,2874,
        3,98,49,0,2873,2862,1,0,0,0,2873,2874,1,0,0,0,2874,2882,1,0,0,0,
        2875,2877,5,5,0,0,2876,2875,1,0,0,0,2877,2880,1,0,0,0,2878,2876,
        1,0,0,0,2878,2879,1,0,0,0,2879,2881,1,0,0,0,2880,2878,1,0,0,0,2881,
        2883,3,46,23,0,2882,2878,1,0,0,0,2882,2883,1,0,0,0,2883,2891,1,0,
        0,0,2884,2886,5,5,0,0,2885,2884,1,0,0,0,2886,2889,1,0,0,0,2887,2885,
        1,0,0,0,2887,2888,1,0,0,0,2888,2890,1,0,0,0,2889,2887,1,0,0,0,2890,
        2892,3,64,32,0,2891,2887,1,0,0,0,2891,2892,1,0,0,0,2892,241,1,0,
        0,0,2893,2896,3,234,117,0,2894,2896,3,240,120,0,2895,2893,1,0,0,
        0,2895,2894,1,0,0,0,2896,243,1,0,0,0,2897,2899,5,116,0,0,2898,2897,
        1,0,0,0,2898,2899,1,0,0,0,2899,2903,1,0,0,0,2900,2902,5,5,0,0,2901,
        2900,1,0,0,0,2902,2905,1,0,0,0,2903,2901,1,0,0,0,2903,2904,1,0,0,
        0,2904,2906,1,0,0,0,2905,2903,1,0,0,0,2906,2927,5,77,0,0,2907,2909,
        5,5,0,0,2908,2907,1,0,0,0,2909,2912,1,0,0,0,2910,2908,1,0,0,0,2910,
        2911,1,0,0,0,2911,2913,1,0,0,0,2912,2910,1,0,0,0,2913,2917,5,26,
        0,0,2914,2916,5,5,0,0,2915,2914,1,0,0,0,2916,2919,1,0,0,0,2917,2915,
        1,0,0,0,2917,2918,1,0,0,0,2918,2920,1,0,0,0,2919,2917,1,0,0,0,2920,
        2924,3,32,16,0,2921,2923,5,5,0,0,2922,2921,1,0,0,0,2923,2926,1,0,
        0,0,2924,2922,1,0,0,0,2924,2925,1,0,0,0,2925,2928,1,0,0,0,2926,2924,
        1,0,0,0,2927,2910,1,0,0,0,2927,2928,1,0,0,0,2928,2936,1,0,0,0,2929,
        2931,5,5,0,0,2930,2929,1,0,0,0,2931,2934,1,0,0,0,2932,2930,1,0,0,
        0,2932,2933,1,0,0,0,2933,2935,1,0,0,0,2934,2932,1,0,0,0,2935,2937,
        3,26,13,0,2936,2932,1,0,0,0,2936,2937,1,0,0,0,2937,245,1,0,0,0,2938,
        2939,7,10,0,0,2939,247,1,0,0,0,2940,2957,5,86,0,0,2941,2945,5,47,
        0,0,2942,2944,5,5,0,0,2943,2942,1,0,0,0,2944,2947,1,0,0,0,2945,2943,
        1,0,0,0,2945,2946,1,0,0,0,2946,2948,1,0,0,0,2947,2945,1,0,0,0,2948,
        2952,3,98,49,0,2949,2951,5,5,0,0,2950,2949,1,0,0,0,2951,2954,1,0,
        0,0,2952,2950,1,0,0,0,2952,2953,1,0,0,0,2953,2955,1,0,0,0,2954,2952,
        1,0,0,0,2955,2956,5,48,0,0,2956,2958,1,0,0,0,2957,2941,1,0,0,0,2957,
        2958,1,0,0,0,2958,2961,1,0,0,0,2959,2960,5,41,0,0,2960,2962,3,344,
        172,0,2961,2959,1,0,0,0,2961,2962,1,0,0,0,2962,2965,1,0,0,0,2963,
        2965,5,62,0,0,2964,2940,1,0,0,0,2964,2963,1,0,0,0,2965,249,1,0,0,
        0,2966,2970,5,89,0,0,2967,2969,5,5,0,0,2968,2967,1,0,0,0,2969,2972,
        1,0,0,0,2970,2968,1,0,0,0,2970,2971,1,0,0,0,2971,2973,1,0,0,0,2972,
        2970,1,0,0,0,2973,2977,5,9,0,0,2974,2976,5,5,0,0,2975,2974,1,0,0,
        0,2976,2979,1,0,0,0,2977,2975,1,0,0,0,2977,2978,1,0,0,0,2978,2980,
        1,0,0,0,2979,2977,1,0,0,0,2980,2984,3,152,76,0,2981,2983,5,5,0,0,
        2982,2981,1,0,0,0,2983,2986,1,0,0,0,2984,2982,1,0,0,0,2984,2985,
        1,0,0,0,2985,2987,1,0,0,0,2986,2984,1,0,0,0,2987,2991,5,10,0,0,2988,
        2990,5,5,0,0,2989,2988,1,0,0,0,2990,2993,1,0,0,0,2991,2989,1,0,0,
        0,2991,2992,1,0,0,0,2992,3025,1,0,0,0,2993,2991,1,0,0,0,2994,3026,
        3,134,67,0,2995,2997,3,134,67,0,2996,2995,1,0,0,0,2996,2997,1,0,
        0,0,2997,3001,1,0,0,0,2998,3000,5,5,0,0,2999,2998,1,0,0,0,3000,3003,
        1,0,0,0,3001,2999,1,0,0,0,3001,3002,1,0,0,0,3002,3005,1,0,0,0,3003,
        3001,1,0,0,0,3004,3006,5,27,0,0,3005,3004,1,0,0,0,3005,3006,1,0,
        0,0,3006,3010,1,0,0,0,3007,3009,5,5,0,0,3008,3007,1,0,0,0,3009,3012,
        1,0,0,0,3010,3008,1,0,0,0,3010,3011,1,0,0,0,3011,3013,1,0,0,0,3012,
        3010,1,0,0,0,3013,3017,5,90,0,0,3014,3016,5,5,0,0,3015,3014,1,0,
        0,0,3016,3019,1,0,0,0,3017,3015,1,0,0,0,3017,3018,1,0,0,0,3018,3022,
        1,0,0,0,3019,3017,1,0,0,0,3020,3023,3,134,67,0,3021,3023,5,27,0,
        0,3022,3020,1,0,0,0,3022,3021,1,0,0,0,3023,3026,1,0,0,0,3024,3026,
        5,27,0,0,3025,2994,1,0,0,0,3025,2996,1,0,0,0,3025,3024,1,0,0,0,3026,
        251,1,0,0,0,3027,3061,5,9,0,0,3028,3030,3,334,167,0,3029,3028,1,
        0,0,0,3030,3033,1,0,0,0,3031,3029,1,0,0,0,3031,3032,1,0,0,0,3032,
        3037,1,0,0,0,3033,3031,1,0,0,0,3034,3036,5,5,0,0,3035,3034,1,0,0,
        0,3036,3039,1,0,0,0,3037,3035,1,0,0,0,3037,3038,1,0,0,0,3038,3040,
        1,0,0,0,3039,3037,1,0,0,0,3040,3044,5,78,0,0,3041,3043,5,5,0,0,3042,
        3041,1,0,0,0,3043,3046,1,0,0,0,3044,3042,1,0,0,0,3044,3045,1,0,0,
        0,3045,3047,1,0,0,0,3046,3044,1,0,0,0,3047,3051,3,66,33,0,3048,3050,
        5,5,0,0,3049,3048,1,0,0,0,3050,3053,1,0,0,0,3051,3049,1,0,0,0,3051,
        3052,1,0,0,0,3052,3054,1,0,0,0,3053,3051,1,0,0,0,3054,3058,5,28,
        0,0,3055,3057,5,5,0,0,3056,3055,1,0,0,0,3057,3060,1,0,0,0,3058,3056,
        1,0,0,0,3058,3059,1,0,0,0,3059,3062,1,0,0,0,3060,3058,1,0,0,0,3061,
        3031,1,0,0,0,3061,3062,1,0,0,0,3062,3063,1,0,0,0,3063,3064,3,152,
        76,0,3064,3065,5,10,0,0,3065,253,1,0,0,0,3066,3070,5,91,0,0,3067,
        3069,5,5,0,0,3068,3067,1,0,0,0,3069,3072,1,0,0,0,3070,3068,1,0,0,
        0,3070,3071,1,0,0,0,3071,3074,1,0,0,0,3072,3070,1,0,0,0,3073,3075,
        3,252,126,0,3074,3073,1,0,0,0,3074,3075,1,0,0,0,3075,3079,1,0,0,
        0,3076,3078,5,5,0,0,3077,3076,1,0,0,0,3078,3081,1,0,0,0,3079,3077,
        1,0,0,0,3079,3080,1,0,0,0,3080,3082,1,0,0,0,3081,3079,1,0,0,0,3082,
        3086,5,13,0,0,3083,3085,5,5,0,0,3084,3083,1,0,0,0,3085,3088,1,0,
        0,0,3086,3084,1,0,0,0,3086,3087,1,0,0,0,3087,3098,1,0,0,0,3088,3086,
        1,0,0,0,3089,3093,3,256,128,0,3090,3092,5,5,0,0,3091,3090,1,0,0,
        0,3092,3095,1,0,0,0,3093,3091,1,0,0,0,3093,3094,1,0,0,0,3094,3097,
        1,0,0,0,3095,3093,1,0,0,0,3096,3089,1,0,0,0,3097,3100,1,0,0,0,3098,
        3096,1,0,0,0,3098,3099,1,0,0,0,3099,3104,1,0,0,0,3100,3098,1,0,0,
        0,3101,3103,5,5,0,0,3102,3101,1,0,0,0,3103,3106,1,0,0,0,3104,3102,
        1,0,0,0,3104,3105,1,0,0,0,3105,3107,1,0,0,0,3106,3104,1,0,0,0,3107,
        3108,5,14,0,0,3108,255,1,0,0,0,3109,3126,3,258,129,0,3110,3112,5,
        5,0,0,3111,3110,1,0,0,0,3112,3115,1,0,0,0,3113,3111,1,0,0,0,3113,
        3114,1,0,0,0,3114,3116,1,0,0,0,3115,3113,1,0,0,0,3116,3120,5,8,0,
        0,3117,3119,5,5,0,0,3118,3117,1,0,0,0,3119,3122,1,0,0,0,3120,3118,
        1,0,0,0,3120,3121,1,0,0,0,3121,3123,1,0,0,0,3122,3120,1,0,0,0,3123,
        3125,3,258,129,0,3124,3113,1,0,0,0,3125,3128,1,0,0,0,3126,3124,1,
        0,0,0,3126,3127,1,0,0,0,3127,3136,1,0,0,0,3128,3126,1,0,0,0,3129,
        3131,5,5,0,0,3130,3129,1,0,0,0,3131,3134,1,0,0,0,3132,3130,1,0,0,
        0,3132,3133,1,0,0,0,3133,3135,1,0,0,0,3134,3132,1,0,0,0,3135,3137,
        5,8,0,0,3136,3132,1,0,0,0,3136,3137,1,0,0,0,3137,3141,1,0,0,0,3138,
        3140,5,5,0,0,3139,3138,1,0,0,0,3140,3143,1,0,0,0,3141,3139,1,0,0,
        0,3141,3142,1,0,0,0,3142,3144,1,0,0,0,3143,3141,1,0,0,0,3144,3148,
        5,34,0,0,3145,3147,5,5,0,0,3146,3145,1,0,0,0,3147,3150,1,0,0,0,3148,
        3146,1,0,0,0,3148,3149,1,0,0,0,3149,3151,1,0,0,0,3150,3148,1,0,0,
        0,3151,3153,3,134,67,0,3152,3154,3,148,74,0,3153,3152,1,0,0,0,3153,
        3154,1,0,0,0,3154,3174,1,0,0,0,3155,3159,5,90,0,0,3156,3158,5,5,
        0,0,3157,3156,1,0,0,0,3158,3161,1,0,0,0,3159,3157,1,0,0,0,3159,3160,
        1,0,0,0,3160,3162,1,0,0,0,3161,3159,1,0,0,0,3162,3166,5,34,0,0,3163,
        3165,5,5,0,0,3164,3163,1,0,0,0,3165,3168,1,0,0,0,3166,3164,1,0,0,
        0,3166,3167,1,0,0,0,3167,3169,1,0,0,0,3168,3166,1,0,0,0,3169,3171,
        3,134,67,0,3170,3172,3,148,74,0,3171,3170,1,0,0,0,3171,3172,1,0,
        0,0,3172,3174,1,0,0,0,3173,3109,1,0,0,0,3173,3155,1,0,0,0,3174,257,
        1,0,0,0,3175,3179,3,152,76,0,3176,3179,3,260,130,0,3177,3179,3,262,
        131,0,3178,3175,1,0,0,0,3178,3176,1,0,0,0,3178,3177,1,0,0,0,3179,
        259,1,0,0,0,3180,3184,3,280,140,0,3181,3183,5,5,0,0,3182,3181,1,
        0,0,0,3183,3186,1,0,0,0,3184,3182,1,0,0,0,3184,3185,1,0,0,0,3185,
        3187,1,0,0,0,3186,3184,1,0,0,0,3187,3188,3,152,76,0,3188,261,1,0,
        0,0,3189,3193,3,282,141,0,3190,3192,5,5,0,0,3191,3190,1,0,0,0,3192,
        3195,1,0,0,0,3193,3191,1,0,0,0,3193,3194,1,0,0,0,3194,3196,1,0,0,
        0,3195,3193,1,0,0,0,3196,3197,3,98,49,0,3197,263,1,0,0,0,3198,3202,
        5,92,0,0,3199,3201,5,5,0,0,3200,3199,1,0,0,0,3201,3204,1,0,0,0,3202,
        3200,1,0,0,0,3202,3203,1,0,0,0,3203,3205,1,0,0,0,3204,3202,1,0,0,
        0,3205,3233,3,136,68,0,3206,3208,5,5,0,0,3207,3206,1,0,0,0,3208,
        3211,1,0,0,0,3209,3207,1,0,0,0,3209,3210,1,0,0,0,3210,3212,1,0,0,
        0,3211,3209,1,0,0,0,3212,3214,3,266,133,0,3213,3209,1,0,0,0,3214,
        3215,1,0,0,0,3215,3213,1,0,0,0,3215,3216,1,0,0,0,3216,3224,1,0,0,
        0,3217,3219,5,5,0,0,3218,3217,1,0,0,0,3219,3222,1,0,0,0,3220,3218,
        1,0,0,0,3220,3221,1,0,0,0,3221,3223,1,0,0,0,3222,3220,1,0,0,0,3223,
        3225,3,268,134,0,3224,3220,1,0,0,0,3224,3225,1,0,0,0,3225,3234,1,
        0,0,0,3226,3228,5,5,0,0,3227,3226,1,0,0,0,3228,3231,1,0,0,0,3229,
        3227,1,0,0,0,3229,3230,1,0,0,0,3230,3232,1,0,0,0,3231,3229,1,0,0,
        0,3232,3234,3,268,134,0,3233,3213,1,0,0,0,3233,3229,1,0,0,0,3234,
        265,1,0,0,0,3235,3239,5,93,0,0,3236,3238,5,5,0,0,3237,3236,1,0,0,
        0,3238,3241,1,0,0,0,3239,3237,1,0,0,0,3239,3240,1,0,0,0,3240,3242,
        1,0,0,0,3241,3239,1,0,0,0,3242,3246,5,9,0,0,3243,3245,3,334,167,
        0,3244,3243,1,0,0,0,3245,3248,1,0,0,0,3246,3244,1,0,0,0,3246,3247,
        1,0,0,0,3247,3249,1,0,0,0,3248,3246,1,0,0,0,3249,3250,3,344,172,
        0,3250,3251,5,26,0,0,3251,3259,3,98,49,0,3252,3254,5,5,0,0,3253,
        3252,1,0,0,0,3254,3257,1,0,0,0,3255,3253,1,0,0,0,3255,3256,1,0,0,
        0,3256,3258,1,0,0,0,3257,3255,1,0,0,0,3258,3260,5,8,0,0,3259,3255,
        1,0,0,0,3259,3260,1,0,0,0,3260,3261,1,0,0,0,3261,3265,5,10,0,0,3262,
        3264,5,5,0,0,3263,3262,1,0,0,0,3264,3267,1,0,0,0,3265,3263,1,0,0,
        0,3265,3266,1,0,0,0,3266,3268,1,0,0,0,3267,3265,1,0,0,0,3268,3269,
        3,136,68,0,3269,267,1,0,0,0,3270,3274,5,94,0,0,3271,3273,5,5,0,0,
        3272,3271,1,0,0,0,3273,3276,1,0,0,0,3274,3272,1,0,0,0,3274,3275,
        1,0,0,0,3275,3277,1,0,0,0,3276,3274,1,0,0,0,3277,3278,3,136,68,0,
        3278,269,1,0,0,0,3279,3283,5,98,0,0,3280,3282,5,5,0,0,3281,3280,
        1,0,0,0,3282,3285,1,0,0,0,3283,3281,1,0,0,0,3283,3284,1,0,0,0,3284,
        3286,1,0,0,0,3285,3283,1,0,0,0,3286,3296,3,152,76,0,3287,3289,7,
        11,0,0,3288,3290,3,152,76,0,3289,3288,1,0,0,0,3289,3290,1,0,0,0,
        3290,3296,1,0,0,0,3291,3296,5,100,0,0,3292,3296,5,59,0,0,3293,3296,
        5,101,0,0,3294,3296,5,60,0,0,3295,3279,1,0,0,0,3295,3287,1,0,0,0,
        3295,3291,1,0,0,0,3295,3292,1,0,0,0,3295,3293,1,0,0,0,3295,3294,
        1,0,0,0,3296,271,1,0,0,0,3297,3299,3,122,61,0,3298,3297,1,0,0,0,
        3298,3299,1,0,0,0,3299,3300,1,0,0,0,3300,3304,5,38,0,0,3301,3303,
        5,5,0,0,3302,3301,1,0,0,0,3303,3306,1,0,0,0,3304,3302,1,0,0,0,3304,
        3305,1,0,0,0,3305,3309,1,0,0,0,3306,3304,1,0,0,0,3307,3310,3,344,
        172,0,3308,3310,5,74,0,0,3309,3307,1,0,0,0,3309,3308,1,0,0,0,3310,
        273,1,0,0,0,3311,3312,7,12,0,0,3312,275,1,0,0,0,3313,3314,7,13,0,
        0,3314,277,1,0,0,0,3315,3316,7,14,0,0,3316,279,1,0,0,0,3317,3318,
        7,15,0,0,3318,281,1,0,0,0,3319,3320,7,16,0,0,3320,283,1,0,0,0,3321,
        3322,7,17,0,0,3322,285,1,0,0,0,3323,3324,7,18,0,0,3324,287,1,0,0,
        0,3325,3326,7,19,0,0,3326,289,1,0,0,0,3327,3333,5,20,0,0,3328,3333,
        5,21,0,0,3329,3333,5,19,0,0,3330,3333,5,18,0,0,3331,3333,3,294,147,
        0,3332,3327,1,0,0,0,3332,3328,1,0,0,0,3332,3329,1,0,0,0,3332,3330,
        1,0,0,0,3332,3331,1,0,0,0,3333,291,1,0,0,0,3334,3339,5,20,0,0,3335,
        3339,5,21,0,0,3336,3337,5,25,0,0,3337,3339,3,294,147,0,3338,3334,
        1,0,0,0,3338,3335,1,0,0,0,3338,3336,1,0,0,0,3339,293,1,0,0,0,3340,
        3341,7,20,0,0,3341,295,1,0,0,0,3342,3344,5,5,0,0,3343,3342,1,0,0,
        0,3344,3347,1,0,0,0,3345,3343,1,0,0,0,3345,3346,1,0,0,0,3346,3348,
        1,0,0,0,3347,3345,1,0,0,0,3348,3358,5,7,0,0,3349,3351,5,5,0,0,3350,
        3349,1,0,0,0,3351,3354,1,0,0,0,3352,3350,1,0,0,0,3352,3353,1,0,0,
        0,3353,3355,1,0,0,0,3354,3352,1,0,0,0,3355,3358,3,298,149,0,3356,
        3358,5,38,0,0,3357,3345,1,0,0,0,3357,3352,1,0,0,0,3357,3356,1,0,
        0,0,3358,297,1,0,0,0,3359,3360,5,46,0,0,3360,3361,5,7,0,0,3361,299,
        1,0,0,0,3362,3365,3,334,167,0,3363,3365,3,304,152,0,3364,3362,1,
        0,0,0,3364,3363,1,0,0,0,3365,3366,1,0,0,0,3366,3364,1,0,0,0,3366,
        3367,1,0,0,0,3367,301,1,0,0,0,3368,3371,3,334,167,0,3369,3371,3,
        328,164,0,3370,3368,1,0,0,0,3370,3369,1,0,0,0,3371,3372,1,0,0,0,
        3372,3370,1,0,0,0,3372,3373,1,0,0,0,3373,303,1,0,0,0,3374,3383,3,
        310,155,0,3375,3383,3,312,156,0,3376,3383,3,314,157,0,3377,3383,
        3,322,161,0,3378,3383,3,324,162,0,3379,3383,3,326,163,0,3380,3383,
        3,328,164,0,3381,3383,3,332,166,0,3382,3374,1,0,0,0,3382,3375,1,
        0,0,0,3382,3376,1,0,0,0,3382,3377,1,0,0,0,3382,3378,1,0,0,0,3382,
        3379,1,0,0,0,3382,3380,1,0,0,0,3382,3381,1,0,0,0,3383,3387,1,0,0,
        0,3384,3386,5,5,0,0,3385,3384,1,0,0,0,3386,3389,1,0,0,0,3387,3385,
        1,0,0,0,3387,3388,1,0,0,0,3388,305,1,0,0,0,3389,3387,1,0,0,0,3390,
        3392,3,308,154,0,3391,3390,1,0,0,0,3392,3393,1,0,0,0,3393,3391,1,
        0,0,0,3393,3394,1,0,0,0,3394,307,1,0,0,0,3395,3404,3,334,167,0,3396,
        3400,5,124,0,0,3397,3399,5,5,0,0,3398,3397,1,0,0,0,3399,3402,1,0,
        0,0,3400,3398,1,0,0,0,3400,3401,1,0,0,0,3401,3404,1,0,0,0,3402,3400,
        1,0,0,0,3403,3395,1,0,0,0,3403,3396,1,0,0,0,3404,309,1,0,0,0,3405,
        3406,7,21,0,0,3406,311,1,0,0,0,3407,3408,7,22,0,0,3408,313,1,0,0,
        0,3409,3410,7,23,0,0,3410,315,1,0,0,0,3411,3412,7,24,0,0,3412,317,
        1,0,0,0,3413,3415,3,320,160,0,3414,3413,1,0,0,0,3415,3416,1,0,0,
        0,3416,3414,1,0,0,0,3416,3417,1,0,0,0,3417,319,1,0,0,0,3418,3422,
        3,330,165,0,3419,3421,5,5,0,0,3420,3419,1,0,0,0,3421,3424,1,0,0,
        0,3422,3420,1,0,0,0,3422,3423,1,0,0,0,3423,3434,1,0,0,0,3424,3422,
        1,0,0,0,3425,3429,3,316,158,0,3426,3428,5,5,0,0,3427,3426,1,0,0,
        0,3428,3431,1,0,0,0,3429,3427,1,0,0,0,3429,3430,1,0,0,0,3430,3434,
        1,0,0,0,3431,3429,1,0,0,0,3432,3434,3,334,167,0,3433,3418,1,0,0,
        0,3433,3425,1,0,0,0,3433,3432,1,0,0,0,3434,321,1,0,0,0,3435,3436,
        7,25,0,0,3436,323,1,0,0,0,3437,3438,5,129,0,0,3438,325,1,0,0,0,3439,
        3440,7,26,0,0,3440,327,1,0,0,0,3441,3442,7,27,0,0,3442,329,1,0,0,
        0,3443,3444,5,134,0,0,3444,331,1,0,0,0,3445,3446,7,28,0,0,3446,333,
        1,0,0,0,3447,3450,3,336,168,0,3448,3450,3,338,169,0,3449,3447,1,
        0,0,0,3449,3448,1,0,0,0,3450,3454,1,0,0,0,3451,3453,5,5,0,0,3452,
        3451,1,0,0,0,3453,3456,1,0,0,0,3454,3452,1,0,0,0,3454,3455,1,0,0,
        0,3455,335,1,0,0,0,3456,3454,1,0,0,0,3457,3461,3,340,170,0,3458,
        3460,5,5,0,0,3459,3458,1,0,0,0,3460,3463,1,0,0,0,3461,3459,1,0,0,
        0,3461,3462,1,0,0,0,3462,3467,1,0,0,0,3463,3461,1,0,0,0,3464,3467,
        5,41,0,0,3465,3467,5,43,0,0,3466,3457,1,0,0,0,3466,3464,1,0,0,0,
        3466,3465,1,0,0,0,3467,3468,1,0,0,0,3468,3469,3,342,171,0,3469,337,
        1,0,0,0,3470,3474,3,340,170,0,3471,3473,5,5,0,0,3472,3471,1,0,0,
        0,3473,3476,1,0,0,0,3474,3472,1,0,0,0,3474,3475,1,0,0,0,3475,3480,
        1,0,0,0,3476,3474,1,0,0,0,3477,3480,5,41,0,0,3478,3480,5,43,0,0,
        3479,3470,1,0,0,0,3479,3477,1,0,0,0,3479,3478,1,0,0,0,3480,3481,
        1,0,0,0,3481,3483,5,11,0,0,3482,3484,3,342,171,0,3483,3482,1,0,0,
        0,3484,3485,1,0,0,0,3485,3483,1,0,0,0,3485,3486,1,0,0,0,3486,3487,
        1,0,0,0,3487,3488,5,12,0,0,3488,339,1,0,0,0,3489,3490,7,0,0,0,3490,
        3494,7,29,0,0,3491,3493,5,5,0,0,3492,3491,1,0,0,0,3493,3496,1,0,
        0,0,3494,3492,1,0,0,0,3494,3495,1,0,0,0,3495,3497,1,0,0,0,3496,3494,
        1,0,0,0,3497,3498,5,26,0,0,3498,341,1,0,0,0,3499,3502,3,36,18,0,
        3500,3502,3,106,53,0,3501,3499,1,0,0,0,3501,3500,1,0,0,0,3502,343,
        1,0,0,0,3503,3504,7,30,0,0,3504,345,1,0,0,0,3505,3516,3,344,172,
        0,3506,3508,5,5,0,0,3507,3506,1,0,0,0,3508,3511,1,0,0,0,3509,3507,
        1,0,0,0,3509,3510,1,0,0,0,3510,3512,1,0,0,0,3511,3509,1,0,0,0,3512,
        3513,5,7,0,0,3513,3515,3,344,172,0,3514,3509,1,0,0,0,3515,3518,1,
        0,0,0,3516,3514,1,0,0,0,3516,3517,1,0,0,0,3517,347,1,0,0,0,3518,
        3516,1,0,0,0,542,349,354,360,368,374,379,385,395,404,411,418,425,
        430,435,441,443,448,456,459,466,469,475,482,486,491,498,508,511,
        518,521,524,529,536,540,545,549,554,561,565,570,574,579,586,590,
        593,599,602,610,617,626,633,640,646,652,656,658,663,669,672,677,
        685,692,699,703,709,716,722,733,737,743,751,757,764,769,776,785,
        792,799,805,811,815,820,826,831,838,845,849,855,862,869,875,881,
        888,895,902,906,913,919,925,931,935,940,947,951,956,963,967,972,
        976,982,989,996,1002,1008,1012,1014,1019,1025,1031,1038,1042,1045,
        1051,1055,1060,1067,1072,1077,1084,1091,1098,1102,1107,1111,1116,
        1120,1127,1131,1136,1142,1149,1156,1160,1166,1173,1180,1186,1192,
        1196,1201,1207,1213,1217,1222,1229,1234,1239,1244,1249,1253,1258,
        1265,1270,1272,1277,1281,1286,1290,1295,1299,1302,1305,1310,1314,
        1317,1319,1325,1331,1337,1344,1351,1358,1362,1367,1371,1374,1380,
        1387,1394,1398,1403,1410,1417,1421,1426,1431,1437,1444,1451,1457,
        1463,1467,1469,1474,1480,1486,1493,1497,1503,1510,1514,1520,1527,
        1533,1539,1546,1553,1557,1562,1566,1569,1575,1582,1589,1593,1598,
        1602,1608,1617,1621,1626,1633,1637,1642,1651,1658,1664,1670,1674,
        1680,1683,1689,1693,1698,1702,1705,1712,1716,1720,1725,1731,1739,
        1746,1752,1759,1763,1766,1770,1775,1781,1785,1791,1798,1801,1807,
        1814,1823,1828,1833,1840,1845,1849,1855,1859,1864,1873,1880,1886,
        1891,1897,1902,1907,1913,1917,1922,1929,1933,1937,1945,1948,1951,
        1955,1957,1964,1971,1976,1982,1989,1997,2003,2010,2015,2023,2027,
        2033,2042,2047,2053,2057,2062,2069,2082,2087,2096,2102,2110,2117,
        2123,2130,2137,2143,2151,2158,2166,2173,2180,2188,2197,2202,2204,
        2211,2218,2225,2236,2243,2251,2257,2265,2272,2280,2287,2294,2301,
        2308,2314,2325,2328,2334,2342,2349,2355,2362,2369,2375,2382,2390,
        2396,2403,2410,2416,2422,2426,2431,2440,2446,2449,2452,2456,2461,
        2465,2470,2479,2486,2493,2499,2505,2509,2514,2523,2530,2537,2543,
        2549,2553,2558,2561,2566,2571,2578,2585,2588,2591,2596,2615,2621,
        2628,2637,2644,2651,2657,2663,2667,2672,2675,2683,2688,2690,2699,
        2701,2712,2719,2730,2737,2746,2750,2755,2762,2765,2771,2780,2787,
        2793,2799,2803,2810,2817,2821,2823,2826,2831,2838,2845,2850,2855,
        2862,2869,2873,2878,2882,2887,2891,2895,2898,2903,2910,2917,2924,
        2927,2932,2936,2945,2952,2957,2961,2964,2970,2977,2984,2991,2996,
        3001,3005,3010,3017,3022,3025,3031,3037,3044,3051,3058,3061,3070,
        3074,3079,3086,3093,3098,3104,3113,3120,3126,3132,3136,3141,3148,
        3153,3159,3166,3171,3173,3178,3184,3193,3202,3209,3215,3220,3224,
        3229,3233,3239,3246,3255,3259,3265,3274,3283,3289,3295,3298,3304,
        3309,3332,3338,3345,3352,3357,3364,3366,3370,3372,3382,3387,3393,
        3400,3403,3416,3422,3429,3433,3449,3454,3461,3466,3474,3479,3485,
        3494,3501,3509,3516
    ]

class KotlinParser ( Parser ):

    grammarFileName = "KotlinParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'...'", "'.'", "','", "'('", 
                     "')'", "'['", "']'", "'{'", "'}'", "'*'", "'%'", "'/'", 
                     "'+'", "'-'", "'++'", "'--'", "'&&'", "'||'", "<INVALID>", 
                     "'!'", "':'", "';'", "'='", "'+='", "'-='", "'*='", 
                     "'/='", "'%='", "'->'", "'=>'", "'..'", "'..<'", "'::'", 
                     "';;'", "'#'", "'@'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "'<'", "'>'", "'<='", "'>='", "'!='", 
                     "'!=='", "'as?'", "'=='", "'==='", "'''", "'&'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'file'", "'field'", "'property'", "'get'", "'set'", 
                     "'receiver'", "'param'", "'setparam'", "'delegate'", 
                     "'package'", "'import'", "'class'", "'interface'", 
                     "'fun'", "'object'", "'val'", "'var'", "'typealias'", 
                     "'constructor'", "'by'", "'companion'", "'init'", "'this'", 
                     "'super'", "'typeof'", "'where'", "'if'", "'else'", 
                     "'when'", "'try'", "'catch'", "'finally'", "'for'", 
                     "'do'", "'while'", "'throw'", "'return'", "'continue'", 
                     "'break'", "'as'", "'is'", "'in'", "<INVALID>", "<INVALID>", 
                     "'out'", "'dynamic'", "'public'", "'private'", "'protected'", 
                     "'internal'", "'enum'", "'sealed'", "'annotation'", 
                     "'data'", "'inner'", "'value'", "'tailrec'", "'operator'", 
                     "'inline'", "'infix'", "'external'", "'suspend'", "'override'", 
                     "'abstract'", "'final'", "'open'", "'const'", "'lateinit'", 
                     "'vararg'", "'noinline'", "'crossinline'", "'reified'", 
                     "'expect'", "'actual'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'null'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'\"\"\"'" ]

    symbolicNames = [ "<INVALID>", "ShebangLine", "DelimitedComment", "LineComment", 
                      "WS", "NL", "RESERVED", "DOT", "COMMA", "LPAREN", 
                      "RPAREN", "LSQUARE", "RSQUARE", "LCURL", "RCURL", 
                      "MULT", "MOD", "DIV", "ADD", "SUB", "INCR", "DECR", 
                      "CONJ", "DISJ", "EXCL_WS", "EXCL_NO_WS", "COLON", 
                      "SEMICOLON", "ASSIGNMENT", "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", 
                      "MULT_ASSIGNMENT", "DIV_ASSIGNMENT", "MOD_ASSIGNMENT", 
                      "ARROW", "DOUBLE_ARROW", "RANGE", "RANGE_UNTIL", "COLONCOLON", 
                      "DOUBLE_SEMICOLON", "HASH", "AT_NO_WS", "AT_POST_WS", 
                      "AT_PRE_WS", "AT_BOTH_WS", "QUEST_WS", "QUEST_NO_WS", 
                      "LANGLE", "RANGLE", "LE", "GE", "EXCL_EQ", "EXCL_EQEQ", 
                      "AS_SAFE", "EQEQ", "EQEQEQ", "SINGLE_QUOTE", "AMP", 
                      "RETURN_AT", "CONTINUE_AT", "BREAK_AT", "THIS_AT", 
                      "SUPER_AT", "FILE", "FIELD", "PROPERTY", "GET", "SET", 
                      "RECEIVER", "PARAM", "SETPARAM", "DELEGATE", "PACKAGE", 
                      "IMPORT", "CLASS", "INTERFACE", "FUN", "OBJECT", "VAL", 
                      "VAR", "TYPE_ALIAS", "CONSTRUCTOR", "BY", "COMPANION", 
                      "INIT", "THIS", "SUPER", "TYPEOF", "WHERE", "IF", 
                      "ELSE", "WHEN", "TRY", "CATCH", "FINALLY", "FOR", 
                      "DO", "WHILE", "THROW", "RETURN", "CONTINUE", "BREAK", 
                      "AS", "IS", "IN", "NOT_IS", "NOT_IN", "OUT", "DYNAMIC", 
                      "PUBLIC", "PRIVATE", "PROTECTED", "INTERNAL", "ENUM", 
                      "SEALED", "ANNOTATION", "DATA", "INNER", "VALUE", 
                      "TAILREC", "OPERATOR", "INLINE", "INFIX", "EXTERNAL", 
                      "SUSPEND", "OVERRIDE", "ABSTRACT", "FINAL", "OPEN", 
                      "CONST", "LATEINIT", "VARARG", "NOINLINE", "CROSSINLINE", 
                      "REIFIED", "EXPECT", "ACTUAL", "RealLiteral", "FloatLiteral", 
                      "DoubleLiteral", "IntegerLiteral", "HexLiteral", "BinLiteral", 
                      "UnsignedLiteral", "LongLiteral", "BooleanLiteral", 
                      "NullLiteral", "CharacterLiteral", "Identifier", "IdentifierOrSoftKey", 
                      "FieldIdentifier", "QUOTE_OPEN", "TRIPLE_QUOTE_OPEN", 
                      "UNICODE_CLASS_LL", "UNICODE_CLASS_LM", "UNICODE_CLASS_LO", 
                      "UNICODE_CLASS_LT", "UNICODE_CLASS_LU", "UNICODE_CLASS_ND", 
                      "UNICODE_CLASS_NL", "QUOTE_CLOSE", "LineStrRef", "LineStrText", 
                      "LineStrEscapedChar", "LineStrExprStart", "TRIPLE_QUOTE_CLOSE", 
                      "MultiLineStringQuote", "MultiLineStrRef", "MultiLineStrText", 
                      "MultiLineStrExprStart", "Inside_Comment", "Inside_WS", 
                      "Inside_NL", "ErrorCharacter" ]

    RULE_kotlinFile = 0
    RULE_script = 1
    RULE_shebangLine = 2
    RULE_fileAnnotation = 3
    RULE_packageHeader = 4
    RULE_importList = 5
    RULE_importHeader = 6
    RULE_importAlias = 7
    RULE_topLevelObject = 8
    RULE_typeAlias = 9
    RULE_declaration = 10
    RULE_classDeclaration = 11
    RULE_primaryConstructor = 12
    RULE_classBody = 13
    RULE_classParameters = 14
    RULE_classParameter = 15
    RULE_delegationSpecifiers = 16
    RULE_delegationSpecifier = 17
    RULE_constructorInvocation = 18
    RULE_annotatedDelegationSpecifier = 19
    RULE_explicitDelegation = 20
    RULE_typeParameters = 21
    RULE_typeParameter = 22
    RULE_typeConstraints = 23
    RULE_typeConstraint = 24
    RULE_classMemberDeclarations = 25
    RULE_classMemberDeclaration = 26
    RULE_anonymousInitializer = 27
    RULE_companionObject = 28
    RULE_functionValueParameters = 29
    RULE_functionValueParameter = 30
    RULE_functionDeclaration = 31
    RULE_functionBody = 32
    RULE_variableDeclaration = 33
    RULE_multiVariableDeclaration = 34
    RULE_propertyDeclaration = 35
    RULE_propertyDelegate = 36
    RULE_getter = 37
    RULE_setter = 38
    RULE_parametersWithOptionalType = 39
    RULE_functionValueParameterWithOptionalType = 40
    RULE_parameterWithOptionalType = 41
    RULE_parameter = 42
    RULE_objectDeclaration = 43
    RULE_secondaryConstructor = 44
    RULE_constructorDelegationCall = 45
    RULE_enumClassBody = 46
    RULE_enumEntries = 47
    RULE_enumEntry = 48
    RULE_type = 49
    RULE_typeReference = 50
    RULE_nullableType = 51
    RULE_quest = 52
    RULE_userType = 53
    RULE_simpleUserType = 54
    RULE_typeProjection = 55
    RULE_typeProjectionModifiers = 56
    RULE_typeProjectionModifier = 57
    RULE_functionType = 58
    RULE_functionTypeParameters = 59
    RULE_parenthesizedType = 60
    RULE_receiverType = 61
    RULE_parenthesizedUserType = 62
    RULE_definitelyNonNullableType = 63
    RULE_statements = 64
    RULE_statement = 65
    RULE_label = 66
    RULE_controlStructureBody = 67
    RULE_block = 68
    RULE_loopStatement = 69
    RULE_forStatement = 70
    RULE_whileStatement = 71
    RULE_doWhileStatement = 72
    RULE_assignment = 73
    RULE_semi = 74
    RULE_semis = 75
    RULE_expression = 76
    RULE_disjunction = 77
    RULE_conjunction = 78
    RULE_equality = 79
    RULE_comparison = 80
    RULE_genericCallLikeComparison = 81
    RULE_infixOperation = 82
    RULE_elvisExpression = 83
    RULE_elvis = 84
    RULE_infixFunctionCall = 85
    RULE_rangeExpression = 86
    RULE_additiveExpression = 87
    RULE_multiplicativeExpression = 88
    RULE_asExpression = 89
    RULE_prefixUnaryExpression = 90
    RULE_unaryPrefix = 91
    RULE_postfixUnaryExpression = 92
    RULE_postfixUnarySuffix = 93
    RULE_directlyAssignableExpression = 94
    RULE_parenthesizedDirectlyAssignableExpression = 95
    RULE_assignableExpression = 96
    RULE_parenthesizedAssignableExpression = 97
    RULE_assignableSuffix = 98
    RULE_indexingSuffix = 99
    RULE_navigationSuffix = 100
    RULE_callSuffix = 101
    RULE_annotatedLambda = 102
    RULE_typeArguments = 103
    RULE_valueArguments = 104
    RULE_valueArgument = 105
    RULE_primaryExpression = 106
    RULE_parenthesizedExpression = 107
    RULE_collectionLiteral = 108
    RULE_literalConstant = 109
    RULE_stringLiteral = 110
    RULE_lineStringLiteral = 111
    RULE_multiLineStringLiteral = 112
    RULE_lineStringContent = 113
    RULE_lineStringExpression = 114
    RULE_multiLineStringContent = 115
    RULE_multiLineStringExpression = 116
    RULE_lambdaLiteral = 117
    RULE_lambdaParameters = 118
    RULE_lambdaParameter = 119
    RULE_anonymousFunction = 120
    RULE_functionLiteral = 121
    RULE_objectLiteral = 122
    RULE_thisExpression = 123
    RULE_superExpression = 124
    RULE_ifExpression = 125
    RULE_whenSubject = 126
    RULE_whenExpression = 127
    RULE_whenEntry = 128
    RULE_whenCondition = 129
    RULE_rangeTest = 130
    RULE_typeTest = 131
    RULE_tryExpression = 132
    RULE_catchBlock = 133
    RULE_finallyBlock = 134
    RULE_jumpExpression = 135
    RULE_callableReference = 136
    RULE_assignmentAndOperator = 137
    RULE_equalityOperator = 138
    RULE_comparisonOperator = 139
    RULE_inOperator = 140
    RULE_isOperator = 141
    RULE_additiveOperator = 142
    RULE_multiplicativeOperator = 143
    RULE_asOperator = 144
    RULE_prefixUnaryOperator = 145
    RULE_postfixUnaryOperator = 146
    RULE_excl = 147
    RULE_memberAccessOperator = 148
    RULE_safeNav = 149
    RULE_modifiers = 150
    RULE_parameterModifiers = 151
    RULE_modifier = 152
    RULE_typeModifiers = 153
    RULE_typeModifier = 154
    RULE_classModifier = 155
    RULE_memberModifier = 156
    RULE_visibilityModifier = 157
    RULE_varianceModifier = 158
    RULE_typeParameterModifiers = 159
    RULE_typeParameterModifier = 160
    RULE_functionModifier = 161
    RULE_propertyModifier = 162
    RULE_inheritanceModifier = 163
    RULE_parameterModifier = 164
    RULE_reificationModifier = 165
    RULE_platformModifier = 166
    RULE_annotation = 167
    RULE_singleAnnotation = 168
    RULE_multiAnnotation = 169
    RULE_annotationUseSiteTarget = 170
    RULE_unescapedAnnotation = 171
    RULE_simpleIdentifier = 172
    RULE_identifier = 173

    ruleNames =  [ "kotlinFile", "script", "shebangLine", "fileAnnotation", 
                   "packageHeader", "importList", "importHeader", "importAlias", 
                   "topLevelObject", "typeAlias", "declaration", "classDeclaration", 
                   "primaryConstructor", "classBody", "classParameters", 
                   "classParameter", "delegationSpecifiers", "delegationSpecifier", 
                   "constructorInvocation", "annotatedDelegationSpecifier", 
                   "explicitDelegation", "typeParameters", "typeParameter", 
                   "typeConstraints", "typeConstraint", "classMemberDeclarations", 
                   "classMemberDeclaration", "anonymousInitializer", "companionObject", 
                   "functionValueParameters", "functionValueParameter", 
                   "functionDeclaration", "functionBody", "variableDeclaration", 
                   "multiVariableDeclaration", "propertyDeclaration", "propertyDelegate", 
                   "getter", "setter", "parametersWithOptionalType", "functionValueParameterWithOptionalType", 
                   "parameterWithOptionalType", "parameter", "objectDeclaration", 
                   "secondaryConstructor", "constructorDelegationCall", 
                   "enumClassBody", "enumEntries", "enumEntry", "type", 
                   "typeReference", "nullableType", "quest", "userType", 
                   "simpleUserType", "typeProjection", "typeProjectionModifiers", 
                   "typeProjectionModifier", "functionType", "functionTypeParameters", 
                   "parenthesizedType", "receiverType", "parenthesizedUserType", 
                   "definitelyNonNullableType", "statements", "statement", 
                   "label", "controlStructureBody", "block", "loopStatement", 
                   "forStatement", "whileStatement", "doWhileStatement", 
                   "assignment", "semi", "semis", "expression", "disjunction", 
                   "conjunction", "equality", "comparison", "genericCallLikeComparison", 
                   "infixOperation", "elvisExpression", "elvis", "infixFunctionCall", 
                   "rangeExpression", "additiveExpression", "multiplicativeExpression", 
                   "asExpression", "prefixUnaryExpression", "unaryPrefix", 
                   "postfixUnaryExpression", "postfixUnarySuffix", "directlyAssignableExpression", 
                   "parenthesizedDirectlyAssignableExpression", "assignableExpression", 
                   "parenthesizedAssignableExpression", "assignableSuffix", 
                   "indexingSuffix", "navigationSuffix", "callSuffix", "annotatedLambda", 
                   "typeArguments", "valueArguments", "valueArgument", "primaryExpression", 
                   "parenthesizedExpression", "collectionLiteral", "literalConstant", 
                   "stringLiteral", "lineStringLiteral", "multiLineStringLiteral", 
                   "lineStringContent", "lineStringExpression", "multiLineStringContent", 
                   "multiLineStringExpression", "lambdaLiteral", "lambdaParameters", 
                   "lambdaParameter", "anonymousFunction", "functionLiteral", 
                   "objectLiteral", "thisExpression", "superExpression", 
                   "ifExpression", "whenSubject", "whenExpression", "whenEntry", 
                   "whenCondition", "rangeTest", "typeTest", "tryExpression", 
                   "catchBlock", "finallyBlock", "jumpExpression", "callableReference", 
                   "assignmentAndOperator", "equalityOperator", "comparisonOperator", 
                   "inOperator", "isOperator", "additiveOperator", "multiplicativeOperator", 
                   "asOperator", "prefixUnaryOperator", "postfixUnaryOperator", 
                   "excl", "memberAccessOperator", "safeNav", "modifiers", 
                   "parameterModifiers", "modifier", "typeModifiers", "typeModifier", 
                   "classModifier", "memberModifier", "visibilityModifier", 
                   "varianceModifier", "typeParameterModifiers", "typeParameterModifier", 
                   "functionModifier", "propertyModifier", "inheritanceModifier", 
                   "parameterModifier", "reificationModifier", "platformModifier", 
                   "annotation", "singleAnnotation", "multiAnnotation", 
                   "annotationUseSiteTarget", "unescapedAnnotation", "simpleIdentifier", 
                   "identifier" ]

    EOF = Token.EOF
    ShebangLine=1
    DelimitedComment=2
    LineComment=3
    WS=4
    NL=5
    RESERVED=6
    DOT=7
    COMMA=8
    LPAREN=9
    RPAREN=10
    LSQUARE=11
    RSQUARE=12
    LCURL=13
    RCURL=14
    MULT=15
    MOD=16
    DIV=17
    ADD=18
    SUB=19
    INCR=20
    DECR=21
    CONJ=22
    DISJ=23
    EXCL_WS=24
    EXCL_NO_WS=25
    COLON=26
    SEMICOLON=27
    ASSIGNMENT=28
    ADD_ASSIGNMENT=29
    SUB_ASSIGNMENT=30
    MULT_ASSIGNMENT=31
    DIV_ASSIGNMENT=32
    MOD_ASSIGNMENT=33
    ARROW=34
    DOUBLE_ARROW=35
    RANGE=36
    RANGE_UNTIL=37
    COLONCOLON=38
    DOUBLE_SEMICOLON=39
    HASH=40
    AT_NO_WS=41
    AT_POST_WS=42
    AT_PRE_WS=43
    AT_BOTH_WS=44
    QUEST_WS=45
    QUEST_NO_WS=46
    LANGLE=47
    RANGLE=48
    LE=49
    GE=50
    EXCL_EQ=51
    EXCL_EQEQ=52
    AS_SAFE=53
    EQEQ=54
    EQEQEQ=55
    SINGLE_QUOTE=56
    AMP=57
    RETURN_AT=58
    CONTINUE_AT=59
    BREAK_AT=60
    THIS_AT=61
    SUPER_AT=62
    FILE=63
    FIELD=64
    PROPERTY=65
    GET=66
    SET=67
    RECEIVER=68
    PARAM=69
    SETPARAM=70
    DELEGATE=71
    PACKAGE=72
    IMPORT=73
    CLASS=74
    INTERFACE=75
    FUN=76
    OBJECT=77
    VAL=78
    VAR=79
    TYPE_ALIAS=80
    CONSTRUCTOR=81
    BY=82
    COMPANION=83
    INIT=84
    THIS=85
    SUPER=86
    TYPEOF=87
    WHERE=88
    IF=89
    ELSE=90
    WHEN=91
    TRY=92
    CATCH=93
    FINALLY=94
    FOR=95
    DO=96
    WHILE=97
    THROW=98
    RETURN=99
    CONTINUE=100
    BREAK=101
    AS=102
    IS=103
    IN=104
    NOT_IS=105
    NOT_IN=106
    OUT=107
    DYNAMIC=108
    PUBLIC=109
    PRIVATE=110
    PROTECTED=111
    INTERNAL=112
    ENUM=113
    SEALED=114
    ANNOTATION=115
    DATA=116
    INNER=117
    VALUE=118
    TAILREC=119
    OPERATOR=120
    INLINE=121
    INFIX=122
    EXTERNAL=123
    SUSPEND=124
    OVERRIDE=125
    ABSTRACT=126
    FINAL=127
    OPEN=128
    CONST=129
    LATEINIT=130
    VARARG=131
    NOINLINE=132
    CROSSINLINE=133
    REIFIED=134
    EXPECT=135
    ACTUAL=136
    RealLiteral=137
    FloatLiteral=138
    DoubleLiteral=139
    IntegerLiteral=140
    HexLiteral=141
    BinLiteral=142
    UnsignedLiteral=143
    LongLiteral=144
    BooleanLiteral=145
    NullLiteral=146
    CharacterLiteral=147
    Identifier=148
    IdentifierOrSoftKey=149
    FieldIdentifier=150
    QUOTE_OPEN=151
    TRIPLE_QUOTE_OPEN=152
    UNICODE_CLASS_LL=153
    UNICODE_CLASS_LM=154
    UNICODE_CLASS_LO=155
    UNICODE_CLASS_LT=156
    UNICODE_CLASS_LU=157
    UNICODE_CLASS_ND=158
    UNICODE_CLASS_NL=159
    QUOTE_CLOSE=160
    LineStrRef=161
    LineStrText=162
    LineStrEscapedChar=163
    LineStrExprStart=164
    TRIPLE_QUOTE_CLOSE=165
    MultiLineStringQuote=166
    MultiLineStrRef=167
    MultiLineStrText=168
    MultiLineStrExprStart=169
    Inside_Comment=170
    Inside_WS=171
    Inside_NL=172
    ErrorCharacter=173

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class KotlinFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageHeader(self):
            return self.getTypedRuleContext(KotlinParser.PackageHeaderContext,0)


        def importList(self):
            return self.getTypedRuleContext(KotlinParser.ImportListContext,0)


        def EOF(self):
            return self.getToken(KotlinParser.EOF, 0)

        def shebangLine(self):
            return self.getTypedRuleContext(KotlinParser.ShebangLineContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def fileAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FileAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FileAnnotationContext,i)


        def topLevelObject(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TopLevelObjectContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TopLevelObjectContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_kotlinFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKotlinFile" ):
                listener.enterKotlinFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKotlinFile" ):
                listener.exitKotlinFile(self)




    def kotlinFile(self):

        localctx = KotlinParser.KotlinFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_kotlinFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 348
                self.shebangLine()


            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 351
                self.match(KotlinParser.NL)
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 360
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 357
                    self.fileAnnotation() 
                self.state = 362
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 363
            self.packageHeader()
            self.state = 364
            self.importList()
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==41 or _la==43 or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 8070450497888190591) != 0):
                self.state = 365
                self.topLevelObject()
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 371
            self.match(KotlinParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageHeader(self):
            return self.getTypedRuleContext(KotlinParser.PackageHeaderContext,0)


        def importList(self):
            return self.getTypedRuleContext(KotlinParser.ImportListContext,0)


        def EOF(self):
            return self.getToken(KotlinParser.EOF, 0)

        def shebangLine(self):
            return self.getTypedRuleContext(KotlinParser.ShebangLineContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def fileAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FileAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FileAnnotationContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.StatementContext)
            else:
                return self.getTypedRuleContext(KotlinParser.StatementContext,i)


        def semi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SemiContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript" ):
                listener.enterScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript" ):
                listener.exitScript(self)




    def script(self):

        localctx = KotlinParser.ScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 373
                self.shebangLine()


            self.state = 379
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 376
                    self.match(KotlinParser.NL) 
                self.state = 381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 385
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 382
                    self.fileAnnotation() 
                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

            self.state = 388
            self.packageHeader()
            self.state = 389
            self.importList()
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -288219106103252448) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8521290612993) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 27259903) != 0):
                self.state = 390
                self.statement()
                self.state = 391
                self.semi()
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 398
            self.match(KotlinParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShebangLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ShebangLine(self):
            return self.getToken(KotlinParser.ShebangLine, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_shebangLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShebangLine" ):
                listener.enterShebangLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShebangLine" ):
                listener.exitShebangLine(self)




    def shebangLine(self):

        localctx = KotlinParser.ShebangLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_shebangLine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(KotlinParser.ShebangLine)
            self.state = 402 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 401
                    self.match(KotlinParser.NL)

                else:
                    raise NoViableAltException(self)
                self.state = 404 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE(self):
            return self.getToken(KotlinParser.FILE, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def AT_NO_WS(self):
            return self.getToken(KotlinParser.AT_NO_WS, 0)

        def AT_PRE_WS(self):
            return self.getToken(KotlinParser.AT_PRE_WS, 0)

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_fileAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileAnnotation" ):
                listener.enterFileAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileAnnotation" ):
                listener.exitFileAnnotation(self)




    def fileAnnotation(self):

        localctx = KotlinParser.FileAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_fileAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            _la = self._input.LA(1)
            if not(_la==41 or _la==43):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 407
            self.match(KotlinParser.FILE)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 408
                self.match(KotlinParser.NL)
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 414
            self.match(KotlinParser.COLON)
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 415
                self.match(KotlinParser.NL)
                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 430
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.state = 421
                self.match(KotlinParser.LSQUARE)
                self.state = 423 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 422
                    self.unescapedAnnotation()
                    self.state = 425 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & -17588927330817) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 2098175) != 0)):
                        break

                self.state = 427
                self.match(KotlinParser.RSQUARE)
                pass
            elif token in [63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 88, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148]:
                self.state = 429
                self.unescapedAnnotation()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 435
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 432
                    self.match(KotlinParser.NL) 
                self.state = 437
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(KotlinParser.PACKAGE, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_packageHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageHeader" ):
                listener.enterPackageHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageHeader" ):
                listener.exitPackageHeader(self)




    def packageHeader(self):

        localctx = KotlinParser.PackageHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_packageHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 438
                self.match(KotlinParser.PACKAGE)
                self.state = 439
                self.identifier()
                self.state = 441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 440
                    self.semi()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importHeader(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ImportHeaderContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ImportHeaderContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_importList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportList" ):
                listener.enterImportList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportList" ):
                listener.exitImportList(self)




    def importList(self):

        localctx = KotlinParser.ImportListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_importList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 445
                    self.importHeader() 
                self.state = 450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(KotlinParser.IMPORT, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def importAlias(self):
            return self.getTypedRuleContext(KotlinParser.ImportAliasContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_importHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportHeader" ):
                listener.enterImportHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportHeader" ):
                listener.exitImportHeader(self)




    def importHeader(self):

        localctx = KotlinParser.ImportHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(KotlinParser.IMPORT)
            self.state = 452
            self.identifier()
            self.state = 456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.state = 453
                self.match(KotlinParser.DOT)
                self.state = 454
                self.match(KotlinParser.MULT)
                pass
            elif token in [102]:
                self.state = 455
                self.importAlias()
                pass
            elif token in [-1, 5, 9, 11, 13, 18, 19, 20, 21, 24, 25, 27, 38, 41, 43, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152]:
                pass
            else:
                pass
            self.state = 459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 458
                self.semi()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(KotlinParser.AS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_importAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportAlias" ):
                listener.enterImportAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportAlias" ):
                listener.exitImportAlias(self)




    def importAlias(self):

        localctx = KotlinParser.ImportAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(KotlinParser.AS)
            self.state = 462
            self.simpleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(KotlinParser.DeclarationContext,0)


        def semis(self):
            return self.getTypedRuleContext(KotlinParser.SemisContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_topLevelObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelObject" ):
                listener.enterTopLevelObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelObject" ):
                listener.exitTopLevelObject(self)




    def topLevelObject(self):

        localctx = KotlinParser.TopLevelObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_topLevelObject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.declaration()
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5 or _la==27:
                self.state = 465
                self.semis()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_ALIAS(self):
            return self.getToken(KotlinParser.TYPE_ALIAS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)




    def typeAlias(self):

        localctx = KotlinParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==43 or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 234881023) != 0):
                self.state = 468
                self.modifiers()


            self.state = 471
            self.match(KotlinParser.TYPE_ALIAS)
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 472
                self.match(KotlinParser.NL)
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 478
            self.simpleIdentifier()
            self.state = 486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 479
                    self.match(KotlinParser.NL)
                    self.state = 484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 485
                self.typeParameters()


            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 488
                self.match(KotlinParser.NL)
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 494
            self.match(KotlinParser.ASSIGNMENT)
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 495
                self.match(KotlinParser.NL)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 501
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def objectDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ObjectDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = KotlinParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_declaration)
        try:
            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 503
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 504
                self.objectDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 505
                self.functionDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 506
                self.propertyDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 507
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def INTERFACE(self):
            return self.getToken(KotlinParser.INTERFACE, 0)

        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def primaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.PrimaryConstructorContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def enumClassBody(self):
            return self.getTypedRuleContext(KotlinParser.EnumClassBodyContext,0)


        def FUN(self):
            return self.getToken(KotlinParser.FUN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = KotlinParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==43 or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 234881023) != 0):
                self.state = 510
                self.modifiers()


            self.state = 524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.state = 513
                self.match(KotlinParser.CLASS)
                pass
            elif token in [75, 76]:
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 514
                    self.match(KotlinParser.FUN)
                    self.state = 518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 515
                        self.match(KotlinParser.NL)
                        self.state = 520
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 523
                self.match(KotlinParser.INTERFACE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 526
                self.match(KotlinParser.NL)
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 532
            self.simpleIdentifier()
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 533
                    self.match(KotlinParser.NL)
                    self.state = 538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 539
                self.typeParameters()


            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 542
                    self.match(KotlinParser.NL)
                    self.state = 547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 548
                self.primaryConstructor()


            self.state = 565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 551
                    self.match(KotlinParser.NL)
                    self.state = 556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 557
                self.match(KotlinParser.COLON)
                self.state = 561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 558
                        self.match(KotlinParser.NL) 
                    self.state = 563
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

                self.state = 564
                self.delegationSpecifiers()


            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 567
                    self.match(KotlinParser.NL)
                    self.state = 572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 573
                self.typeConstraints()


            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 576
                    self.match(KotlinParser.NL)
                    self.state = 581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 582
                self.classBody()

            elif la_ == 2:
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 583
                    self.match(KotlinParser.NL)
                    self.state = 588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 589
                self.enumClassBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classParameters(self):
            return self.getTypedRuleContext(KotlinParser.ClassParametersContext,0)


        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_primaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryConstructor" ):
                listener.enterPrimaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryConstructor" ):
                listener.exitPrimaryConstructor(self)




    def primaryConstructor(self):

        localctx = KotlinParser.PrimaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_primaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==43 or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 63050394514751489) != 0):
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41 or _la==43 or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 234881023) != 0):
                    self.state = 592
                    self.modifiers()


                self.state = 595
                self.match(KotlinParser.CONSTRUCTOR)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 596
                    self.match(KotlinParser.NL)
                    self.state = 601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 604
            self.classParameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def classMemberDeclarations(self):
            return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = KotlinParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(KotlinParser.LCURL)
            self.state = 610
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 607
                    self.match(KotlinParser.NL) 
                self.state = 612
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 613
            self.classMemberDeclarations()
            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 614
                self.match(KotlinParser.NL)
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 620
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def classParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_classParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParameters" ):
                listener.enterClassParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParameters" ):
                listener.exitClassParameters(self)




    def classParameters(self):

        localctx = KotlinParser.ClassParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_classParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(KotlinParser.LPAREN)
            self.state = 626
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 623
                    self.match(KotlinParser.NL) 
                self.state = 628
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 629
                self.classParameter()
                self.state = 646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 633
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 630
                            self.match(KotlinParser.NL)
                            self.state = 635
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 636
                        self.match(KotlinParser.COMMA)
                        self.state = 640
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 637
                                self.match(KotlinParser.NL) 
                            self.state = 642
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                        self.state = 643
                        self.classParameter() 
                    self.state = 648
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

                self.state = 656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 652
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 649
                        self.match(KotlinParser.NL)
                        self.state = 654
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 655
                    self.match(KotlinParser.COMMA)




            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 660
                self.match(KotlinParser.NL)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 666
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def VAR(self):
            return self.getToken(KotlinParser.VAR, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParameter" ):
                listener.enterClassParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParameter" ):
                listener.exitClassParameter(self)




    def classParameter(self):

        localctx = KotlinParser.ClassParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_classParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 668
                self.modifiers()


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78 or _la==79:
                self.state = 671
                _la = self._input.LA(1)
                if not(_la==78 or _la==79):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 674
                self.match(KotlinParser.NL)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 680
            self.simpleIdentifier()
            self.state = 681
            self.match(KotlinParser.COLON)
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 682
                self.match(KotlinParser.NL)
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 688
            self.type_()
            self.state = 703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 689
                    self.match(KotlinParser.NL)
                    self.state = 694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 695
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 699
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 696
                        self.match(KotlinParser.NL) 
                    self.state = 701
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                self.state = 702
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelegationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotatedDelegationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotatedDelegationSpecifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotatedDelegationSpecifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_delegationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegationSpecifiers" ):
                listener.enterDelegationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegationSpecifiers" ):
                listener.exitDelegationSpecifiers(self)




    def delegationSpecifiers(self):

        localctx = KotlinParser.DelegationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_delegationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.annotatedDelegationSpecifier()
            self.state = 722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 709
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 706
                        self.match(KotlinParser.NL)
                        self.state = 711
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 712
                    self.match(KotlinParser.COMMA)
                    self.state = 716
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 713
                            self.match(KotlinParser.NL) 
                        self.state = 718
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                    self.state = 719
                    self.annotatedDelegationSpecifier() 
                self.state = 724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelegationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorInvocation(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorInvocationContext,0)


        def explicitDelegation(self):
            return self.getTypedRuleContext(KotlinParser.ExplicitDelegationContext,0)


        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def functionType(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeContext,0)


        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_delegationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegationSpecifier" ):
                listener.enterDelegationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegationSpecifier" ):
                listener.exitDelegationSpecifier(self)




    def delegationSpecifier(self):

        localctx = KotlinParser.DelegationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_delegationSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 725
                self.constructorInvocation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 726
                self.explicitDelegation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 727
                self.userType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 728
                self.functionType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 729
                self.match(KotlinParser.SUSPEND)
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 730
                    self.match(KotlinParser.NL)
                    self.state = 735
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 736
                self.functionType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_constructorInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorInvocation" ):
                listener.enterConstructorInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorInvocation" ):
                listener.exitConstructorInvocation(self)




    def constructorInvocation(self):

        localctx = KotlinParser.ConstructorInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_constructorInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.userType()
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 740
                self.match(KotlinParser.NL)
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 746
            self.valueArguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotatedDelegationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delegationSpecifier(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotatedDelegationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotatedDelegationSpecifier" ):
                listener.enterAnnotatedDelegationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotatedDelegationSpecifier" ):
                listener.exitAnnotatedDelegationSpecifier(self)




    def annotatedDelegationSpecifier(self):

        localctx = KotlinParser.AnnotatedDelegationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_annotatedDelegationSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 748
                    self.annotation() 
                self.state = 753
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 754
                self.match(KotlinParser.NL)
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 760
            self.delegationSpecifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitDelegationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def functionType(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_explicitDelegation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitDelegation" ):
                listener.enterExplicitDelegation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitDelegation" ):
                listener.exitExplicitDelegation(self)




    def explicitDelegation(self):

        localctx = KotlinParser.ExplicitDelegationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_explicitDelegation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 762
                self.userType()
                pass

            elif la_ == 2:
                self.state = 763
                self.functionType()
                pass


            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 766
                self.match(KotlinParser.NL)
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 772
            self.match(KotlinParser.BY)
            self.state = 776
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 773
                    self.match(KotlinParser.NL) 
                self.state = 778
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

            self.state = 779
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeParameterContext,i)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = KotlinParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(KotlinParser.LANGLE)
            self.state = 785
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 782
                    self.match(KotlinParser.NL) 
                self.state = 787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 788
            self.typeParameter()
            self.state = 805
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 792
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 789
                        self.match(KotlinParser.NL)
                        self.state = 794
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 795
                    self.match(KotlinParser.COMMA)
                    self.state = 799
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 796
                            self.match(KotlinParser.NL) 
                        self.state = 801
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                    self.state = 802
                    self.typeParameter() 
                self.state = 807
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 808
                    self.match(KotlinParser.NL)
                    self.state = 813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 814
                self.match(KotlinParser.COMMA)


            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 817
                self.match(KotlinParser.NL)
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 823
            self.match(KotlinParser.RANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def typeParameterModifiers(self):
            return self.getTypedRuleContext(KotlinParser.TypeParameterModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = KotlinParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 825
                self.typeParameterModifiers()


            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 828
                self.match(KotlinParser.NL)
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 834
            self.simpleIdentifier()
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 835
                    self.match(KotlinParser.NL)
                    self.state = 840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 841
                self.match(KotlinParser.COLON)
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 842
                    self.match(KotlinParser.NL)
                    self.state = 847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 848
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConstraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(KotlinParser.WHERE, 0)

        def typeConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeConstraintContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeConstraintContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeConstraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraints" ):
                listener.enterTypeConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraints" ):
                listener.exitTypeConstraints(self)




    def typeConstraints(self):

        localctx = KotlinParser.TypeConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_typeConstraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(KotlinParser.WHERE)
            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 852
                self.match(KotlinParser.NL)
                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 858
            self.typeConstraint()
            self.state = 875
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 859
                        self.match(KotlinParser.NL)
                        self.state = 864
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 865
                    self.match(KotlinParser.COMMA)
                    self.state = 869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 866
                        self.match(KotlinParser.NL)
                        self.state = 871
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 872
                    self.typeConstraint() 
                self.state = 877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraint" ):
                listener.enterTypeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraint" ):
                listener.exitTypeConstraint(self)




    def typeConstraint(self):

        localctx = KotlinParser.TypeConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_typeConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==41 or _la==43:
                self.state = 878
                self.annotation()
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 884
            self.simpleIdentifier()
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 885
                self.match(KotlinParser.NL)
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 891
            self.match(KotlinParser.COLON)
            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 892
                self.match(KotlinParser.NL)
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 898
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMemberDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationContext,i)


        def semis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SemisContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SemisContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_classMemberDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMemberDeclarations" ):
                listener.enterClassMemberDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMemberDeclarations" ):
                listener.exitClassMemberDeclarations(self)




    def classMemberDeclarations(self):

        localctx = KotlinParser.ClassMemberDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_classMemberDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==41 or _la==43 or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 8070450497888192255) != 0):
                self.state = 900
                self.classMemberDeclaration()
                self.state = 902
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 901
                    self.semis()


                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(KotlinParser.DeclarationContext,0)


        def companionObject(self):
            return self.getTypedRuleContext(KotlinParser.CompanionObjectContext,0)


        def anonymousInitializer(self):
            return self.getTypedRuleContext(KotlinParser.AnonymousInitializerContext,0)


        def secondaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.SecondaryConstructorContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_classMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMemberDeclaration" ):
                listener.enterClassMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMemberDeclaration" ):
                listener.exitClassMemberDeclaration(self)




    def classMemberDeclaration(self):

        localctx = KotlinParser.ClassMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_classMemberDeclaration)
        try:
            self.state = 913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.companionObject()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 911
                self.anonymousInitializer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 912
                self.secondaryConstructor()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnonymousInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INIT(self):
            return self.getToken(KotlinParser.INIT, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_anonymousInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousInitializer" ):
                listener.enterAnonymousInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousInitializer" ):
                listener.exitAnonymousInitializer(self)




    def anonymousInitializer(self):

        localctx = KotlinParser.AnonymousInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_anonymousInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(KotlinParser.INIT)
            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 916
                self.match(KotlinParser.NL)
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 922
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompanionObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPANION(self):
            return self.getToken(KotlinParser.COMPANION, 0)

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_companionObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompanionObject" ):
                listener.enterCompanionObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompanionObject" ):
                listener.exitCompanionObject(self)




    def companionObject(self):

        localctx = KotlinParser.CompanionObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_companionObject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==43 or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 234881023) != 0):
                self.state = 924
                self.modifiers()


            self.state = 927
            self.match(KotlinParser.COMPANION)
            self.state = 931
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 928
                    self.match(KotlinParser.NL) 
                self.state = 933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 934
                self.match(KotlinParser.DATA)


            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 937
                self.match(KotlinParser.NL)
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 943
            self.match(KotlinParser.OBJECT)
            self.state = 951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 944
                    self.match(KotlinParser.NL)
                    self.state = 949
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 950
                self.simpleIdentifier()


            self.state = 967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 953
                    self.match(KotlinParser.NL)
                    self.state = 958
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 959
                self.match(KotlinParser.COLON)
                self.state = 963
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 960
                        self.match(KotlinParser.NL) 
                    self.state = 965
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 966
                self.delegationSpecifiers()


            self.state = 976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 969
                    self.match(KotlinParser.NL)
                    self.state = 974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 975
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionValueParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def functionValueParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FunctionValueParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FunctionValueParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameters" ):
                listener.enterFunctionValueParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameters" ):
                listener.exitFunctionValueParameters(self)




    def functionValueParameters(self):

        localctx = KotlinParser.FunctionValueParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_functionValueParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(KotlinParser.LPAREN)
            self.state = 982
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 979
                    self.match(KotlinParser.NL) 
                self.state = 984
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & 13668035483140101) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 2200096997375) != 0):
                self.state = 985
                self.functionValueParameter()
                self.state = 1002
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 989
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 986
                            self.match(KotlinParser.NL)
                            self.state = 991
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 992
                        self.match(KotlinParser.COMMA)
                        self.state = 996
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 993
                            self.match(KotlinParser.NL)
                            self.state = 998
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 999
                        self.functionValueParameter() 
                    self.state = 1004
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                self.state = 1012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 1008
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1005
                        self.match(KotlinParser.NL)
                        self.state = 1010
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1011
                    self.match(KotlinParser.COMMA)




            self.state = 1019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1016
                self.match(KotlinParser.NL)
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1022
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionValueParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(KotlinParser.ParameterContext,0)


        def parameterModifiers(self):
            return self.getTypedRuleContext(KotlinParser.ParameterModifiersContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameter" ):
                listener.enterFunctionValueParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameter" ):
                listener.exitFunctionValueParameter(self)




    def functionValueParameter(self):

        localctx = KotlinParser.FunctionValueParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_functionValueParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1024
                self.parameterModifiers()


            self.state = 1027
            self.parameter()
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1028
                    self.match(KotlinParser.NL)
                    self.state = 1033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1034
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 1038
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1035
                        self.match(KotlinParser.NL) 
                    self.state = 1040
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                self.state = 1041
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUN(self):
            return self.getToken(KotlinParser.FUN, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def functionValueParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParametersContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def receiverType(self):
            return self.getTypedRuleContext(KotlinParser.ReceiverTypeContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = KotlinParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==43 or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 234881023) != 0):
                self.state = 1044
                self.modifiers()


            self.state = 1047
            self.match(KotlinParser.FUN)
            self.state = 1055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1048
                    self.match(KotlinParser.NL)
                    self.state = 1053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1054
                self.typeParameters()


            self.state = 1072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1057
                    self.match(KotlinParser.NL)
                    self.state = 1062
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1063
                self.receiverType()
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1064
                    self.match(KotlinParser.NL)
                    self.state = 1069
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1070
                self.match(KotlinParser.DOT)


            self.state = 1077
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1074
                self.match(KotlinParser.NL)
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1080
            self.simpleIdentifier()
            self.state = 1084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1081
                self.match(KotlinParser.NL)
                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1087
            self.functionValueParameters()
            self.state = 1102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1088
                    self.match(KotlinParser.NL)
                    self.state = 1093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1094
                self.match(KotlinParser.COLON)
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1095
                    self.match(KotlinParser.NL)
                    self.state = 1100
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1101
                self.type_()


            self.state = 1111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1104
                    self.match(KotlinParser.NL)
                    self.state = 1109
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1110
                self.typeConstraints()


            self.state = 1120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1113
                    self.match(KotlinParser.NL)
                    self.state = 1118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1119
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = KotlinParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionBody)
        try:
            self.state = 1131
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1122
                self.block()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1123
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 1127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1124
                        self.match(KotlinParser.NL) 
                    self.state = 1129
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

                self.state = 1130
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = KotlinParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==41 or _la==43:
                self.state = 1133
                self.annotation()
                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1139
                self.match(KotlinParser.NL)
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1145
            self.simpleIdentifier()
            self.state = 1160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1146
                    self.match(KotlinParser.NL)
                    self.state = 1151
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1152
                self.match(KotlinParser.COLON)
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1153
                    self.match(KotlinParser.NL)
                    self.state = 1158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1159
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,i)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiVariableDeclaration" ):
                listener.enterMultiVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiVariableDeclaration" ):
                listener.exitMultiVariableDeclaration(self)




    def multiVariableDeclaration(self):

        localctx = KotlinParser.MultiVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_multiVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(KotlinParser.LPAREN)
            self.state = 1166
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1163
                    self.match(KotlinParser.NL) 
                self.state = 1168
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

            self.state = 1169
            self.variableDeclaration()
            self.state = 1186
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1170
                        self.match(KotlinParser.NL)
                        self.state = 1175
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1176
                    self.match(KotlinParser.COMMA)
                    self.state = 1180
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1177
                            self.match(KotlinParser.NL) 
                        self.state = 1182
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

                    self.state = 1183
                    self.variableDeclaration() 
                self.state = 1188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

            self.state = 1196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1189
                    self.match(KotlinParser.NL)
                    self.state = 1194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1195
                self.match(KotlinParser.COMMA)


            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1198
                self.match(KotlinParser.NL)
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1204
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def VAR(self):
            return self.getToken(KotlinParser.VAR, 0)

        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def receiverType(self):
            return self.getTypedRuleContext(KotlinParser.ReceiverTypeContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def propertyDelegate(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDelegateContext,0)


        def getter(self):
            return self.getTypedRuleContext(KotlinParser.GetterContext,0)


        def setter(self):
            return self.getTypedRuleContext(KotlinParser.SetterContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_propertyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDeclaration" ):
                listener.enterPropertyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDeclaration" ):
                listener.exitPropertyDeclaration(self)




    def propertyDeclaration(self):

        localctx = KotlinParser.PropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_propertyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==43 or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 234881023) != 0):
                self.state = 1206
                self.modifiers()


            self.state = 1209
            _la = self._input.LA(1)
            if not(_la==78 or _la==79):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1210
                    self.match(KotlinParser.NL)
                    self.state = 1215
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1216
                self.typeParameters()


            self.state = 1234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1219
                    self.match(KotlinParser.NL)
                    self.state = 1224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1225
                self.receiverType()
                self.state = 1229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1226
                    self.match(KotlinParser.NL)
                    self.state = 1231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1232
                self.match(KotlinParser.DOT)


            self.state = 1239
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1236
                    self.match(KotlinParser.NL) 
                self.state = 1241
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

            self.state = 1244
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 1242
                self.multiVariableDeclaration()
                pass
            elif token in [5, 41, 43, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 88, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148]:
                self.state = 1243
                self.variableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1246
                    self.match(KotlinParser.NL)
                    self.state = 1251
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1252
                self.typeConstraints()


            self.state = 1272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1255
                    self.match(KotlinParser.NL)
                    self.state = 1260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1270
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [28]:
                    self.state = 1261
                    self.match(KotlinParser.ASSIGNMENT)
                    self.state = 1265
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1262
                            self.match(KotlinParser.NL) 
                        self.state = 1267
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

                    self.state = 1268
                    self.expression()
                    pass
                elif token in [82]:
                    self.state = 1269
                    self.propertyDelegate()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1274
                    self.match(KotlinParser.NL)
                    self.state = 1279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1280
                self.match(KotlinParser.SEMICOLON)


            self.state = 1286
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1283
                    self.match(KotlinParser.NL) 
                self.state = 1288
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

            self.state = 1319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1290
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1289
                    self.getter()


                self.state = 1302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1295
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1292
                            self.match(KotlinParser.NL) 
                        self.state = 1297
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

                    self.state = 1299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==5 or _la==27:
                        self.state = 1298
                        self.semi()


                    self.state = 1301
                    self.setter()


                pass

            elif la_ == 2:
                self.state = 1305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1304
                    self.setter()


                self.state = 1317
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1310
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1307
                            self.match(KotlinParser.NL) 
                        self.state = 1312
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

                    self.state = 1314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==5 or _la==27:
                        self.state = 1313
                        self.semi()


                    self.state = 1316
                    self.getter()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyDelegateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_propertyDelegate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDelegate" ):
                listener.enterPropertyDelegate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDelegate" ):
                listener.exitPropertyDelegate(self)




    def propertyDelegate(self):

        localctx = KotlinParser.PropertyDelegateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_propertyDelegate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(KotlinParser.BY)
            self.state = 1325
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1322
                    self.match(KotlinParser.NL) 
                self.state = 1327
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

            self.state = 1328
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(KotlinParser.GET, 0)

        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)




    def getter(self):

        localctx = KotlinParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_getter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==43 or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 234881023) != 0):
                self.state = 1330
                self.modifiers()


            self.state = 1333
            self.match(KotlinParser.GET)
            self.state = 1371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1334
                    self.match(KotlinParser.NL)
                    self.state = 1339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1340
                self.match(KotlinParser.LPAREN)
                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1341
                    self.match(KotlinParser.NL)
                    self.state = 1346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1347
                self.match(KotlinParser.RPAREN)
                self.state = 1362
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1351
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1348
                        self.match(KotlinParser.NL)
                        self.state = 1353
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1354
                    self.match(KotlinParser.COLON)
                    self.state = 1358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1355
                        self.match(KotlinParser.NL)
                        self.state = 1360
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1361
                    self.type_()


                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1364
                    self.match(KotlinParser.NL)
                    self.state = 1369
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1370
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(KotlinParser.SET, 0)

        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def functionValueParameterWithOptionalType(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParameterWithOptionalTypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self):
            return self.getToken(KotlinParser.COMMA, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)




    def setter(self):

        localctx = KotlinParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_setter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==43 or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 234881023) != 0):
                self.state = 1373
                self.modifiers()


            self.state = 1376
            self.match(KotlinParser.SET)
            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1377
                    self.match(KotlinParser.NL)
                    self.state = 1382
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1383
                self.match(KotlinParser.LPAREN)
                self.state = 1387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1384
                    self.match(KotlinParser.NL)
                    self.state = 1389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1390
                self.functionValueParameterWithOptionalType()
                self.state = 1398
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1394
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1391
                        self.match(KotlinParser.NL)
                        self.state = 1396
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1397
                    self.match(KotlinParser.COMMA)


                self.state = 1403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1400
                    self.match(KotlinParser.NL)
                    self.state = 1405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1406
                self.match(KotlinParser.RPAREN)
                self.state = 1421
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1407
                        self.match(KotlinParser.NL)
                        self.state = 1412
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1413
                    self.match(KotlinParser.COLON)
                    self.state = 1417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1414
                        self.match(KotlinParser.NL)
                        self.state = 1419
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1420
                    self.type_()


                self.state = 1426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1423
                    self.match(KotlinParser.NL)
                    self.state = 1428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1429
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersWithOptionalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def functionValueParameterWithOptionalType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FunctionValueParameterWithOptionalTypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FunctionValueParameterWithOptionalTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parametersWithOptionalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParametersWithOptionalType" ):
                listener.enterParametersWithOptionalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParametersWithOptionalType" ):
                listener.exitParametersWithOptionalType(self)




    def parametersWithOptionalType(self):

        localctx = KotlinParser.ParametersWithOptionalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_parametersWithOptionalType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.match(KotlinParser.LPAREN)
            self.state = 1437
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,196,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1434
                    self.match(KotlinParser.NL) 
                self.state = 1439
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

            self.state = 1469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & 13668035483140101) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 2200096997375) != 0):
                self.state = 1440
                self.functionValueParameterWithOptionalType()
                self.state = 1457
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1444
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 1441
                            self.match(KotlinParser.NL)
                            self.state = 1446
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1447
                        self.match(KotlinParser.COMMA)
                        self.state = 1451
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 1448
                            self.match(KotlinParser.NL)
                            self.state = 1453
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1454
                        self.functionValueParameterWithOptionalType() 
                    self.state = 1459
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

                self.state = 1467
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1460
                        self.match(KotlinParser.NL)
                        self.state = 1465
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1466
                    self.match(KotlinParser.COMMA)




            self.state = 1474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1471
                self.match(KotlinParser.NL)
                self.state = 1476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1477
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionValueParameterWithOptionalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterWithOptionalType(self):
            return self.getTypedRuleContext(KotlinParser.ParameterWithOptionalTypeContext,0)


        def parameterModifiers(self):
            return self.getTypedRuleContext(KotlinParser.ParameterModifiersContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameterWithOptionalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameterWithOptionalType" ):
                listener.enterFunctionValueParameterWithOptionalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameterWithOptionalType" ):
                listener.exitFunctionValueParameterWithOptionalType(self)




    def functionValueParameterWithOptionalType(self):

        localctx = KotlinParser.FunctionValueParameterWithOptionalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_functionValueParameterWithOptionalType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1479
                self.parameterModifiers()


            self.state = 1482
            self.parameterWithOptionalType()
            self.state = 1497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1483
                    self.match(KotlinParser.NL)
                    self.state = 1488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1489
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 1493
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1490
                        self.match(KotlinParser.NL) 
                    self.state = 1495
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

                self.state = 1496
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterWithOptionalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_parameterWithOptionalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterWithOptionalType" ):
                listener.enterParameterWithOptionalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterWithOptionalType" ):
                listener.exitParameterWithOptionalType(self)




    def parameterWithOptionalType(self):

        localctx = KotlinParser.ParameterWithOptionalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_parameterWithOptionalType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            self.simpleIdentifier()
            self.state = 1503
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1500
                    self.match(KotlinParser.NL) 
                self.state = 1505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

            self.state = 1514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 1506
                self.match(KotlinParser.COLON)
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1507
                    self.match(KotlinParser.NL)
                    self.state = 1512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1513
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = KotlinParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1516
            self.simpleIdentifier()
            self.state = 1520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1517
                self.match(KotlinParser.NL)
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1523
            self.match(KotlinParser.COLON)
            self.state = 1527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1524
                self.match(KotlinParser.NL)
                self.state = 1529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1530
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_objectDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectDeclaration" ):
                listener.enterObjectDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectDeclaration" ):
                listener.exitObjectDeclaration(self)




    def objectDeclaration(self):

        localctx = KotlinParser.ObjectDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_objectDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==43 or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 234881023) != 0):
                self.state = 1532
                self.modifiers()


            self.state = 1535
            self.match(KotlinParser.OBJECT)
            self.state = 1539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1536
                self.match(KotlinParser.NL)
                self.state = 1541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1542
            self.simpleIdentifier()
            self.state = 1557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1543
                    self.match(KotlinParser.NL)
                    self.state = 1548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1549
                self.match(KotlinParser.COLON)
                self.state = 1553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,216,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1550
                        self.match(KotlinParser.NL) 
                    self.state = 1555
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

                self.state = 1556
                self.delegationSpecifiers()


            self.state = 1566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 1562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1559
                    self.match(KotlinParser.NL)
                    self.state = 1564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1565
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SecondaryConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def functionValueParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParametersContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def constructorDelegationCall(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorDelegationCallContext,0)


        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_secondaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondaryConstructor" ):
                listener.enterSecondaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondaryConstructor" ):
                listener.exitSecondaryConstructor(self)




    def secondaryConstructor(self):

        localctx = KotlinParser.SecondaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_secondaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==43 or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 234881023) != 0):
                self.state = 1568
                self.modifiers()


            self.state = 1571
            self.match(KotlinParser.CONSTRUCTOR)
            self.state = 1575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1572
                self.match(KotlinParser.NL)
                self.state = 1577
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1578
            self.functionValueParameters()
            self.state = 1593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.state = 1582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1579
                    self.match(KotlinParser.NL)
                    self.state = 1584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1585
                self.match(KotlinParser.COLON)
                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1586
                    self.match(KotlinParser.NL)
                    self.state = 1591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1592
                self.constructorDelegationCall()


            self.state = 1598
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,225,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1595
                    self.match(KotlinParser.NL) 
                self.state = 1600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

            self.state = 1602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1601
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDelegationCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def SUPER(self):
            return self.getToken(KotlinParser.SUPER, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_constructorDelegationCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDelegationCall" ):
                listener.enterConstructorDelegationCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDelegationCall" ):
                listener.exitConstructorDelegationCall(self)




    def constructorDelegationCall(self):

        localctx = KotlinParser.ConstructorDelegationCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_constructorDelegationCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1604
            _la = self._input.LA(1)
            if not(_la==85 or _la==86):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1605
                self.match(KotlinParser.NL)
                self.state = 1610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1611
            self.valueArguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def enumEntries(self):
            return self.getTypedRuleContext(KotlinParser.EnumEntriesContext,0)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def classMemberDeclarations(self):
            return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_enumClassBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumClassBody" ):
                listener.enterEnumClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumClassBody" ):
                listener.exitEnumClassBody(self)




    def enumClassBody(self):

        localctx = KotlinParser.EnumClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_enumClassBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            self.match(KotlinParser.LCURL)
            self.state = 1617
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,228,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1614
                    self.match(KotlinParser.NL) 
                self.state = 1619
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,228,self._ctx)

            self.state = 1621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & 13668035483140101) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 2200096997375) != 0):
                self.state = 1620
                self.enumEntries()


            self.state = 1637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1623
                    self.match(KotlinParser.NL)
                    self.state = 1628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1629
                self.match(KotlinParser.SEMICOLON)
                self.state = 1633
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1630
                        self.match(KotlinParser.NL) 
                    self.state = 1635
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

                self.state = 1636
                self.classMemberDeclarations()


            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1639
                self.match(KotlinParser.NL)
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1645
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumEntriesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EnumEntryContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EnumEntryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_enumEntries

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntries" ):
                listener.enterEnumEntries(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntries" ):
                listener.exitEnumEntries(self)




    def enumEntries(self):

        localctx = KotlinParser.EnumEntriesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_enumEntries)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.enumEntry()
            self.state = 1664
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1648
                        self.match(KotlinParser.NL)
                        self.state = 1653
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1654
                    self.match(KotlinParser.COMMA)
                    self.state = 1658
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1655
                        self.match(KotlinParser.NL)
                        self.state = 1660
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1661
                    self.enumEntry() 
                self.state = 1666
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

            self.state = 1670
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1667
                    self.match(KotlinParser.NL) 
                self.state = 1672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

            self.state = 1674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1673
                self.match(KotlinParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_enumEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntry" ):
                listener.enterEnumEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntry" ):
                listener.exitEnumEntry(self)




    def enumEntry(self):

        localctx = KotlinParser.EnumEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_enumEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 1676
                self.modifiers()
                self.state = 1680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1677
                    self.match(KotlinParser.NL)
                    self.state = 1682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1685
            self.simpleIdentifier()
            self.state = 1693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1686
                    self.match(KotlinParser.NL)
                    self.state = 1691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1692
                self.valueArguments()


            self.state = 1702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1695
                    self.match(KotlinParser.NL)
                    self.state = 1700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1701
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionType(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeContext,0)


        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def definitelyNonNullableType(self):
            return self.getTypedRuleContext(KotlinParser.DefinitelyNonNullableTypeContext,0)


        def typeModifiers(self):
            return self.getTypedRuleContext(KotlinParser.TypeModifiersContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = KotlinParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 1704
                self.typeModifiers()


            self.state = 1712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.state = 1707
                self.functionType()
                pass

            elif la_ == 2:
                self.state = 1708
                self.parenthesizedType()
                pass

            elif la_ == 3:
                self.state = 1709
                self.nullableType()
                pass

            elif la_ == 4:
                self.state = 1710
                self.typeReference()
                pass

            elif la_ == 5:
                self.state = 1711
                self.definitelyNonNullableType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def DYNAMIC(self):
            return self.getToken(KotlinParser.DYNAMIC, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeReference" ):
                listener.enterTypeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeReference" ):
                listener.exitTypeReference(self)




    def typeReference(self):

        localctx = KotlinParser.TypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_typeReference)
        try:
            self.state = 1716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1714
                self.userType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1715
                self.match(KotlinParser.DYNAMIC)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def quest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.QuestContext)
            else:
                return self.getTypedRuleContext(KotlinParser.QuestContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_nullableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullableType" ):
                listener.enterNullableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullableType" ):
                listener.exitNullableType(self)




    def nullableType(self):

        localctx = KotlinParser.NullableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_nullableType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1720
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 88, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148]:
                self.state = 1718
                self.typeReference()
                pass
            elif token in [9]:
                self.state = 1719
                self.parenthesizedType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1722
                self.match(KotlinParser.NL)
                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1729 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1728
                    self.quest()

                else:
                    raise NoViableAltException(self)
                self.state = 1731 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUEST_NO_WS(self):
            return self.getToken(KotlinParser.QUEST_NO_WS, 0)

        def QUEST_WS(self):
            return self.getToken(KotlinParser.QUEST_WS, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_quest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuest" ):
                listener.enterQuest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuest" ):
                listener.exitQuest(self)




    def quest(self):

        localctx = KotlinParser.QuestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_quest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            _la = self._input.LA(1)
            if not(_la==45 or _la==46):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleUserType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleUserTypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleUserTypeContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_userType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserType" ):
                listener.enterUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserType" ):
                listener.exitUserType(self)




    def userType(self):

        localctx = KotlinParser.UserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_userType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self.simpleUserType()
            self.state = 1752
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,253,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1736
                        self.match(KotlinParser.NL)
                        self.state = 1741
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1742
                    self.match(KotlinParser.DOT)
                    self.state = 1746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1743
                        self.match(KotlinParser.NL)
                        self.state = 1748
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1749
                    self.simpleUserType() 
                self.state = 1754
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,253,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleUserTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_simpleUserType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleUserType" ):
                listener.enterSimpleUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleUserType" ):
                listener.exitSimpleUserType(self)




    def simpleUserType(self):

        localctx = KotlinParser.SimpleUserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_simpleUserType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.simpleIdentifier()
            self.state = 1763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1756
                    self.match(KotlinParser.NL)
                    self.state = 1761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1762
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeProjectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def typeProjectionModifiers(self):
            return self.getTypedRuleContext(KotlinParser.TypeProjectionModifiersContext,0)


        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjection" ):
                listener.enterTypeProjection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjection" ):
                listener.exitTypeProjection(self)




    def typeProjection(self):

        localctx = KotlinParser.TypeProjectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_typeProjection)
        try:
            self.state = 1770
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 41, 43, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 88, 93, 94, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1766
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 1765
                    self.typeProjectionModifiers()


                self.state = 1768
                self.type_()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1769
                self.match(KotlinParser.MULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeProjectionModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeProjectionModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeProjectionModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeProjectionModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjectionModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjectionModifiers" ):
                listener.enterTypeProjectionModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjectionModifiers" ):
                listener.exitTypeProjectionModifiers(self)




    def typeProjectionModifiers(self):

        localctx = KotlinParser.TypeProjectionModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_typeProjectionModifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1772
                    self.typeProjectionModifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1775 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeProjectionModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varianceModifier(self):
            return self.getTypedRuleContext(KotlinParser.VarianceModifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjectionModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjectionModifier" ):
                listener.enterTypeProjectionModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjectionModifier" ):
                listener.exitTypeProjectionModifier(self)




    def typeProjectionModifier(self):

        localctx = KotlinParser.TypeProjectionModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_typeProjectionModifier)
        self._la = 0 # Token type
        try:
            self.state = 1785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104, 107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1777
                self.varianceModifier()
                self.state = 1781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1778
                    self.match(KotlinParser.NL)
                    self.state = 1783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [41, 43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1784
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeParametersContext,0)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def receiverType(self):
            return self.getTypedRuleContext(KotlinParser.ReceiverTypeContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)




    def functionType(self):

        localctx = KotlinParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_functionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 1787
                self.receiverType()
                self.state = 1791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1788
                    self.match(KotlinParser.NL)
                    self.state = 1793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1794
                self.match(KotlinParser.DOT)
                self.state = 1798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1795
                    self.match(KotlinParser.NL)
                    self.state = 1800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1803
            self.functionTypeParameters()
            self.state = 1807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1804
                self.match(KotlinParser.NL)
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1810
            self.match(KotlinParser.ARROW)
            self.state = 1814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1811
                self.match(KotlinParser.NL)
                self.state = 1816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1817
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ParameterContext,i)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionTypeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameters" ):
                listener.enterFunctionTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameters" ):
                listener.exitFunctionTypeParameters(self)




    def functionTypeParameters(self):

        localctx = KotlinParser.FunctionTypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_functionTypeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1819
            self.match(KotlinParser.LPAREN)
            self.state = 1823
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,266,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1820
                    self.match(KotlinParser.NL) 
                self.state = 1825
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,266,self._ctx)

            self.state = 1828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.state = 1826
                self.parameter()

            elif la_ == 2:
                self.state = 1827
                self.type_()


            self.state = 1849
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,271,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1833
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1830
                        self.match(KotlinParser.NL)
                        self.state = 1835
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1836
                    self.match(KotlinParser.COMMA)
                    self.state = 1840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1837
                        self.match(KotlinParser.NL)
                        self.state = 1842
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1845
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                    if la_ == 1:
                        self.state = 1843
                        self.parameter()
                        pass

                    elif la_ == 2:
                        self.state = 1844
                        self.type_()
                        pass

             
                self.state = 1851
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

            self.state = 1859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 1855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1852
                    self.match(KotlinParser.NL)
                    self.state = 1857
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1858
                self.match(KotlinParser.COMMA)


            self.state = 1864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1861
                self.match(KotlinParser.NL)
                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1867
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedType" ):
                listener.enterParenthesizedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedType" ):
                listener.exitParenthesizedType(self)




    def parenthesizedType(self):

        localctx = KotlinParser.ParenthesizedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_parenthesizedType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1869
            self.match(KotlinParser.LPAREN)
            self.state = 1873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1870
                self.match(KotlinParser.NL)
                self.state = 1875
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1876
            self.type_()
            self.state = 1880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1877
                self.match(KotlinParser.NL)
                self.state = 1882
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1883
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def typeModifiers(self):
            return self.getTypedRuleContext(KotlinParser.TypeModifiersContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_receiverType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverType" ):
                listener.enterReceiverType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverType" ):
                listener.exitReceiverType(self)




    def receiverType(self):

        localctx = KotlinParser.ReceiverTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_receiverType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 1885
                self.typeModifiers()


            self.state = 1891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 1888
                self.parenthesizedType()
                pass

            elif la_ == 2:
                self.state = 1889
                self.nullableType()
                pass

            elif la_ == 3:
                self.state = 1890
                self.typeReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedUserTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def parenthesizedUserType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedUserTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedUserType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedUserType" ):
                listener.enterParenthesizedUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedUserType" ):
                listener.exitParenthesizedUserType(self)




    def parenthesizedUserType(self):

        localctx = KotlinParser.ParenthesizedUserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_parenthesizedUserType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1893
            self.match(KotlinParser.LPAREN)
            self.state = 1897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1894
                self.match(KotlinParser.NL)
                self.state = 1899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 88, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148]:
                self.state = 1900
                self.userType()
                pass
            elif token in [9]:
                self.state = 1901
                self.parenthesizedUserType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1904
                self.match(KotlinParser.NL)
                self.state = 1909
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1910
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinitelyNonNullableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMP(self):
            return self.getToken(KotlinParser.AMP, 0)

        def userType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UserTypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UserTypeContext,i)


        def parenthesizedUserType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ParenthesizedUserTypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ParenthesizedUserTypeContext,i)


        def typeModifiers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeModifiersContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeModifiersContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_definitelyNonNullableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinitelyNonNullableType" ):
                listener.enterDefinitelyNonNullableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinitelyNonNullableType" ):
                listener.exitDefinitelyNonNullableType(self)




    def definitelyNonNullableType(self):

        localctx = KotlinParser.DefinitelyNonNullableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_definitelyNonNullableType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 1912
                self.typeModifiers()


            self.state = 1917
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 88, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148]:
                self.state = 1915
                self.userType()
                pass
            elif token in [9]:
                self.state = 1916
                self.parenthesizedUserType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1919
                self.match(KotlinParser.NL)
                self.state = 1924
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1925
            self.match(KotlinParser.AMP)
            self.state = 1929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1926
                self.match(KotlinParser.NL)
                self.state = 1931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.state = 1932
                self.typeModifiers()


            self.state = 1937
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 88, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148]:
                self.state = 1935
                self.userType()
                pass
            elif token in [9]:
                self.state = 1936
                self.parenthesizedUserType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.StatementContext)
            else:
                return self.getTypedRuleContext(KotlinParser.StatementContext,i)


        def semis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SemisContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SemisContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)




    def statements(self):

        localctx = KotlinParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.state = 1939
                self.statement()
                self.state = 1945
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,288,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1940
                        self.semis()
                        self.state = 1941
                        self.statement() 
                    self.state = 1947
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,288,self._ctx)



            self.state = 1951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.state = 1950
                self.semis()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(KotlinParser.DeclarationContext,0)


        def assignment(self):
            return self.getTypedRuleContext(KotlinParser.AssignmentContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(KotlinParser.LoopStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LabelContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LabelContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = KotlinParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1957
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,292,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1955
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 88, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148]:
                        self.state = 1953
                        self.label()
                        pass
                    elif token in [41, 43]:
                        self.state = 1954
                        self.annotation()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1959
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,292,self._ctx)

            self.state = 1964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 1960
                self.declaration()
                pass

            elif la_ == 2:
                self.state = 1961
                self.assignment()
                pass

            elif la_ == 3:
                self.state = 1962
                self.loopStatement()
                pass

            elif la_ == 4:
                self.state = 1963
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def AT_NO_WS(self):
            return self.getToken(KotlinParser.AT_NO_WS, 0)

        def AT_POST_WS(self):
            return self.getToken(KotlinParser.AT_POST_WS, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)




    def label(self):

        localctx = KotlinParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_label)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1966
            self.simpleIdentifier()
            self.state = 1967
            _la = self._input.LA(1)
            if not(_la==41 or _la==42):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1971
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1968
                    self.match(KotlinParser.NL) 
                self.state = 1973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStructureBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def statement(self):
            return self.getTypedRuleContext(KotlinParser.StatementContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_controlStructureBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStructureBody" ):
                listener.enterControlStructureBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStructureBody" ):
                listener.exitControlStructureBody(self)




    def controlStructureBody(self):

        localctx = KotlinParser.ControlStructureBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_controlStructureBody)
        try:
            self.state = 1976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1974
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1975
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def statements(self):
            return self.getTypedRuleContext(KotlinParser.StatementsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = KotlinParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978
            self.match(KotlinParser.LCURL)
            self.state = 1982
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,296,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1979
                    self.match(KotlinParser.NL) 
                self.state = 1984
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,296,self._ctx)

            self.state = 1985
            self.statements()
            self.state = 1989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1986
                self.match(KotlinParser.NL)
                self.state = 1991
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1992
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStatement(self):
            return self.getTypedRuleContext(KotlinParser.ForStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(KotlinParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(KotlinParser.DoWhileStatementContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)




    def loopStatement(self):

        localctx = KotlinParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_loopStatement)
        try:
            self.state = 1997
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1994
                self.forStatement()
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1995
                self.whileStatement()
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1996
                self.doWhileStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(KotlinParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = KotlinParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1999
            self.match(KotlinParser.FOR)
            self.state = 2003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2000
                self.match(KotlinParser.NL)
                self.state = 2005
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2006
            self.match(KotlinParser.LPAREN)
            self.state = 2010
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,300,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2007
                    self.annotation() 
                self.state = 2012
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,300,self._ctx)

            self.state = 2015
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 41, 43, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 88, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148]:
                self.state = 2013
                self.variableDeclaration()
                pass
            elif token in [9]:
                self.state = 2014
                self.multiVariableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2017
            self.match(KotlinParser.IN)
            self.state = 2018
            self.expression()
            self.state = 2019
            self.match(KotlinParser.RPAREN)
            self.state = 2023
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,302,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2020
                    self.match(KotlinParser.NL) 
                self.state = 2025
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,302,self._ctx)

            self.state = 2027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.state = 2026
                self.controlStructureBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(KotlinParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = KotlinParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2029
            self.match(KotlinParser.WHILE)
            self.state = 2033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2030
                self.match(KotlinParser.NL)
                self.state = 2035
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2036
            self.match(KotlinParser.LPAREN)
            self.state = 2037
            self.expression()
            self.state = 2038
            self.match(KotlinParser.RPAREN)
            self.state = 2042
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,305,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2039
                    self.match(KotlinParser.NL) 
                self.state = 2044
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,305,self._ctx)

            self.state = 2047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 9, 11, 13, 18, 19, 20, 21, 24, 25, 38, 41, 43, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152]:
                self.state = 2045
                self.controlStructureBody()
                pass
            elif token in [27]:
                self.state = 2046
                self.match(KotlinParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(KotlinParser.DO, 0)

        def WHILE(self):
            return self.getToken(KotlinParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = KotlinParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_doWhileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049
            self.match(KotlinParser.DO)
            self.state = 2053
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,307,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2050
                    self.match(KotlinParser.NL) 
                self.state = 2055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,307,self._ctx)

            self.state = 2057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.state = 2056
                self.controlStructureBody()


            self.state = 2062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2059
                self.match(KotlinParser.NL)
                self.state = 2064
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2065
            self.match(KotlinParser.WHILE)
            self.state = 2069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2066
                self.match(KotlinParser.NL)
                self.state = 2071
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2072
            self.match(KotlinParser.LPAREN)
            self.state = 2073
            self.expression()
            self.state = 2074
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def directlyAssignableExpression(self):
            return self.getTypedRuleContext(KotlinParser.DirectlyAssignableExpressionContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def assignableExpression(self):
            return self.getTypedRuleContext(KotlinParser.AssignableExpressionContext,0)


        def assignmentAndOperator(self):
            return self.getTypedRuleContext(KotlinParser.AssignmentAndOperatorContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = KotlinParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 2076
                self.directlyAssignableExpression()
                self.state = 2077
                self.match(KotlinParser.ASSIGNMENT)
                pass

            elif la_ == 2:
                self.state = 2079
                self.assignableExpression()
                self.state = 2080
                self.assignmentAndOperator()
                pass


            self.state = 2087
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2084
                    self.match(KotlinParser.NL) 
                self.state = 2089
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

            self.state = 2090
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SemiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_semi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemi" ):
                listener.enterSemi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemi" ):
                listener.exitSemi(self)




    def semi(self):

        localctx = KotlinParser.SemiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_semi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2092
            _la = self._input.LA(1)
            if not(_la==5 or _la==27):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2096
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,313,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2093
                    self.match(KotlinParser.NL) 
                self.state = 2098
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,313,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SemisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.SEMICOLON)
            else:
                return self.getToken(KotlinParser.SEMICOLON, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_semis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemis" ):
                listener.enterSemis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemis" ):
                listener.exitSemis(self)




    def semis(self):

        localctx = KotlinParser.SemisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_semis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2100 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2099
                    _la = self._input.LA(1)
                    if not(_la==5 or _la==27):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 2102 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self):
            return self.getTypedRuleContext(KotlinParser.DisjunctionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = KotlinParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2104
            self.disjunction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ConjunctionContext,i)


        def DISJ(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DISJ)
            else:
                return self.getToken(KotlinParser.DISJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)




    def disjunction(self):

        localctx = KotlinParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2106
            self.conjunction()
            self.state = 2123
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,317,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2107
                        self.match(KotlinParser.NL)
                        self.state = 2112
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2113
                    self.match(KotlinParser.DISJ)
                    self.state = 2117
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,316,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2114
                            self.match(KotlinParser.NL) 
                        self.state = 2119
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

                    self.state = 2120
                    self.conjunction() 
                self.state = 2125
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,317,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EqualityContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EqualityContext,i)


        def CONJ(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.CONJ)
            else:
                return self.getToken(KotlinParser.CONJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)




    def conjunction(self):

        localctx = KotlinParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2126
            self.equality()
            self.state = 2143
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,320,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2127
                        self.match(KotlinParser.NL)
                        self.state = 2132
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2133
                    self.match(KotlinParser.CONJ)
                    self.state = 2137
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,319,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2134
                            self.match(KotlinParser.NL) 
                        self.state = 2139
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,319,self._ctx)

                    self.state = 2140
                    self.equality() 
                self.state = 2145
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,320,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ComparisonContext,i)


        def equalityOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EqualityOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EqualityOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_equality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality" ):
                listener.enterEquality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality" ):
                listener.exitEquality(self)




    def equality(self):

        localctx = KotlinParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_equality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2146
            self.comparison()
            self.state = 2158
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2147
                    self.equalityOperator()
                    self.state = 2151
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,321,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2148
                            self.match(KotlinParser.NL) 
                        self.state = 2153
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,321,self._ctx)

                    self.state = 2154
                    self.comparison() 
                self.state = 2160
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericCallLikeComparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.GenericCallLikeComparisonContext)
            else:
                return self.getTypedRuleContext(KotlinParser.GenericCallLikeComparisonContext,i)


        def comparisonOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ComparisonOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ComparisonOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = KotlinParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2161
            self.genericCallLikeComparison()
            self.state = 2173
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2162
                    self.comparisonOperator()
                    self.state = 2166
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2163
                            self.match(KotlinParser.NL) 
                        self.state = 2168
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

                    self.state = 2169
                    self.genericCallLikeComparison() 
                self.state = 2175
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericCallLikeComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixOperation(self):
            return self.getTypedRuleContext(KotlinParser.InfixOperationContext,0)


        def callSuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.CallSuffixContext)
            else:
                return self.getTypedRuleContext(KotlinParser.CallSuffixContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_genericCallLikeComparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericCallLikeComparison" ):
                listener.enterGenericCallLikeComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericCallLikeComparison" ):
                listener.exitGenericCallLikeComparison(self)




    def genericCallLikeComparison(self):

        localctx = KotlinParser.GenericCallLikeComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_genericCallLikeComparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2176
            self.infixOperation()
            self.state = 2180
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2177
                    self.callSuffix() 
                self.state = 2182
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfixOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elvisExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ElvisExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ElvisExpressionContext,i)


        def inOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.InOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.InOperatorContext,i)


        def isOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.IsOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.IsOperatorContext,i)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_infixOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfixOperation" ):
                listener.enterInfixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfixOperation" ):
                listener.exitInfixOperation(self)




    def infixOperation(self):

        localctx = KotlinParser.InfixOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_infixOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2183
            self.elvisExpression()
            self.state = 2204
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,329,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2202
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [104, 106]:
                        self.state = 2184
                        self.inOperator()
                        self.state = 2188
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2185
                                self.match(KotlinParser.NL) 
                            self.state = 2190
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

                        self.state = 2191
                        self.elvisExpression()
                        pass
                    elif token in [103, 105]:
                        self.state = 2193
                        self.isOperator()
                        self.state = 2197
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 2194
                            self.match(KotlinParser.NL)
                            self.state = 2199
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2200
                        self.type_()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2206
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,329,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElvisExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.InfixFunctionCallContext)
            else:
                return self.getTypedRuleContext(KotlinParser.InfixFunctionCallContext,i)


        def elvis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ElvisContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ElvisContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_elvisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElvisExpression" ):
                listener.enterElvisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElvisExpression" ):
                listener.exitElvisExpression(self)




    def elvisExpression(self):

        localctx = KotlinParser.ElvisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_elvisExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2207
            self.infixFunctionCall()
            self.state = 2225
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,332,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2208
                        self.match(KotlinParser.NL)
                        self.state = 2213
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2214
                    self.elvis()
                    self.state = 2218
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,331,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2215
                            self.match(KotlinParser.NL) 
                        self.state = 2220
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,331,self._ctx)

                    self.state = 2221
                    self.infixFunctionCall() 
                self.state = 2227
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,332,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElvisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUEST_NO_WS(self):
            return self.getToken(KotlinParser.QUEST_NO_WS, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_elvis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElvis" ):
                listener.enterElvis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElvis" ):
                listener.exitElvis(self)




    def elvis(self):

        localctx = KotlinParser.ElvisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_elvis)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2228
            self.match(KotlinParser.QUEST_NO_WS)
            self.state = 2229
            self.match(KotlinParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfixFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rangeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.RangeExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.RangeExpressionContext,i)


        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_infixFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfixFunctionCall" ):
                listener.enterInfixFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfixFunctionCall" ):
                listener.exitInfixFunctionCall(self)




    def infixFunctionCall(self):

        localctx = KotlinParser.InfixFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_infixFunctionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2231
            self.rangeExpression()
            self.state = 2243
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,334,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2232
                    self.simpleIdentifier()
                    self.state = 2236
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2233
                            self.match(KotlinParser.NL) 
                        self.state = 2238
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

                    self.state = 2239
                    self.rangeExpression() 
                self.state = 2245
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,334,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AdditiveExpressionContext,i)


        def RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.RANGE)
            else:
                return self.getToken(KotlinParser.RANGE, i)

        def RANGE_UNTIL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.RANGE_UNTIL)
            else:
                return self.getToken(KotlinParser.RANGE_UNTIL, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)




    def rangeExpression(self):

        localctx = KotlinParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_rangeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2246
            self.additiveExpression()
            self.state = 2257
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,336,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2247
                    _la = self._input.LA(1)
                    if not(_la==36 or _la==37):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2251
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,335,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2248
                            self.match(KotlinParser.NL) 
                        self.state = 2253
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,335,self._ctx)

                    self.state = 2254
                    self.additiveExpression() 
                self.state = 2259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,336,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiplicativeExpressionContext,i)


        def additiveOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AdditiveOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AdditiveOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = KotlinParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_additiveExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2260
            self.multiplicativeExpression()
            self.state = 2272
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,338,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2261
                    self.additiveOperator()
                    self.state = 2265
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,337,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2262
                            self.match(KotlinParser.NL) 
                        self.state = 2267
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,337,self._ctx)

                    self.state = 2268
                    self.multiplicativeExpression() 
                self.state = 2274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,338,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AsExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AsExpressionContext,i)


        def multiplicativeOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiplicativeOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiplicativeOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = KotlinParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_multiplicativeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2275
            self.asExpression()
            self.state = 2287
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,340,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2276
                    self.multiplicativeOperator()
                    self.state = 2280
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,339,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2277
                            self.match(KotlinParser.NL) 
                        self.state = 2282
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,339,self._ctx)

                    self.state = 2283
                    self.asExpression() 
                self.state = 2289
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,340,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PrefixUnaryExpressionContext,0)


        def asOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AsOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AsOperatorContext,i)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_asExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsExpression" ):
                listener.enterAsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsExpression" ):
                listener.exitAsExpression(self)




    def asExpression(self):

        localctx = KotlinParser.AsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_asExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2290
            self.prefixUnaryExpression()
            self.state = 2308
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2291
                        self.match(KotlinParser.NL)
                        self.state = 2296
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2297
                    self.asOperator()
                    self.state = 2301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2298
                        self.match(KotlinParser.NL)
                        self.state = 2303
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2304
                    self.type_() 
                self.state = 2310
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixUnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryExpressionContext,0)


        def unaryPrefix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnaryPrefixContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnaryPrefixContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_prefixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryExpression" ):
                listener.enterPrefixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryExpression" ):
                listener.exitPrefixUnaryExpression(self)




    def prefixUnaryExpression(self):

        localctx = KotlinParser.PrefixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_prefixUnaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2314
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,344,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2311
                    self.unaryPrefix() 
                self.state = 2316
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,344,self._ctx)

            self.state = 2317
            self.postfixUnaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def label(self):
            return self.getTypedRuleContext(KotlinParser.LabelContext,0)


        def prefixUnaryOperator(self):
            return self.getTypedRuleContext(KotlinParser.PrefixUnaryOperatorContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_unaryPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPrefix" ):
                listener.enterUnaryPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPrefix" ):
                listener.exitUnaryPrefix(self)




    def unaryPrefix(self):

        localctx = KotlinParser.UnaryPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_unaryPrefix)
        try:
            self.state = 2328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41, 43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2319
                self.annotation()
                pass
            elif token in [63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 88, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2320
                self.label()
                pass
            elif token in [18, 19, 20, 21, 24, 25]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2321
                self.prefixUnaryOperator()
                self.state = 2325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,345,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2322
                        self.match(KotlinParser.NL) 
                    self.state = 2327
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,345,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PrimaryExpressionContext,0)


        def postfixUnarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PostfixUnarySuffixContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PostfixUnarySuffixContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryExpression" ):
                listener.enterPostfixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryExpression" ):
                listener.exitPostfixUnaryExpression(self)




    def postfixUnaryExpression(self):

        localctx = KotlinParser.PostfixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_postfixUnaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.primaryExpression()
            self.state = 2334
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,347,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2331
                    self.postfixUnarySuffix() 
                self.state = 2336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,347,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnarySuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixUnaryOperator(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryOperatorContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def callSuffix(self):
            return self.getTypedRuleContext(KotlinParser.CallSuffixContext,0)


        def indexingSuffix(self):
            return self.getTypedRuleContext(KotlinParser.IndexingSuffixContext,0)


        def navigationSuffix(self):
            return self.getTypedRuleContext(KotlinParser.NavigationSuffixContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnarySuffix" ):
                listener.enterPostfixUnarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnarySuffix" ):
                listener.exitPostfixUnarySuffix(self)




    def postfixUnarySuffix(self):

        localctx = KotlinParser.PostfixUnarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_postfixUnarySuffix)
        try:
            self.state = 2342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2337
                self.postfixUnaryOperator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2338
                self.typeArguments()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2339
                self.callSuffix()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2340
                self.indexingSuffix()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2341
                self.navigationSuffix()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectlyAssignableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryExpressionContext,0)


        def assignableSuffix(self):
            return self.getTypedRuleContext(KotlinParser.AssignableSuffixContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def parenthesizedDirectlyAssignableExpression(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedDirectlyAssignableExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_directlyAssignableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectlyAssignableExpression" ):
                listener.enterDirectlyAssignableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectlyAssignableExpression" ):
                listener.exitDirectlyAssignableExpression(self)




    def directlyAssignableExpression(self):

        localctx = KotlinParser.DirectlyAssignableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_directlyAssignableExpression)
        try:
            self.state = 2349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2344
                self.postfixUnaryExpression()
                self.state = 2345
                self.assignableSuffix()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2347
                self.simpleIdentifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2348
                self.parenthesizedDirectlyAssignableExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedDirectlyAssignableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def directlyAssignableExpression(self):
            return self.getTypedRuleContext(KotlinParser.DirectlyAssignableExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedDirectlyAssignableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedDirectlyAssignableExpression" ):
                listener.enterParenthesizedDirectlyAssignableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedDirectlyAssignableExpression" ):
                listener.exitParenthesizedDirectlyAssignableExpression(self)




    def parenthesizedDirectlyAssignableExpression(self):

        localctx = KotlinParser.ParenthesizedDirectlyAssignableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_parenthesizedDirectlyAssignableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2351
            self.match(KotlinParser.LPAREN)
            self.state = 2355
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2352
                    self.match(KotlinParser.NL) 
                self.state = 2357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

            self.state = 2358
            self.directlyAssignableExpression()
            self.state = 2362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2359
                self.match(KotlinParser.NL)
                self.state = 2364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2365
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PrefixUnaryExpressionContext,0)


        def parenthesizedAssignableExpression(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedAssignableExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_assignableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignableExpression" ):
                listener.enterAssignableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignableExpression" ):
                listener.exitAssignableExpression(self)




    def assignableExpression(self):

        localctx = KotlinParser.AssignableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_assignableExpression)
        try:
            self.state = 2369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2367
                self.prefixUnaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2368
                self.parenthesizedAssignableExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedAssignableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def assignableExpression(self):
            return self.getTypedRuleContext(KotlinParser.AssignableExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedAssignableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedAssignableExpression" ):
                listener.enterParenthesizedAssignableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedAssignableExpression" ):
                listener.exitParenthesizedAssignableExpression(self)




    def parenthesizedAssignableExpression(self):

        localctx = KotlinParser.ParenthesizedAssignableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_parenthesizedAssignableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2371
            self.match(KotlinParser.LPAREN)
            self.state = 2375
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,353,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2372
                    self.match(KotlinParser.NL) 
                self.state = 2377
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,353,self._ctx)

            self.state = 2378
            self.assignableExpression()
            self.state = 2382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2379
                self.match(KotlinParser.NL)
                self.state = 2384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2385
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignableSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def indexingSuffix(self):
            return self.getTypedRuleContext(KotlinParser.IndexingSuffixContext,0)


        def navigationSuffix(self):
            return self.getTypedRuleContext(KotlinParser.NavigationSuffixContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_assignableSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignableSuffix" ):
                listener.enterAssignableSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignableSuffix" ):
                listener.exitAssignableSuffix(self)




    def assignableSuffix(self):

        localctx = KotlinParser.AssignableSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_assignableSuffix)
        try:
            self.state = 2390
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2387
                self.typeArguments()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2388
                self.indexingSuffix()
                pass
            elif token in [5, 7, 38, 46]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2389
                self.navigationSuffix()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexingSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_indexingSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexingSuffix" ):
                listener.enterIndexingSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexingSuffix" ):
                listener.exitIndexingSuffix(self)




    def indexingSuffix(self):

        localctx = KotlinParser.IndexingSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_indexingSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2392
            self.match(KotlinParser.LSQUARE)
            self.state = 2396
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,356,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2393
                    self.match(KotlinParser.NL) 
                self.state = 2398
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,356,self._ctx)

            self.state = 2399
            self.expression()
            self.state = 2416
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,359,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2400
                        self.match(KotlinParser.NL)
                        self.state = 2405
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2406
                    self.match(KotlinParser.COMMA)
                    self.state = 2410
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,358,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2407
                            self.match(KotlinParser.NL) 
                        self.state = 2412
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,358,self._ctx)

                    self.state = 2413
                    self.expression() 
                self.state = 2418
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,359,self._ctx)

            self.state = 2426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.state = 2422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2419
                    self.match(KotlinParser.NL)
                    self.state = 2424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2425
                self.match(KotlinParser.COMMA)


            self.state = 2431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2428
                self.match(KotlinParser.NL)
                self.state = 2433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2434
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NavigationSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberAccessOperator(self):
            return self.getTypedRuleContext(KotlinParser.MemberAccessOperatorContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def parenthesizedExpression(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedExpressionContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_navigationSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNavigationSuffix" ):
                listener.enterNavigationSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNavigationSuffix" ):
                listener.exitNavigationSuffix(self)




    def navigationSuffix(self):

        localctx = KotlinParser.NavigationSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_navigationSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2436
            self.memberAccessOperator()
            self.state = 2440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2437
                self.match(KotlinParser.NL)
                self.state = 2442
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2446
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 88, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148]:
                self.state = 2443
                self.simpleIdentifier()
                pass
            elif token in [9]:
                self.state = 2444
                self.parenthesizedExpression()
                pass
            elif token in [74]:
                self.state = 2445
                self.match(KotlinParser.CLASS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotatedLambda(self):
            return self.getTypedRuleContext(KotlinParser.AnnotatedLambdaContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_callSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallSuffix" ):
                listener.enterCallSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallSuffix" ):
                listener.exitCallSuffix(self)




    def callSuffix(self):

        localctx = KotlinParser.CallSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_callSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 2448
                self.typeArguments()


            self.state = 2456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
            if la_ == 1:
                self.state = 2452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 2451
                    self.valueArguments()


                self.state = 2454
                self.annotatedLambda()
                pass

            elif la_ == 2:
                self.state = 2455
                self.valueArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotatedLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLiteral(self):
            return self.getTypedRuleContext(KotlinParser.LambdaLiteralContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def label(self):
            return self.getTypedRuleContext(KotlinParser.LabelContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotatedLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotatedLambda" ):
                listener.enterAnnotatedLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotatedLambda" ):
                listener.exitAnnotatedLambda(self)




    def annotatedLambda(self):

        localctx = KotlinParser.AnnotatedLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_annotatedLambda)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==41 or _la==43:
                self.state = 2458
                self.annotation()
                self.state = 2463
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & -17588927330817) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 2098175) != 0):
                self.state = 2464
                self.label()


            self.state = 2470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2467
                self.match(KotlinParser.NL)
                self.state = 2472
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2473
            self.lambdaLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def typeProjection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeProjectionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeProjectionContext,i)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = KotlinParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2475
            self.match(KotlinParser.LANGLE)
            self.state = 2479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2476
                self.match(KotlinParser.NL)
                self.state = 2481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2482
            self.typeProjection()
            self.state = 2499
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,374,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2483
                        self.match(KotlinParser.NL)
                        self.state = 2488
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2489
                    self.match(KotlinParser.COMMA)
                    self.state = 2493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2490
                        self.match(KotlinParser.NL)
                        self.state = 2495
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2496
                    self.typeProjection() 
                self.state = 2501
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,374,self._ctx)

            self.state = 2509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
            if la_ == 1:
                self.state = 2505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2502
                    self.match(KotlinParser.NL)
                    self.state = 2507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2508
                self.match(KotlinParser.COMMA)


            self.state = 2514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2511
                self.match(KotlinParser.NL)
                self.state = 2516
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2517
            self.match(KotlinParser.RANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def valueArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ValueArgumentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ValueArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_valueArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArguments" ):
                listener.enterValueArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArguments" ):
                listener.exitValueArguments(self)




    def valueArguments(self):

        localctx = KotlinParser.ValueArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_valueArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2519
            self.match(KotlinParser.LPAREN)
            self.state = 2523
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,378,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2520
                    self.match(KotlinParser.NL) 
                self.state = 2525
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

            self.state = 2561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288219106103219680) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8536323116289) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 27259903) != 0):
                self.state = 2526
                self.valueArgument()
                self.state = 2543
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,381,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2530
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 2527
                            self.match(KotlinParser.NL)
                            self.state = 2532
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2533
                        self.match(KotlinParser.COMMA)
                        self.state = 2537
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,380,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2534
                                self.match(KotlinParser.NL) 
                            self.state = 2539
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,380,self._ctx)

                        self.state = 2540
                        self.valueArgument() 
                    self.state = 2545
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,381,self._ctx)

                self.state = 2553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
                if la_ == 1:
                    self.state = 2549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2546
                        self.match(KotlinParser.NL)
                        self.state = 2551
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2552
                    self.match(KotlinParser.COMMA)


                self.state = 2558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2555
                    self.match(KotlinParser.NL)
                    self.state = 2560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2563
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_valueArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArgument" ):
                listener.enterValueArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArgument" ):
                listener.exitValueArgument(self)




    def valueArgument(self):

        localctx = KotlinParser.ValueArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_valueArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
            if la_ == 1:
                self.state = 2565
                self.annotation()


            self.state = 2571
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,387,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2568
                    self.match(KotlinParser.NL) 
                self.state = 2573
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,387,self._ctx)

            self.state = 2588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
            if la_ == 1:
                self.state = 2574
                self.simpleIdentifier()
                self.state = 2578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2575
                    self.match(KotlinParser.NL)
                    self.state = 2580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2581
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 2585
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,389,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2582
                        self.match(KotlinParser.NL) 
                    self.state = 2587
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,389,self._ctx)



            self.state = 2591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 2590
                self.match(KotlinParser.MULT)


            self.state = 2596
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,392,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2593
                    self.match(KotlinParser.NL) 
                self.state = 2598
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,392,self._ctx)

            self.state = 2599
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedExpression(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedExpressionContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def literalConstant(self):
            return self.getTypedRuleContext(KotlinParser.LiteralConstantContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.StringLiteralContext,0)


        def callableReference(self):
            return self.getTypedRuleContext(KotlinParser.CallableReferenceContext,0)


        def functionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.FunctionLiteralContext,0)


        def objectLiteral(self):
            return self.getTypedRuleContext(KotlinParser.ObjectLiteralContext,0)


        def collectionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.CollectionLiteralContext,0)


        def thisExpression(self):
            return self.getTypedRuleContext(KotlinParser.ThisExpressionContext,0)


        def superExpression(self):
            return self.getTypedRuleContext(KotlinParser.SuperExpressionContext,0)


        def ifExpression(self):
            return self.getTypedRuleContext(KotlinParser.IfExpressionContext,0)


        def whenExpression(self):
            return self.getTypedRuleContext(KotlinParser.WhenExpressionContext,0)


        def tryExpression(self):
            return self.getTypedRuleContext(KotlinParser.TryExpressionContext,0)


        def jumpExpression(self):
            return self.getTypedRuleContext(KotlinParser.JumpExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = KotlinParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_primaryExpression)
        try:
            self.state = 2615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2601
                self.parenthesizedExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2602
                self.simpleIdentifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2603
                self.literalConstant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2604
                self.stringLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2605
                self.callableReference()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2606
                self.functionLiteral()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2607
                self.objectLiteral()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2608
                self.collectionLiteral()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2609
                self.thisExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2610
                self.superExpression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2611
                self.ifExpression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2612
                self.whenExpression()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2613
                self.tryExpression()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2614
                self.jumpExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)




    def parenthesizedExpression(self):

        localctx = KotlinParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_parenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2617
            self.match(KotlinParser.LPAREN)
            self.state = 2621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,394,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2618
                    self.match(KotlinParser.NL) 
                self.state = 2623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,394,self._ctx)

            self.state = 2624
            self.expression()
            self.state = 2628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2625
                self.match(KotlinParser.NL)
                self.state = 2630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2631
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_collectionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionLiteral" ):
                listener.enterCollectionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionLiteral" ):
                listener.exitCollectionLiteral(self)




    def collectionLiteral(self):

        localctx = KotlinParser.CollectionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_collectionLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2633
            self.match(KotlinParser.LSQUARE)
            self.state = 2637
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,396,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2634
                    self.match(KotlinParser.NL) 
                self.state = 2639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,396,self._ctx)

            self.state = 2675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288219106103252448) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8536323116289) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 27259903) != 0):
                self.state = 2640
                self.expression()
                self.state = 2657
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,399,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2644
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 2641
                            self.match(KotlinParser.NL)
                            self.state = 2646
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2647
                        self.match(KotlinParser.COMMA)
                        self.state = 2651
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,398,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2648
                                self.match(KotlinParser.NL) 
                            self.state = 2653
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,398,self._ctx)

                        self.state = 2654
                        self.expression() 
                    self.state = 2659
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,399,self._ctx)

                self.state = 2667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
                if la_ == 1:
                    self.state = 2663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2660
                        self.match(KotlinParser.NL)
                        self.state = 2665
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2666
                    self.match(KotlinParser.COMMA)


                self.state = 2672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2669
                    self.match(KotlinParser.NL)
                    self.state = 2674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2677
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(KotlinParser.BooleanLiteral, 0)

        def IntegerLiteral(self):
            return self.getToken(KotlinParser.IntegerLiteral, 0)

        def HexLiteral(self):
            return self.getToken(KotlinParser.HexLiteral, 0)

        def BinLiteral(self):
            return self.getToken(KotlinParser.BinLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(KotlinParser.CharacterLiteral, 0)

        def RealLiteral(self):
            return self.getToken(KotlinParser.RealLiteral, 0)

        def NullLiteral(self):
            return self.getToken(KotlinParser.NullLiteral, 0)

        def LongLiteral(self):
            return self.getToken(KotlinParser.LongLiteral, 0)

        def UnsignedLiteral(self):
            return self.getToken(KotlinParser.UnsignedLiteral, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_literalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralConstant" ):
                listener.enterLiteralConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralConstant" ):
                listener.exitLiteralConstant(self)




    def literalConstant(self):

        localctx = KotlinParser.LiteralConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_literalConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2679
            _la = self._input.LA(1)
            if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 2041) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineStringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.LineStringLiteralContext,0)


        def multiLineStringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.MultiLineStringLiteralContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = KotlinParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_stringLiteral)
        try:
            self.state = 2683
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2681
                self.lineStringLiteral()
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2682
                self.multiLineStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_OPEN(self):
            return self.getToken(KotlinParser.QUOTE_OPEN, 0)

        def QUOTE_CLOSE(self):
            return self.getToken(KotlinParser.QUOTE_CLOSE, 0)

        def lineStringContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringContentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringContentContext,i)


        def lineStringExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringExpressionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringLiteral" ):
                listener.enterLineStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringLiteral" ):
                listener.exitLineStringLiteral(self)




    def lineStringLiteral(self):

        localctx = KotlinParser.LineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_lineStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2685
            self.match(KotlinParser.QUOTE_OPEN)
            self.state = 2690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 15) != 0):
                self.state = 2688
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [161, 162, 163]:
                    self.state = 2686
                    self.lineStringContent()
                    pass
                elif token in [164]:
                    self.state = 2687
                    self.lineStringExpression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2692
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2693
            self.match(KotlinParser.QUOTE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIPLE_QUOTE_OPEN(self):
            return self.getToken(KotlinParser.TRIPLE_QUOTE_OPEN, 0)

        def TRIPLE_QUOTE_CLOSE(self):
            return self.getToken(KotlinParser.TRIPLE_QUOTE_CLOSE, 0)

        def multiLineStringContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiLineStringContentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiLineStringContentContext,i)


        def multiLineStringExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiLineStringExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiLineStringExpressionContext,i)


        def MultiLineStringQuote(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.MultiLineStringQuote)
            else:
                return self.getToken(KotlinParser.MultiLineStringQuote, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringLiteral" ):
                listener.enterMultiLineStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringLiteral" ):
                listener.exitMultiLineStringLiteral(self)




    def multiLineStringLiteral(self):

        localctx = KotlinParser.MultiLineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_multiLineStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2695
            self.match(KotlinParser.TRIPLE_QUOTE_OPEN)
            self.state = 2701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 166)) & ~0x3f) == 0 and ((1 << (_la - 166)) & 15) != 0):
                self.state = 2699
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
                if la_ == 1:
                    self.state = 2696
                    self.multiLineStringContent()
                    pass

                elif la_ == 2:
                    self.state = 2697
                    self.multiLineStringExpression()
                    pass

                elif la_ == 3:
                    self.state = 2698
                    self.match(KotlinParser.MultiLineStringQuote)
                    pass


                self.state = 2703
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2704
            self.match(KotlinParser.TRIPLE_QUOTE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineStrText(self):
            return self.getToken(KotlinParser.LineStrText, 0)

        def LineStrEscapedChar(self):
            return self.getToken(KotlinParser.LineStrEscapedChar, 0)

        def LineStrRef(self):
            return self.getToken(KotlinParser.LineStrRef, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringContent" ):
                listener.enterLineStringContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringContent" ):
                listener.exitLineStringContent(self)




    def lineStringContent(self):

        localctx = KotlinParser.LineStringContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_lineStringContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2706
            _la = self._input.LA(1)
            if not(((((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineStrExprStart(self):
            return self.getToken(KotlinParser.LineStrExprStart, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringExpression" ):
                listener.enterLineStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringExpression" ):
                listener.exitLineStringExpression(self)




    def lineStringExpression(self):

        localctx = KotlinParser.LineStringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_lineStringExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2708
            self.match(KotlinParser.LineStrExprStart)
            self.state = 2712
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,409,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2709
                    self.match(KotlinParser.NL) 
                self.state = 2714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,409,self._ctx)

            self.state = 2715
            self.expression()
            self.state = 2719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2716
                self.match(KotlinParser.NL)
                self.state = 2721
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2722
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineStrText(self):
            return self.getToken(KotlinParser.MultiLineStrText, 0)

        def MultiLineStringQuote(self):
            return self.getToken(KotlinParser.MultiLineStringQuote, 0)

        def MultiLineStrRef(self):
            return self.getToken(KotlinParser.MultiLineStrRef, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringContent" ):
                listener.enterMultiLineStringContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringContent" ):
                listener.exitMultiLineStringContent(self)




    def multiLineStringContent(self):

        localctx = KotlinParser.MultiLineStringContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_multiLineStringContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2724
            _la = self._input.LA(1)
            if not(((((_la - 166)) & ~0x3f) == 0 and ((1 << (_la - 166)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineStrExprStart(self):
            return self.getToken(KotlinParser.MultiLineStrExprStart, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringExpression" ):
                listener.enterMultiLineStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringExpression" ):
                listener.exitMultiLineStringExpression(self)




    def multiLineStringExpression(self):

        localctx = KotlinParser.MultiLineStringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_multiLineStringExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2726
            self.match(KotlinParser.MultiLineStrExprStart)
            self.state = 2730
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,411,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2727
                    self.match(KotlinParser.NL) 
                self.state = 2732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,411,self._ctx)

            self.state = 2733
            self.expression()
            self.state = 2737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2734
                self.match(KotlinParser.NL)
                self.state = 2739
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2740
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def statements(self):
            return self.getTypedRuleContext(KotlinParser.StatementsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def lambdaParameters(self):
            return self.getTypedRuleContext(KotlinParser.LambdaParametersContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLiteral" ):
                listener.enterLambdaLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLiteral" ):
                listener.exitLambdaLiteral(self)




    def lambdaLiteral(self):

        localctx = KotlinParser.LambdaLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_lambdaLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2742
            self.match(KotlinParser.LCURL)
            self.state = 2746
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,413,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2743
                    self.match(KotlinParser.NL) 
                self.state = 2748
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,413,self._ctx)

            self.state = 2765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                self.state = 2750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
                if la_ == 1:
                    self.state = 2749
                    self.lambdaParameters()


                self.state = 2755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2752
                    self.match(KotlinParser.NL)
                    self.state = 2757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2758
                self.match(KotlinParser.ARROW)
                self.state = 2762
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,416,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2759
                        self.match(KotlinParser.NL) 
                    self.state = 2764
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,416,self._ctx)



            self.state = 2767
            self.statements()
            self.state = 2771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2768
                self.match(KotlinParser.NL)
                self.state = 2773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2774
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LambdaParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LambdaParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)




    def lambdaParameters(self):

        localctx = KotlinParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2776
            self.lambdaParameter()
            self.state = 2793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,421,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2780
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2777
                        self.match(KotlinParser.NL)
                        self.state = 2782
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2783
                    self.match(KotlinParser.COMMA)
                    self.state = 2787
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,420,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2784
                            self.match(KotlinParser.NL) 
                        self.state = 2789
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,420,self._ctx)

                    self.state = 2790
                    self.lambdaParameter() 
                self.state = 2795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,421,self._ctx)

            self.state = 2803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
            if la_ == 1:
                self.state = 2799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2796
                    self.match(KotlinParser.NL)
                    self.state = 2801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2802
                self.match(KotlinParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameter" ):
                listener.enterLambdaParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameter" ):
                listener.exitLambdaParameter(self)




    def lambdaParameter(self):

        localctx = KotlinParser.LambdaParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_lambdaParameter)
        self._la = 0 # Token type
        try:
            self.state = 2823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 41, 43, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 88, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2805
                self.variableDeclaration()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2806
                self.multiVariableDeclaration()
                self.state = 2821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
                if la_ == 1:
                    self.state = 2810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2807
                        self.match(KotlinParser.NL)
                        self.state = 2812
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2813
                    self.match(KotlinParser.COLON)
                    self.state = 2817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2814
                        self.match(KotlinParser.NL)
                        self.state = 2819
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2820
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnonymousFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUN(self):
            return self.getToken(KotlinParser.FUN, 0)

        def parametersWithOptionalType(self):
            return self.getTypedRuleContext(KotlinParser.ParametersWithOptionalTypeContext,0)


        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_anonymousFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousFunction" ):
                listener.enterAnonymousFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousFunction" ):
                listener.exitAnonymousFunction(self)




    def anonymousFunction(self):

        localctx = KotlinParser.AnonymousFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_anonymousFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 2825
                self.match(KotlinParser.SUSPEND)


            self.state = 2831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2828
                self.match(KotlinParser.NL)
                self.state = 2833
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2834
            self.match(KotlinParser.FUN)
            self.state = 2850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.state = 2838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2835
                    self.match(KotlinParser.NL)
                    self.state = 2840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2841
                self.type_()
                self.state = 2845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2842
                    self.match(KotlinParser.NL)
                    self.state = 2847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2848
                self.match(KotlinParser.DOT)


            self.state = 2855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2852
                self.match(KotlinParser.NL)
                self.state = 2857
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2858
            self.parametersWithOptionalType()
            self.state = 2873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
            if la_ == 1:
                self.state = 2862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2859
                    self.match(KotlinParser.NL)
                    self.state = 2864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2865
                self.match(KotlinParser.COLON)
                self.state = 2869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2866
                    self.match(KotlinParser.NL)
                    self.state = 2871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2872
                self.type_()


            self.state = 2882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.state = 2878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2875
                    self.match(KotlinParser.NL)
                    self.state = 2880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2881
                self.typeConstraints()


            self.state = 2891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                self.state = 2887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2884
                    self.match(KotlinParser.NL)
                    self.state = 2889
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2890
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLiteral(self):
            return self.getTypedRuleContext(KotlinParser.LambdaLiteralContext,0)


        def anonymousFunction(self):
            return self.getTypedRuleContext(KotlinParser.AnonymousFunctionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionLiteral" ):
                listener.enterFunctionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionLiteral" ):
                listener.exitFunctionLiteral(self)




    def functionLiteral(self):

        localctx = KotlinParser.FunctionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_functionLiteral)
        try:
            self.state = 2895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2893
                self.lambdaLiteral()
                pass
            elif token in [5, 76, 124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2894
                self.anonymousFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_objectLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteral" ):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteral" ):
                listener.exitObjectLiteral(self)




    def objectLiteral(self):

        localctx = KotlinParser.ObjectLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_objectLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 2897
                self.match(KotlinParser.DATA)


            self.state = 2903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2900
                self.match(KotlinParser.NL)
                self.state = 2905
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2906
            self.match(KotlinParser.OBJECT)
            self.state = 2927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.state = 2910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2907
                    self.match(KotlinParser.NL)
                    self.state = 2912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2913
                self.match(KotlinParser.COLON)
                self.state = 2917
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,445,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2914
                        self.match(KotlinParser.NL) 
                    self.state = 2919
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,445,self._ctx)

                self.state = 2920
                self.delegationSpecifiers()
                self.state = 2924
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,446,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2921
                        self.match(KotlinParser.NL) 
                    self.state = 2926
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,446,self._ctx)



            self.state = 2936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
            if la_ == 1:
                self.state = 2932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2929
                    self.match(KotlinParser.NL)
                    self.state = 2934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2935
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThisExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def THIS_AT(self):
            return self.getToken(KotlinParser.THIS_AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_thisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)




    def thisExpression(self):

        localctx = KotlinParser.ThisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_thisExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2938
            _la = self._input.LA(1)
            if not(_la==61 or _la==85):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(KotlinParser.SUPER, 0)

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def AT_NO_WS(self):
            return self.getToken(KotlinParser.AT_NO_WS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def SUPER_AT(self):
            return self.getToken(KotlinParser.SUPER_AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_superExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperExpression" ):
                listener.enterSuperExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperExpression" ):
                listener.exitSuperExpression(self)




    def superExpression(self):

        localctx = KotlinParser.SuperExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_superExpression)
        self._la = 0 # Token type
        try:
            self.state = 2964
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2940
                self.match(KotlinParser.SUPER)
                self.state = 2957
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
                if la_ == 1:
                    self.state = 2941
                    self.match(KotlinParser.LANGLE)
                    self.state = 2945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2942
                        self.match(KotlinParser.NL)
                        self.state = 2947
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2948
                    self.type_()
                    self.state = 2952
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2949
                        self.match(KotlinParser.NL)
                        self.state = 2954
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2955
                    self.match(KotlinParser.RANGLE)


                self.state = 2961
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
                if la_ == 1:
                    self.state = 2959
                    self.match(KotlinParser.AT_NO_WS)
                    self.state = 2960
                    self.simpleIdentifier()


                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2963
                self.match(KotlinParser.SUPER_AT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(KotlinParser.IF, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def controlStructureBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ControlStructureBodyContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,i)


        def ELSE(self):
            return self.getToken(KotlinParser.ELSE, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.SEMICOLON)
            else:
                return self.getToken(KotlinParser.SEMICOLON, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_ifExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpression" ):
                listener.enterIfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpression" ):
                listener.exitIfExpression(self)




    def ifExpression(self):

        localctx = KotlinParser.IfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_ifExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2966
            self.match(KotlinParser.IF)
            self.state = 2970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2967
                self.match(KotlinParser.NL)
                self.state = 2972
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2973
            self.match(KotlinParser.LPAREN)
            self.state = 2977
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,456,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2974
                    self.match(KotlinParser.NL) 
                self.state = 2979
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,456,self._ctx)

            self.state = 2980
            self.expression()
            self.state = 2984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2981
                self.match(KotlinParser.NL)
                self.state = 2986
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2987
            self.match(KotlinParser.RPAREN)
            self.state = 2991
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,458,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2988
                    self.match(KotlinParser.NL) 
                self.state = 2993
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,458,self._ctx)

            self.state = 3025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                self.state = 2994
                self.controlStructureBody()
                pass

            elif la_ == 2:
                self.state = 2996
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
                if la_ == 1:
                    self.state = 2995
                    self.controlStructureBody()


                self.state = 3001
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,460,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2998
                        self.match(KotlinParser.NL) 
                    self.state = 3003
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,460,self._ctx)

                self.state = 3005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 3004
                    self.match(KotlinParser.SEMICOLON)


                self.state = 3010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3007
                    self.match(KotlinParser.NL)
                    self.state = 3012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3013
                self.match(KotlinParser.ELSE)
                self.state = 3017
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,463,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3014
                        self.match(KotlinParser.NL) 
                    self.state = 3019
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,463,self._ctx)

                self.state = 3022
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5, 9, 11, 13, 18, 19, 20, 21, 24, 25, 38, 41, 43, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152]:
                    self.state = 3020
                    self.controlStructureBody()
                    pass
                elif token in [27]:
                    self.state = 3021
                    self.match(KotlinParser.SEMICOLON)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.state = 3024
                self.match(KotlinParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenSubjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_whenSubject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenSubject" ):
                listener.enterWhenSubject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenSubject" ):
                listener.exitWhenSubject(self)




    def whenSubject(self):

        localctx = KotlinParser.WhenSubjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_whenSubject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3027
            self.match(KotlinParser.LPAREN)
            self.state = 3061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
            if la_ == 1:
                self.state = 3031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==41 or _la==43:
                    self.state = 3028
                    self.annotation()
                    self.state = 3033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3034
                    self.match(KotlinParser.NL)
                    self.state = 3039
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3040
                self.match(KotlinParser.VAL)
                self.state = 3044
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,468,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3041
                        self.match(KotlinParser.NL) 
                    self.state = 3046
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,468,self._ctx)

                self.state = 3047
                self.variableDeclaration()
                self.state = 3051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3048
                    self.match(KotlinParser.NL)
                    self.state = 3053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3054
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 3058
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,470,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3055
                        self.match(KotlinParser.NL) 
                    self.state = 3060
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,470,self._ctx)



            self.state = 3063
            self.expression()
            self.state = 3064
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(KotlinParser.WHEN, 0)

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def whenSubject(self):
            return self.getTypedRuleContext(KotlinParser.WhenSubjectContext,0)


        def whenEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.WhenEntryContext)
            else:
                return self.getTypedRuleContext(KotlinParser.WhenEntryContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_whenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpression" ):
                listener.enterWhenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpression" ):
                listener.exitWhenExpression(self)




    def whenExpression(self):

        localctx = KotlinParser.WhenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_whenExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3066
            self.match(KotlinParser.WHEN)
            self.state = 3070
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,472,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3067
                    self.match(KotlinParser.NL) 
                self.state = 3072
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,472,self._ctx)

            self.state = 3074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 3073
                self.whenSubject()


            self.state = 3079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3076
                self.match(KotlinParser.NL)
                self.state = 3081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3082
            self.match(KotlinParser.LCURL)
            self.state = 3086
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,475,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3083
                    self.match(KotlinParser.NL) 
                self.state = 3088
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,475,self._ctx)

            self.state = 3098
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,477,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3089
                    self.whenEntry()
                    self.state = 3093
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,476,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3090
                            self.match(KotlinParser.NL) 
                        self.state = 3095
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,476,self._ctx)
             
                self.state = 3100
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,477,self._ctx)

            self.state = 3104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3101
                self.match(KotlinParser.NL)
                self.state = 3106
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3107
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.WhenConditionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.WhenConditionContext,i)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def ELSE(self):
            return self.getToken(KotlinParser.ELSE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_whenEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenEntry" ):
                listener.enterWhenEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenEntry" ):
                listener.exitWhenEntry(self)




    def whenEntry(self):

        localctx = KotlinParser.WhenEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_whenEntry)
        self._la = 0 # Token type
        try:
            self.state = 3173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 9, 11, 13, 18, 19, 20, 21, 24, 25, 38, 41, 43, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3109
                self.whenCondition()
                self.state = 3126
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,481,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3113
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 3110
                            self.match(KotlinParser.NL)
                            self.state = 3115
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 3116
                        self.match(KotlinParser.COMMA)
                        self.state = 3120
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,480,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 3117
                                self.match(KotlinParser.NL) 
                            self.state = 3122
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,480,self._ctx)

                        self.state = 3123
                        self.whenCondition() 
                    self.state = 3128
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,481,self._ctx)

                self.state = 3136
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
                if la_ == 1:
                    self.state = 3132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 3129
                        self.match(KotlinParser.NL)
                        self.state = 3134
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3135
                    self.match(KotlinParser.COMMA)


                self.state = 3141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3138
                    self.match(KotlinParser.NL)
                    self.state = 3143
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3144
                self.match(KotlinParser.ARROW)
                self.state = 3148
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,485,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3145
                        self.match(KotlinParser.NL) 
                    self.state = 3150
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,485,self._ctx)

                self.state = 3151
                self.controlStructureBody()
                self.state = 3153
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
                if la_ == 1:
                    self.state = 3152
                    self.semi()


                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3155
                self.match(KotlinParser.ELSE)
                self.state = 3159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3156
                    self.match(KotlinParser.NL)
                    self.state = 3161
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3162
                self.match(KotlinParser.ARROW)
                self.state = 3166
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,488,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3163
                        self.match(KotlinParser.NL) 
                    self.state = 3168
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,488,self._ctx)

                self.state = 3169
                self.controlStructureBody()
                self.state = 3171
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,489,self._ctx)
                if la_ == 1:
                    self.state = 3170
                    self.semi()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def rangeTest(self):
            return self.getTypedRuleContext(KotlinParser.RangeTestContext,0)


        def typeTest(self):
            return self.getTypedRuleContext(KotlinParser.TypeTestContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_whenCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenCondition" ):
                listener.enterWhenCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenCondition" ):
                listener.exitWhenCondition(self)




    def whenCondition(self):

        localctx = KotlinParser.WhenConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_whenCondition)
        try:
            self.state = 3178
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 9, 11, 13, 18, 19, 20, 21, 24, 25, 38, 41, 43, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 98, 99, 100, 101, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3175
                self.expression()
                pass
            elif token in [104, 106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3176
                self.rangeTest()
                pass
            elif token in [103, 105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3177
                self.typeTest()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeTestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inOperator(self):
            return self.getTypedRuleContext(KotlinParser.InOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_rangeTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeTest" ):
                listener.enterRangeTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeTest" ):
                listener.exitRangeTest(self)




    def rangeTest(self):

        localctx = KotlinParser.RangeTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_rangeTest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3180
            self.inOperator()
            self.state = 3184
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,492,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3181
                    self.match(KotlinParser.NL) 
                self.state = 3186
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,492,self._ctx)

            self.state = 3187
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isOperator(self):
            return self.getTypedRuleContext(KotlinParser.IsOperatorContext,0)


        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTest" ):
                listener.enterTypeTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTest" ):
                listener.exitTypeTest(self)




    def typeTest(self):

        localctx = KotlinParser.TypeTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_typeTest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3189
            self.isOperator()
            self.state = 3193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3190
                self.match(KotlinParser.NL)
                self.state = 3195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3196
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(KotlinParser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def finallyBlock(self):
            return self.getTypedRuleContext(KotlinParser.FinallyBlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def catchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.CatchBlockContext)
            else:
                return self.getTypedRuleContext(KotlinParser.CatchBlockContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_tryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpression" ):
                listener.enterTryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpression" ):
                listener.exitTryExpression(self)




    def tryExpression(self):

        localctx = KotlinParser.TryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_tryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3198
            self.match(KotlinParser.TRY)
            self.state = 3202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3199
                self.match(KotlinParser.NL)
                self.state = 3204
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3205
            self.block()
            self.state = 3233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
            if la_ == 1:
                self.state = 3213 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3209
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 3206
                            self.match(KotlinParser.NL)
                            self.state = 3211
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 3212
                        self.catchBlock()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3215 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,496,self._ctx)

                self.state = 3224
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
                if la_ == 1:
                    self.state = 3220
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 3217
                        self.match(KotlinParser.NL)
                        self.state = 3222
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3223
                    self.finallyBlock()


                pass

            elif la_ == 2:
                self.state = 3229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3226
                    self.match(KotlinParser.NL)
                    self.state = 3231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3232
                self.finallyBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(KotlinParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def COMMA(self):
            return self.getToken(KotlinParser.COMMA, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_catchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchBlock" ):
                listener.enterCatchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchBlock" ):
                listener.exitCatchBlock(self)




    def catchBlock(self):

        localctx = KotlinParser.CatchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_catchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3235
            self.match(KotlinParser.CATCH)
            self.state = 3239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3236
                self.match(KotlinParser.NL)
                self.state = 3241
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3242
            self.match(KotlinParser.LPAREN)
            self.state = 3246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==41 or _la==43:
                self.state = 3243
                self.annotation()
                self.state = 3248
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3249
            self.simpleIdentifier()
            self.state = 3250
            self.match(KotlinParser.COLON)
            self.state = 3251
            self.type_()
            self.state = 3259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5 or _la==8:
                self.state = 3255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3252
                    self.match(KotlinParser.NL)
                    self.state = 3257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3258
                self.match(KotlinParser.COMMA)


            self.state = 3261
            self.match(KotlinParser.RPAREN)
            self.state = 3265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3262
                self.match(KotlinParser.NL)
                self.state = 3267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3268
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(KotlinParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = KotlinParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_finallyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3270
            self.match(KotlinParser.FINALLY)
            self.state = 3274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3271
                self.match(KotlinParser.NL)
                self.state = 3276
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3277
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(KotlinParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def RETURN(self):
            return self.getToken(KotlinParser.RETURN, 0)

        def RETURN_AT(self):
            return self.getToken(KotlinParser.RETURN_AT, 0)

        def CONTINUE(self):
            return self.getToken(KotlinParser.CONTINUE, 0)

        def CONTINUE_AT(self):
            return self.getToken(KotlinParser.CONTINUE_AT, 0)

        def BREAK(self):
            return self.getToken(KotlinParser.BREAK, 0)

        def BREAK_AT(self):
            return self.getToken(KotlinParser.BREAK_AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_jumpExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpExpression" ):
                listener.enterJumpExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpExpression" ):
                listener.exitJumpExpression(self)




    def jumpExpression(self):

        localctx = KotlinParser.JumpExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_jumpExpression)
        self._la = 0 # Token type
        try:
            self.state = 3295
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [98]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3279
                self.match(KotlinParser.THROW)
                self.state = 3283
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,507,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3280
                        self.match(KotlinParser.NL) 
                    self.state = 3285
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,507,self._ctx)

                self.state = 3286
                self.expression()
                pass
            elif token in [58, 99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3287
                _la = self._input.LA(1)
                if not(_la==58 or _la==99):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3289
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,508,self._ctx)
                if la_ == 1:
                    self.state = 3288
                    self.expression()


                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3291
                self.match(KotlinParser.CONTINUE)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3292
                self.match(KotlinParser.CONTINUE_AT)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3293
                self.match(KotlinParser.BREAK)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3294
                self.match(KotlinParser.BREAK_AT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLONCOLON(self):
            return self.getToken(KotlinParser.COLONCOLON, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def receiverType(self):
            return self.getTypedRuleContext(KotlinParser.ReceiverTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_callableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallableReference" ):
                listener.enterCallableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallableReference" ):
                listener.exitCallableReference(self)




    def callableReference(self):

        localctx = KotlinParser.CallableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_callableReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223361041738497536) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8794463665409) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 1049087) != 0):
                self.state = 3297
                self.receiverType()


            self.state = 3300
            self.match(KotlinParser.COLONCOLON)
            self.state = 3304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3301
                self.match(KotlinParser.NL)
                self.state = 3306
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 81, 82, 83, 84, 88, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148]:
                self.state = 3307
                self.simpleIdentifier()
                pass
            elif token in [74]:
                self.state = 3308
                self.match(KotlinParser.CLASS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentAndOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGNMENT(self):
            return self.getToken(KotlinParser.ADD_ASSIGNMENT, 0)

        def SUB_ASSIGNMENT(self):
            return self.getToken(KotlinParser.SUB_ASSIGNMENT, 0)

        def MULT_ASSIGNMENT(self):
            return self.getToken(KotlinParser.MULT_ASSIGNMENT, 0)

        def DIV_ASSIGNMENT(self):
            return self.getToken(KotlinParser.DIV_ASSIGNMENT, 0)

        def MOD_ASSIGNMENT(self):
            return self.getToken(KotlinParser.MOD_ASSIGNMENT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_assignmentAndOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentAndOperator" ):
                listener.enterAssignmentAndOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentAndOperator" ):
                listener.exitAssignmentAndOperator(self)




    def assignmentAndOperator(self):

        localctx = KotlinParser.AssignmentAndOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_assignmentAndOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3311
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16642998272) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL_EQ(self):
            return self.getToken(KotlinParser.EXCL_EQ, 0)

        def EXCL_EQEQ(self):
            return self.getToken(KotlinParser.EXCL_EQEQ, 0)

        def EQEQ(self):
            return self.getToken(KotlinParser.EQEQ, 0)

        def EQEQEQ(self):
            return self.getToken(KotlinParser.EQEQEQ, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_equalityOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOperator" ):
                listener.enterEqualityOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOperator" ):
                listener.exitEqualityOperator(self)




    def equalityOperator(self):

        localctx = KotlinParser.EqualityOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_equalityOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3313
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 60798594969501696) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def LE(self):
            return self.getToken(KotlinParser.LE, 0)

        def GE(self):
            return self.getToken(KotlinParser.GE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = KotlinParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3315
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2111062325329920) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def NOT_IN(self):
            return self.getToken(KotlinParser.NOT_IN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_inOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInOperator" ):
                listener.enterInOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInOperator" ):
                listener.exitInOperator(self)




    def inOperator(self):

        localctx = KotlinParser.InOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_inOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3317
            _la = self._input.LA(1)
            if not(_la==104 or _la==106):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(KotlinParser.IS, 0)

        def NOT_IS(self):
            return self.getToken(KotlinParser.NOT_IS, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_isOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOperator" ):
                listener.enterIsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOperator" ):
                listener.exitIsOperator(self)




    def isOperator(self):

        localctx = KotlinParser.IsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_isOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3319
            _la = self._input.LA(1)
            if not(_la==103 or _la==105):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(KotlinParser.ADD, 0)

        def SUB(self):
            return self.getToken(KotlinParser.SUB, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_additiveOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOperator" ):
                listener.enterAdditiveOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOperator" ):
                listener.exitAdditiveOperator(self)




    def additiveOperator(self):

        localctx = KotlinParser.AdditiveOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_additiveOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3321
            _la = self._input.LA(1)
            if not(_la==18 or _la==19):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def DIV(self):
            return self.getToken(KotlinParser.DIV, 0)

        def MOD(self):
            return self.getToken(KotlinParser.MOD, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiplicativeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOperator" ):
                listener.enterMultiplicativeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOperator" ):
                listener.exitMultiplicativeOperator(self)




    def multiplicativeOperator(self):

        localctx = KotlinParser.MultiplicativeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_multiplicativeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3323
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 229376) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(KotlinParser.AS, 0)

        def AS_SAFE(self):
            return self.getToken(KotlinParser.AS_SAFE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_asOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsOperator" ):
                listener.enterAsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsOperator" ):
                listener.exitAsOperator(self)




    def asOperator(self):

        localctx = KotlinParser.AsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_asOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3325
            _la = self._input.LA(1)
            if not(_la==53 or _la==102):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixUnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(KotlinParser.INCR, 0)

        def DECR(self):
            return self.getToken(KotlinParser.DECR, 0)

        def SUB(self):
            return self.getToken(KotlinParser.SUB, 0)

        def ADD(self):
            return self.getToken(KotlinParser.ADD, 0)

        def excl(self):
            return self.getTypedRuleContext(KotlinParser.ExclContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_prefixUnaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryOperator" ):
                listener.enterPrefixUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryOperator" ):
                listener.exitPrefixUnaryOperator(self)




    def prefixUnaryOperator(self):

        localctx = KotlinParser.PrefixUnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_prefixUnaryOperator)
        try:
            self.state = 3332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3327
                self.match(KotlinParser.INCR)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3328
                self.match(KotlinParser.DECR)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3329
                self.match(KotlinParser.SUB)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3330
                self.match(KotlinParser.ADD)
                pass
            elif token in [24, 25]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3331
                self.excl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(KotlinParser.INCR, 0)

        def DECR(self):
            return self.getToken(KotlinParser.DECR, 0)

        def EXCL_NO_WS(self):
            return self.getToken(KotlinParser.EXCL_NO_WS, 0)

        def excl(self):
            return self.getTypedRuleContext(KotlinParser.ExclContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryOperator" ):
                listener.enterPostfixUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryOperator" ):
                listener.exitPostfixUnaryOperator(self)




    def postfixUnaryOperator(self):

        localctx = KotlinParser.PostfixUnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_postfixUnaryOperator)
        try:
            self.state = 3338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3334
                self.match(KotlinParser.INCR)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3335
                self.match(KotlinParser.DECR)
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3336
                self.match(KotlinParser.EXCL_NO_WS)
                self.state = 3337
                self.excl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL_NO_WS(self):
            return self.getToken(KotlinParser.EXCL_NO_WS, 0)

        def EXCL_WS(self):
            return self.getToken(KotlinParser.EXCL_WS, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_excl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcl" ):
                listener.enterExcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcl" ):
                listener.exitExcl(self)




    def excl(self):

        localctx = KotlinParser.ExclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_excl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3340
            _la = self._input.LA(1)
            if not(_la==24 or _la==25):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def safeNav(self):
            return self.getTypedRuleContext(KotlinParser.SafeNavContext,0)


        def COLONCOLON(self):
            return self.getToken(KotlinParser.COLONCOLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_memberAccessOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessOperator" ):
                listener.enterMemberAccessOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessOperator" ):
                listener.exitMemberAccessOperator(self)




    def memberAccessOperator(self):

        localctx = KotlinParser.MemberAccessOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_memberAccessOperator)
        self._la = 0 # Token type
        try:
            self.state = 3357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3342
                    self.match(KotlinParser.NL)
                    self.state = 3347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3348
                self.match(KotlinParser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3349
                    self.match(KotlinParser.NL)
                    self.state = 3354
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3355
                self.safeNav()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3356
                self.match(KotlinParser.COLONCOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SafeNavContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUEST_NO_WS(self):
            return self.getToken(KotlinParser.QUEST_NO_WS, 0)

        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_safeNav

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSafeNav" ):
                listener.enterSafeNav(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSafeNav" ):
                listener.exitSafeNav(self)




    def safeNav(self):

        localctx = KotlinParser.SafeNavContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_safeNav)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3359
            self.match(KotlinParser.QUEST_NO_WS)
            self.state = 3360
            self.match(KotlinParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifiers" ):
                listener.enterModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifiers" ):
                listener.exitModifiers(self)




    def modifiers(self):

        localctx = KotlinParser.ModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3364 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3364
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [41, 43]:
                        self.state = 3362
                        self.annotation()
                        pass
                    elif token in [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136]:
                        self.state = 3363
                        self.modifier()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 3366 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,519,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def parameterModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ParameterModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ParameterModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_parameterModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterModifiers" ):
                listener.enterParameterModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterModifiers" ):
                listener.exitParameterModifiers(self)




    def parameterModifiers(self):

        localctx = KotlinParser.ParameterModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_parameterModifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3370 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3370
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [41, 43]:
                        self.state = 3368
                        self.annotation()
                        pass
                    elif token in [131, 132, 133]:
                        self.state = 3369
                        self.parameterModifier()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 3372 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,521,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModifier(self):
            return self.getTypedRuleContext(KotlinParser.ClassModifierContext,0)


        def memberModifier(self):
            return self.getTypedRuleContext(KotlinParser.MemberModifierContext,0)


        def visibilityModifier(self):
            return self.getTypedRuleContext(KotlinParser.VisibilityModifierContext,0)


        def functionModifier(self):
            return self.getTypedRuleContext(KotlinParser.FunctionModifierContext,0)


        def propertyModifier(self):
            return self.getTypedRuleContext(KotlinParser.PropertyModifierContext,0)


        def inheritanceModifier(self):
            return self.getTypedRuleContext(KotlinParser.InheritanceModifierContext,0)


        def parameterModifier(self):
            return self.getTypedRuleContext(KotlinParser.ParameterModifierContext,0)


        def platformModifier(self):
            return self.getTypedRuleContext(KotlinParser.PlatformModifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = KotlinParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_modifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3382
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113, 114, 115, 116, 117, 118]:
                self.state = 3374
                self.classModifier()
                pass
            elif token in [125, 130]:
                self.state = 3375
                self.memberModifier()
                pass
            elif token in [109, 110, 111, 112]:
                self.state = 3376
                self.visibilityModifier()
                pass
            elif token in [119, 120, 121, 122, 123, 124]:
                self.state = 3377
                self.functionModifier()
                pass
            elif token in [129]:
                self.state = 3378
                self.propertyModifier()
                pass
            elif token in [126, 127, 128]:
                self.state = 3379
                self.inheritanceModifier()
                pass
            elif token in [131, 132, 133]:
                self.state = 3380
                self.parameterModifier()
                pass
            elif token in [135, 136]:
                self.state = 3381
                self.platformModifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3387
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,523,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3384
                    self.match(KotlinParser.NL) 
                self.state = 3389
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,523,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeModifiers" ):
                listener.enterTypeModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeModifiers" ):
                listener.exitTypeModifiers(self)




    def typeModifiers(self):

        localctx = KotlinParser.TypeModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_typeModifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3391 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3390
                    self.typeModifier()

                else:
                    raise NoViableAltException(self)
                self.state = 3393 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,524,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeModifier" ):
                listener.enterTypeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeModifier" ):
                listener.exitTypeModifier(self)




    def typeModifier(self):

        localctx = KotlinParser.TypeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_typeModifier)
        self._la = 0 # Token type
        try:
            self.state = 3403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41, 43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3395
                self.annotation()
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3396
                self.match(KotlinParser.SUSPEND)
                self.state = 3400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3397
                    self.match(KotlinParser.NL)
                    self.state = 3402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(KotlinParser.ENUM, 0)

        def SEALED(self):
            return self.getToken(KotlinParser.SEALED, 0)

        def ANNOTATION(self):
            return self.getToken(KotlinParser.ANNOTATION, 0)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def INNER(self):
            return self.getToken(KotlinParser.INNER, 0)

        def VALUE(self):
            return self.getToken(KotlinParser.VALUE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModifier" ):
                listener.enterClassModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModifier" ):
                listener.exitClassModifier(self)




    def classModifier(self):

        localctx = KotlinParser.ClassModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_classModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3405
            _la = self._input.LA(1)
            if not(((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERRIDE(self):
            return self.getToken(KotlinParser.OVERRIDE, 0)

        def LATEINIT(self):
            return self.getToken(KotlinParser.LATEINIT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_memberModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifier" ):
                listener.enterMemberModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifier" ):
                listener.exitMemberModifier(self)




    def memberModifier(self):

        localctx = KotlinParser.MemberModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_memberModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3407
            _la = self._input.LA(1)
            if not(_la==125 or _la==130):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(KotlinParser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(KotlinParser.PRIVATE, 0)

        def INTERNAL(self):
            return self.getToken(KotlinParser.INTERNAL, 0)

        def PROTECTED(self):
            return self.getToken(KotlinParser.PROTECTED, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_visibilityModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilityModifier" ):
                listener.enterVisibilityModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilityModifier" ):
                listener.exitVisibilityModifier(self)




    def visibilityModifier(self):

        localctx = KotlinParser.VisibilityModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_visibilityModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3409
            _la = self._input.LA(1)
            if not(((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarianceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def OUT(self):
            return self.getToken(KotlinParser.OUT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_varianceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarianceModifier" ):
                listener.enterVarianceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarianceModifier" ):
                listener.exitVarianceModifier(self)




    def varianceModifier(self):

        localctx = KotlinParser.VarianceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_varianceModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3411
            _la = self._input.LA(1)
            if not(_la==104 or _la==107):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameterModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeParameterModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeParameterModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameterModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterModifiers" ):
                listener.enterTypeParameterModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterModifiers" ):
                listener.exitTypeParameterModifiers(self)




    def typeParameterModifiers(self):

        localctx = KotlinParser.TypeParameterModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_typeParameterModifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3414 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3413
                    self.typeParameterModifier()

                else:
                    raise NoViableAltException(self)
                self.state = 3416 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,527,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reificationModifier(self):
            return self.getTypedRuleContext(KotlinParser.ReificationModifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def varianceModifier(self):
            return self.getTypedRuleContext(KotlinParser.VarianceModifierContext,0)


        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterModifier" ):
                listener.enterTypeParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterModifier" ):
                listener.exitTypeParameterModifier(self)




    def typeParameterModifier(self):

        localctx = KotlinParser.TypeParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_typeParameterModifier)
        try:
            self.state = 3433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3418
                self.reificationModifier()
                self.state = 3422
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,528,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3419
                        self.match(KotlinParser.NL) 
                    self.state = 3424
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,528,self._ctx)

                pass
            elif token in [104, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3425
                self.varianceModifier()
                self.state = 3429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,529,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3426
                        self.match(KotlinParser.NL) 
                    self.state = 3431
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,529,self._ctx)

                pass
            elif token in [41, 43]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3432
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAILREC(self):
            return self.getToken(KotlinParser.TAILREC, 0)

        def OPERATOR(self):
            return self.getToken(KotlinParser.OPERATOR, 0)

        def INFIX(self):
            return self.getToken(KotlinParser.INFIX, 0)

        def INLINE(self):
            return self.getToken(KotlinParser.INLINE, 0)

        def EXTERNAL(self):
            return self.getToken(KotlinParser.EXTERNAL, 0)

        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionModifier" ):
                listener.enterFunctionModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionModifier" ):
                listener.exitFunctionModifier(self)




    def functionModifier(self):

        localctx = KotlinParser.FunctionModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_functionModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3435
            _la = self._input.LA(1)
            if not(((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(KotlinParser.CONST, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_propertyModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyModifier" ):
                listener.enterPropertyModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyModifier" ):
                listener.exitPropertyModifier(self)




    def propertyModifier(self):

        localctx = KotlinParser.PropertyModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_propertyModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3437
            self.match(KotlinParser.CONST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(KotlinParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(KotlinParser.FINAL, 0)

        def OPEN(self):
            return self.getToken(KotlinParser.OPEN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_inheritanceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceModifier" ):
                listener.enterInheritanceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceModifier" ):
                listener.exitInheritanceModifier(self)




    def inheritanceModifier(self):

        localctx = KotlinParser.InheritanceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_inheritanceModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3439
            _la = self._input.LA(1)
            if not(((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARARG(self):
            return self.getToken(KotlinParser.VARARG, 0)

        def NOINLINE(self):
            return self.getToken(KotlinParser.NOINLINE, 0)

        def CROSSINLINE(self):
            return self.getToken(KotlinParser.CROSSINLINE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterModifier" ):
                listener.enterParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterModifier" ):
                listener.exitParameterModifier(self)




    def parameterModifier(self):

        localctx = KotlinParser.ParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_parameterModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3441
            _la = self._input.LA(1)
            if not(((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReificationModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REIFIED(self):
            return self.getToken(KotlinParser.REIFIED, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_reificationModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReificationModifier" ):
                listener.enterReificationModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReificationModifier" ):
                listener.exitReificationModifier(self)




    def reificationModifier(self):

        localctx = KotlinParser.ReificationModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_reificationModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3443
            self.match(KotlinParser.REIFIED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlatformModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPECT(self):
            return self.getToken(KotlinParser.EXPECT, 0)

        def ACTUAL(self):
            return self.getToken(KotlinParser.ACTUAL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_platformModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatformModifier" ):
                listener.enterPlatformModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatformModifier" ):
                listener.exitPlatformModifier(self)




    def platformModifier(self):

        localctx = KotlinParser.PlatformModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_platformModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3445
            _la = self._input.LA(1)
            if not(_la==135 or _la==136):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.SingleAnnotationContext,0)


        def multiAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.MultiAnnotationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = KotlinParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
            if la_ == 1:
                self.state = 3447
                self.singleAnnotation()
                pass

            elif la_ == 2:
                self.state = 3448
                self.multiAnnotation()
                pass


            self.state = 3454
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,532,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3451
                    self.match(KotlinParser.NL) 
                self.state = 3456
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,532,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unescapedAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,0)


        def annotationUseSiteTarget(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationUseSiteTargetContext,0)


        def AT_NO_WS(self):
            return self.getToken(KotlinParser.AT_NO_WS, 0)

        def AT_PRE_WS(self):
            return self.getToken(KotlinParser.AT_PRE_WS, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_singleAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleAnnotation" ):
                listener.enterSingleAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleAnnotation" ):
                listener.exitSingleAnnotation(self)




    def singleAnnotation(self):

        localctx = KotlinParser.SingleAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_singleAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,534,self._ctx)
            if la_ == 1:
                self.state = 3457
                self.annotationUseSiteTarget()
                self.state = 3461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3458
                    self.match(KotlinParser.NL)
                    self.state = 3463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3464
                self.match(KotlinParser.AT_NO_WS)
                pass

            elif la_ == 3:
                self.state = 3465
                self.match(KotlinParser.AT_PRE_WS)
                pass


            self.state = 3468
            self.unescapedAnnotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def annotationUseSiteTarget(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationUseSiteTargetContext,0)


        def AT_NO_WS(self):
            return self.getToken(KotlinParser.AT_NO_WS, 0)

        def AT_PRE_WS(self):
            return self.getToken(KotlinParser.AT_PRE_WS, 0)

        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiAnnotation" ):
                listener.enterMultiAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiAnnotation" ):
                listener.exitMultiAnnotation(self)




    def multiAnnotation(self):

        localctx = KotlinParser.MultiAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_multiAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
            if la_ == 1:
                self.state = 3470
                self.annotationUseSiteTarget()
                self.state = 3474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3471
                    self.match(KotlinParser.NL)
                    self.state = 3476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3477
                self.match(KotlinParser.AT_NO_WS)
                pass

            elif la_ == 3:
                self.state = 3478
                self.match(KotlinParser.AT_PRE_WS)
                pass


            self.state = 3481
            self.match(KotlinParser.LSQUARE)
            self.state = 3483 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3482
                self.unescapedAnnotation()
                self.state = 3485 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & -17588927330817) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 2098175) != 0)):
                    break

            self.state = 3487
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationUseSiteTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def AT_NO_WS(self):
            return self.getToken(KotlinParser.AT_NO_WS, 0)

        def AT_PRE_WS(self):
            return self.getToken(KotlinParser.AT_PRE_WS, 0)

        def FIELD(self):
            return self.getToken(KotlinParser.FIELD, 0)

        def PROPERTY(self):
            return self.getToken(KotlinParser.PROPERTY, 0)

        def GET(self):
            return self.getToken(KotlinParser.GET, 0)

        def SET(self):
            return self.getToken(KotlinParser.SET, 0)

        def RECEIVER(self):
            return self.getToken(KotlinParser.RECEIVER, 0)

        def PARAM(self):
            return self.getToken(KotlinParser.PARAM, 0)

        def SETPARAM(self):
            return self.getToken(KotlinParser.SETPARAM, 0)

        def DELEGATE(self):
            return self.getToken(KotlinParser.DELEGATE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotationUseSiteTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationUseSiteTarget" ):
                listener.enterAnnotationUseSiteTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationUseSiteTarget" ):
                listener.exitAnnotationUseSiteTarget(self)




    def annotationUseSiteTarget(self):

        localctx = KotlinParser.AnnotationUseSiteTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_annotationUseSiteTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3489
            _la = self._input.LA(1)
            if not(_la==41 or _la==43):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3490
            _la = self._input.LA(1)
            if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 255) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3491
                self.match(KotlinParser.NL)
                self.state = 3496
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3497
            self.match(KotlinParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnescapedAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorInvocation(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorInvocationContext,0)


        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_unescapedAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnescapedAnnotation" ):
                listener.enterUnescapedAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnescapedAnnotation" ):
                listener.exitUnescapedAnnotation(self)




    def unescapedAnnotation(self):

        localctx = KotlinParser.UnescapedAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_unescapedAnnotation)
        try:
            self.state = 3501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,539,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3499
                self.constructorInvocation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3500
                self.userType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(KotlinParser.Identifier, 0)

        def ABSTRACT(self):
            return self.getToken(KotlinParser.ABSTRACT, 0)

        def ANNOTATION(self):
            return self.getToken(KotlinParser.ANNOTATION, 0)

        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def CATCH(self):
            return self.getToken(KotlinParser.CATCH, 0)

        def COMPANION(self):
            return self.getToken(KotlinParser.COMPANION, 0)

        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def CROSSINLINE(self):
            return self.getToken(KotlinParser.CROSSINLINE, 0)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def DYNAMIC(self):
            return self.getToken(KotlinParser.DYNAMIC, 0)

        def ENUM(self):
            return self.getToken(KotlinParser.ENUM, 0)

        def EXTERNAL(self):
            return self.getToken(KotlinParser.EXTERNAL, 0)

        def FINAL(self):
            return self.getToken(KotlinParser.FINAL, 0)

        def FINALLY(self):
            return self.getToken(KotlinParser.FINALLY, 0)

        def GET(self):
            return self.getToken(KotlinParser.GET, 0)

        def IMPORT(self):
            return self.getToken(KotlinParser.IMPORT, 0)

        def INFIX(self):
            return self.getToken(KotlinParser.INFIX, 0)

        def INIT(self):
            return self.getToken(KotlinParser.INIT, 0)

        def INLINE(self):
            return self.getToken(KotlinParser.INLINE, 0)

        def INNER(self):
            return self.getToken(KotlinParser.INNER, 0)

        def INTERNAL(self):
            return self.getToken(KotlinParser.INTERNAL, 0)

        def LATEINIT(self):
            return self.getToken(KotlinParser.LATEINIT, 0)

        def NOINLINE(self):
            return self.getToken(KotlinParser.NOINLINE, 0)

        def OPEN(self):
            return self.getToken(KotlinParser.OPEN, 0)

        def OPERATOR(self):
            return self.getToken(KotlinParser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(KotlinParser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(KotlinParser.OVERRIDE, 0)

        def PRIVATE(self):
            return self.getToken(KotlinParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(KotlinParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(KotlinParser.PUBLIC, 0)

        def REIFIED(self):
            return self.getToken(KotlinParser.REIFIED, 0)

        def SEALED(self):
            return self.getToken(KotlinParser.SEALED, 0)

        def TAILREC(self):
            return self.getToken(KotlinParser.TAILREC, 0)

        def SET(self):
            return self.getToken(KotlinParser.SET, 0)

        def VARARG(self):
            return self.getToken(KotlinParser.VARARG, 0)

        def WHERE(self):
            return self.getToken(KotlinParser.WHERE, 0)

        def FIELD(self):
            return self.getToken(KotlinParser.FIELD, 0)

        def PROPERTY(self):
            return self.getToken(KotlinParser.PROPERTY, 0)

        def RECEIVER(self):
            return self.getToken(KotlinParser.RECEIVER, 0)

        def PARAM(self):
            return self.getToken(KotlinParser.PARAM, 0)

        def SETPARAM(self):
            return self.getToken(KotlinParser.SETPARAM, 0)

        def DELEGATE(self):
            return self.getToken(KotlinParser.DELEGATE, 0)

        def FILE(self):
            return self.getToken(KotlinParser.FILE, 0)

        def EXPECT(self):
            return self.getToken(KotlinParser.EXPECT, 0)

        def ACTUAL(self):
            return self.getToken(KotlinParser.ACTUAL, 0)

        def CONST(self):
            return self.getToken(KotlinParser.CONST, 0)

        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def VALUE(self):
            return self.getToken(KotlinParser.VALUE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = KotlinParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3503
            _la = self._input.LA(1)
            if not(((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & -17588927330817) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 2098175) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = KotlinParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3505
            self.simpleIdentifier()
            self.state = 3516
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,541,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 3506
                        self.match(KotlinParser.NL)
                        self.state = 3511
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3512
                    self.match(KotlinParser.DOT)
                    self.state = 3513
                    self.simpleIdentifier() 
                self.state = 3518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,541,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





