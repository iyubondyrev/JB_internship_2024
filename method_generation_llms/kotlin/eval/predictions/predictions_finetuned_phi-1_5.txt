
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

fun box ( ) : String { val buffer = Buffer ( ) buffer . writeString ( "OK" ) return buffer . readString ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any } external open class Foo { open fun bar ( a : Any ) : Number open var baz : Any }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * val log = StringBuilder ( ) fun logged ( message : String , value : Int ) = value . also { log . append ( message ) } fun box ( ) : String { var sum = 0 for ( i in ( logged ( "" , 1 ) .. logged ( "" , 4 ) ) . reversed ( ) . reversed ( ) ) { sum = sum * 10 + i } assertEquals ( 0 , sum ) assertEquals ( "" , log . toString ( ) ) return "OK" }
package org . jetbrains . kotlinx . multik . ndarray . data import org . jetbrains . kotlinx . multik . ndarray . complex . ComplexDouble import org . jetbrains . kotlinx . multik . ndarray . complex . ComplexFloat import org . jetbrains . kotlinx . multik . ndarray . complex . JsComplexDouble import org . jetbrains . kotlinx . multik . ndarray . complex . JsComplexFloat import kotlin . jvm . JvmName @ JvmName ( "" ) public fun < T : Number , D : Dimension > MultiArray < T , D > . re ( ) : D1Array < Double > = mk . math . re ( this ) @ JvmName ( "" ) public fun < D : Dimension > MultiArray < Float , D > . re ( ) : D1Array < Float > = mk . math . re ( this ) @ JvmName ( "" ) public fun < D : Dimension
import kotlin . test . * val log = StringBuilder ( ) fun logged ( message : String , value : Int ) = value . also { log . append ( message ) } fun box ( ) : String { var sum = 0 for ( i in ( logged ( "" , 1 ) .. logged ( "" , 4 ) ) . reversed ( ) . reversed ( ) ) { sum = sum * 10 + i } assertEquals ( 0 , sum ) assertEquals ( "" , log . toString ( ) ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * fun box ( ) : String { val a = array ( arrayOf ( 1 , 2 , 3 ) ) val b = array ( arrayOf ( 4 , 3 , 2 ) ) val c = array ( arrayOf ( 1 , 2 , 3 ) ) assertFalse ( a < b ) assertFalse ( a < c ) assertTrue ( b < a ) assertTrue ( b < c ) assertTrue ( c < a ) return "OK" }
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R1 > build ( block : TestInterface < R1 > . ( ) -> Unit ) : R1 = TODO ( ) @ OptIn ( ExperimentalTypeInference :: class ) fun < R2 > build2 ( block : TestInterface < R2 > . ( ) -> Unit ) : R2 = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun < E > select ( vararg x : E ) = x [ 0 ] fun test ( ) { val ret = build { emit ( "1" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( get ( ) , getInv ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" )
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
import kotlin . test . * fun box ( ) : String { val list1 = ArrayList < Int > ( ) val range1 = ( 3 .. 5 ) . reversed ( ) for ( i in range1 ) { list1 . add ( i ) if ( list1 . size > 23 ) break } if ( list1 != listOf < Int > ( 5 , 4 , 3 ) ) { return "" } val list2 = ArrayList < Int > ( ) val range2 = ( 3 . toByte ( ) .. 5 . toByte ( ) ) . reversed ( ) for ( i in range2 ) { list2 . add ( i ) if ( list2 . size > 23 ) break } if ( list2 != listOf < Int > ( 5 , 4 , 3 ) ) { return "" } val list3 = ArrayList < Int > ( ) val range3 = ( 3 . toShort ( ) .. 5 . toShort
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) : U ? = x fun < E > select ( vararg x : E ) : E ? = x [ 0 ] fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( get ( ) , getInv ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( getInv ( ) , get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( getInv ( )
import kotlin . test . * import kotlin . native . internal . * import kotlin . reflect . * import kotlin . reflect . full . * import kotlin . reflect . jvm . internal . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds <EOL
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any } external open class Foo { open fun bar ( a : Any ) : Number open var baz : Any }
@ file : JvmName ( "" ) @ file : JvmMultifileClass package test import kotlinx . android . parcel . * import android . os . Parcel import android . os . Parcelable import java . util . Arrays @ Parcelize private object MyObject : Parcelable fun box ( ) = parcelTest { parcel -> MyObject . writeToParcel ( parcel , 0 ) val bytes = parcel . marshall ( ) parcel . unmarshall ( bytes , 0 , bytes . size ) parcel . setDataPosition ( 0 ) readFromParcel < MyObject > ( parcel ) }
fun main ( args : Array < String > ) { println ( args ) }
import org . jetbrains . kotlin . fir . FirElement import org . jetbrains . kotlin . fir . FirSession import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . declarations . utils . isInner import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir . declarations . utils . isOverride import org . jetbrains . kotlin . fir . declarations . utils . isStatic import org . jetbrains . kotlin . fir . declarations . utils . isSuspend import org . jetbrains . kotlin . fir . declarations . utils . isTailRec import org . jetbrains . kotlin . fir . declarations . utils . isInline import org . jetbrains . kotlin . fir . declarations . utils . isInfix import org . jetbrains . kotlin . fir . declarations . utils . isOperator
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
package org . jetbrains . kotlin . gradle . idea . proto . tcs import org . jetbrains . kotlin . gradle . idea . proto . Extras import org . jetbrains . kotlin . gradle . idea . proto . IdeaExtrasProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . ideaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . serialize . IdeaKotlinSourceDependencySerializer import org . jetbrains . kotlin . gradle . idea . tcs . IdeaKotlinSourceDependency import org . jetbrains . kotlin . gradle . idea . testFixtures . tcs . TestIdeaKotlinInstances import org . jetbrains . kotlin . gradle . idea . testFixtures . tcs . TestIde

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe .
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . api . asColumnGroup import org . jetbrains . kotlinx . dataframe . api . asDataColumn import org . jetbrains . kotlinx . dataframe . api . asDataFrame import org . jetbrains . kotlinx . dataframe . api . at import org . jetbrains . kotlinx . dataframe . api . by import org . jetbrains . kotlinx . dataframe . api . byName import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . byRow import org . jetbrains . kot

import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . api . asColumnGroup import org . jetbrains . kotlinx . dataframe . api . asDataColumn import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbr
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . api . asColumnGroup import org . jetbrains . kotlinx . dataframe . api . asDataColumn import org . jetbrains . kotlinx . dataframe . api . asDataFrame import org . jetbrains . kotlinx . dataframe . api . at import org . jetbrains . kotlinx . dataframe . api . by import org . jetbrains . kotlinx . dataframe . api . byName import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . byRow import org . jetbrains . kot
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . api . asColumnGroup import org . jetbrains . kotlinx . dataframe . api . asDataColumn import org . jetbrains . kotlinx . dataframe . api . at import org . jetbrains . kotlinx . dataframe . api . by import org . jetbrains . kotlinx . dataframe . api . byName import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbr
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . api . asColumnGroup import org . jetbrains . kotlinx . dataframe . api . asDataColumn import org . jetbrains . kotlinx . dataframe . api . at import org . jetbrains . kotlinx . dataframe . api . by import org . jetbrains . kotlinx . dataframe . api . byName import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . api . column . ColumnGroup import org . jetbrains . kotlinx . dataframe . api . column . ColumnPath import org . jetbrains . kotlinx . dataframe . api . column . SingleColumn import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslG
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . api . asColumnGroup import org . jetbrains . kotlinx . dataframe . api . asDataColumn import org . jetbrains . kotlinx . dataframe . api . asDataFrame import org . jetbrains . kotlinx . dataframe . api . at import org . jetbrains . kotlinx . dataframe . api . by import org . jetbrains . kotlinx . dataframe . api . byName import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . byRow import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . api . asColumnGroup import org . jetbrains . kotlinx . dataframe . api . asDataColumn import org . jetbrains . kotlinx . dataframe . api . at import org . jetbrains . kotlinx . dataframe . api . by import org . jetbrains . kotlinx . dataframe . api . byName import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx












@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * val log = StringBuilder ( ) fun logged ( message : String , value : Int ) = value . also { log . append ( message ) } fun box ( ) : String { var sum = 0 for ( i in ( logged ( "" , 1 ) .. logged ( "" , 4 ) ) . reversed ( ) . reversed ( ) ) { sum = sum * 10 + i } assertEquals ( 0 , sum ) assertEquals ( "" , log . toString ( ) ) return "OK" }

import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . api . col import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNotNull import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import kot
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any ? get ( ) = definedExternally set ( value ) = definedExternally var boo : String ? get ( ) = definedExternally set ( value
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . AnyColumnReference import org . jetbrains . kotlinx . dataframe . ColumnsSelector import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Ind
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }


import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . declarations . utils . * import org . jetbrains . kotlin . fir . diagnostics . * import org . jetbrains . kotlin . fir . expressions . * import org . jetbrains . kotlin . fir . references . * import org . jetbrains . kotlin . fir . resolve . * import org . jetbrains . kotlin . fir . resolve . calls . * import org . jetbrains . kotlin . fir . symbols . impl . * import org . jetbrains . kotlin . fir . types . * import org . jetbrains . kotlin . fir . types . impl . ConeClassLikeTypeImpl import org . jetbrains . kotlin . fir . types . impl . FirImplicitTypeRefImplWithoutSource import org . jetbrains . kotlin . fir . types . impl . FirQualifierPartImpl import org . jetbrains . kotlin
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface SnackbarManager external interface SnackRepo
@ Deprecated ( message = "" , level = DeprecationLevel . ERROR ) fun foo ( ) { }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

fun main ( ) { val ( train , test ) = fashionMnist ( ) val ( newTrain , validation ) = train . split ( 0 ) lenet5 ( ) . use { it . compile ( optimizer = SGD ( learningRate = 0 ) , loss = Losses . SOFT_MAX_CROSS_ENTROPY_WITH_LOGITS , metric = Accuracy ( ) ) it . logSummary ( ) it . fit ( trainingDataset = newTrain , validationDataset = validation , epochs = EPOCHS , trainBatchSize = TRAINING_BATCH_SIZE , validationBatchSize = TEST_BATCH_SIZE ) it . save ( File ( "" ) , SavingFormat . JsonConfigCustomVariables ( ) , writingMode = WritingMode . OVERRIDE ) } }



import java . util . List ; public class A < E > extends PersistentList < E > { @ Override public E get ( int index ) { return null ; } @ Override public int size ( ) { return 0 ; } @ Override public boolean isEmpty ( ) { return false ; } @ Override public boolean contains ( Object o ) { return false ; } @ Override public E get ( int index ) { return null ; } @ Override public int indexOf ( Object o ) { return 0 ; } @ Override public int lastIndexOf ( Object o ) { return 0 ; } @ NotNull @ Override public ListIterator < E > listIterator ( ) { return null ; } @ NotNull @ Override public ListIterator < E > listIterator ( int index ) { return null ; } @ NotNull

package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . KtFakeSourceElementKind import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kot

package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . KtFakeSourceElementKind import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kot
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInline import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir
import java . util . List ; public class A { public static < E > PersistentList ( E x ) { return null ; } public static < E > PersistentList ( java . util . List < E > x ) { return null ; } } fun test ( ) { A . < ! OVERLOAD_RESOLUTION_AMBIGUITY ! > clear < ! > ( ) }

package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . AnyColumnReference import org . jetbrains . kotlinx . dataframe . ColumnsSelector import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . KtFakeSourceElementKind import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kot
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . KtFakeSourceElementKind import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kot





class AxisParametersWithSetter { var x : String ? = null set ( value ) { field = value } var y : String ? = null set ( value ) { field = value } }







@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }
import com . intellij . openapi . project . Project import com . intellij . openapi . util . ModificationTracker import com . intellij . openapi . vfs . StandardFileSystems import com . intellij . openapi . vfs . VirtualFile import com . intellij . openapi . vfs . VirtualFileManager import com . intellij . openapi . vfs . impl . jar . CoreJarFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJarFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtVirtualFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtVirtualFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtVirtualFileSystemImpl <EOL
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .
import com . intellij . openapi . project . Project import com . intellij . openapi . util . Key import com . intellij . openapi . vfs . StandardFileSystems import com . intellij . openapi . vfs . VirtualFile import com . intellij . openapi . vfs . VirtualFileManager import com . intellij . openapi . vfs . impl . jar . CoreJarFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJarFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtVirtualFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtVirtualFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtVirtualFileSystemImpl import com
import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . KtSourceElement import org . jetbrains . kotlin . fir . FirElement import org . jetbrains . kotlin . fir . FirModuleData import org . jetbrains . kotlin . fir . expressions . FirAnnotation import org . jetbrains . kotlin . fir . expressions . FirExpression import org . jetbrains . kotlin . fir . references . FirControlFlowGraphReference import org . jetbrains . kotlin . fir . symbols . impl . FirImportSymbol import org . jetbrains . kotlin . fir . types . ConeClassLikeType import org . jetbrains . kotlin . fir . types . FirTypeRef import org . jetbrains . kotlin . fir . visitors . FirTransformer import org . jetbrains . kotlin . fir . visitors . FirVisitor import org . jetbrains . kotlin . name . FqName import org
import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . KtNodeTypes . IMPORT_DIRECTIVE import org . jetbrains . kotlin . KtNodeTypes . IMPORT_LAST_NAME import org . jetbrains . kotlin . KtNodeTypes . IMPORT_LAST_BUT_ONE_NAME import org . jetbrains . kotlin . KtNodeTypes . PACKAGE_DIRECTIVE import org . jetbrains . kotlin . KtNodeTypes . PRIMARY_CONSTRUCTOR import org . jetbrains . kotlin . KtNodeTypes . PRIMARY_CONSTRUCTOR_DELEGATION_CALL import org . jetbrains . kotlin . KtNodeTypes . SECONDARY_CONSTRUCTOR import org . jetbrains . kotlin . KtNodeTypes . SECONDARY_CONSTRUCTOR_DELEGATION_CALL import org . jetbrains . kotlin . KtNodeTypes . SUPER_TYPE <EOL
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . * import com . intellij . psi . tree . TokenSet import com . intellij . psi . util . PsiTreeUtil import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kot
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . k
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . * import com . intellij . psi . tree . TokenSet import com . intellij . psi . util . PsiTreeUtil import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kot
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . * import com . intellij . psi . tree . TokenSet import com . intellij . psi . util . PsiTreeUtil import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kot
import org . jetbrains . kotlin . KtSourceElement import org . jetbrains . kotlin . fir . FirElement import org . jetbrains . kotlin . fir . types . ConeKotlinType import org . jetbrains . kotlin . fir . types . FirTypeRef import org . jetbrains . kotlin . fir . visitors . FirTransformer import org . jetbrains . kotlin . fir . visitors . FirVisitor abstract class FirAnnotation : FirElement { abstract override val source : KtSourceElement ? @ UnresolvedExpressionTypeAccess abstract override val coneTypeOrNull : ConeKotlinType ? abstract override val annotations : List < FirAnnotation > abstract val useSiteTarget : AnnotationUseSiteTarget ? abstract val annotationTypeRef : FirTypeRef override fun < R , D > accept ( visitor : FirVisitor < R , D > , data : D ) : R = visitor . visitAnnotation ( this , data ) @ Suppress ( "UNCHECKED_CAST" ) <EOL
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .
import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . KtSourceElement import org . jetbrains . kotlin . fir . builder . FirBuilderDsl import org . jetbrains . kotlin . fir . expressions . FirAnnotation import org . jetbrains . kotlin . fir . expressions . FirExpression import org . jetbrains . kotlin . fir . expressions . FirPropertyAccessExpression import org . jetbrains . kotlin . fir . expressions . impl . FirPropertyAccessExpressionImpl import org . jetbrains . kotlin . fir . types . ConeKotlinType import org . jetbrains . kotlin . fir . types . FirTypeRef import org . jetbrains . kotlin . fir . visitors . FirTransformer import org . jetbrains . kotlin . fir . visitors . FirVisitor import org . jetbrains . kotlin . fir . visitors . transformInplace @ OptIn ( FirImplementationDetail :: cla
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .
import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . KtSourceElement import org . jetbrains . kotlin . fir . FirElement import org . jetbrains . kotlin . fir . expressions . FirAnnotation import org . jetbrains . kotlin . fir . expressions . FirExpression import org . jetbrains . kotlin . fir . visitors . FirTransformer import org . jetbrains . kotlin . fir . visitors . FirVisitor abstract class FirErrorPrimaryConstructor : FirConstructor ( ) , FirDiagnosticHolder { abstract override val source : KtSourceElement ? abstract override val annotations : List < FirAnnotation > abstract override val moduleData : FirModuleData abstract override val origin : FirDeclarationOrigin abstract override val attributes : FirDeclarationAttributes abstract override val typeParameters : List < FirTypeParameterRef > abstract override val status : FirDeclarationStatus abstract override val returnTypeRef : FirTypeRef abstract override val receiverParameter :
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .

import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . KtSourceElement import org . jetbrains . kotlin . fir . FirElement import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . expressions . FirAnnotation import org . jetbrains . kotlin . fir . expressions . FirExpression import org . jetbrains . kotlin . fir . symbols . impl . FirAnonymousInitializerSymbol import org . jetbrains . kotlin . fir . types . ConeClassLikeType import org . jetbrains . kotlin . fir . types . FirTypeRef import org . jetbrains . kotlin . fir . visitors . FirTransformer import org . jetbrains . kotlin . fir . visitors . FirVisitor import org . jetbrains . kotlin . name . Name import org . jetbrains . kotlin . serialization . deserialization . descriptors . Deserialized
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .
package org . jetbrains . kotlin . fir . expressions import org . jetbrains . kotlin . KtSourceElement import org . jetbrains . kotlin . fir . FirElement import org . jetbrains . kotlin . fir . types . ConeKotlinType import org . jetbrains . kotlin . fir . types . FirTypeRef import org . jetbrains . kotlin . fir . visitors . FirTransformer import org . jetbrains . kotlin . fir . visitors . FirVisitor abstract class FirTypeOperatorCall : FirExpression ( ) { abstract override val source : KtSourceElement ? @ UnresolvedExpressionTypeAccess abstract override val coneTypeOrNull : ConeKotlinType ? abstract override val annotations : List < FirAnnotation > abstract val operation : FirOperation abstract val conversionTypeRef : FirTypeRef override fun < R , D > accept ( visitor : FirVisitor < R , D > , data : D ) : R = visitor . visitTypeOperatorCall
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . * import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . psi . util . PsiTreeUtil import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . KtNodeTypes . VALUE_PARAMETER import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . name . Name import org . jetbrains . kotlin . psi . * import org . jetbrains . kotlin . psi . psiUtil . endOffset import org . jetbrains . kotlin . psi . psiUtil . startOffsetSkippingComments import org . jetbrains . kotlin . psi2ir . endOffsetOrUndefined import org .
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . * import com . intellij . psi . tree . TokenSet import com . intellij . psi . util . PsiTreeUtil import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kot
import com . intellij . psi . * import org . jetbrains . kotlin . asJava . classes . lazyPub import org . jetbrains . kotlin . asJava . elements . KtLightAbstractAnnotation import org . jetbrains . kotlin . asJava . elements . KtLightDeclaration import org . jetbrains . kotlin . light . classes . symbol . * import org . jetbrains . kotlin . light . classes . symbol . annotations . AnnotationsBox import org . jetbrains . kotlin . light . classes . symbol . annotations . GranularAnnotationsBox import org . jetbrains . kotlin . light . classes . symbol . annotations . SymbolAnnotationsProvider import org . jetbrains . kotlin . light . classes . symbol . annotations . annotationsBox import org . jetbrains . kotlin . light . classes . symbol . classes . SymbolLightClassBase import org . jetbrains . kotlin . light . classes . symbol . classes . SymbolLightClassForInterfaceDefaultImpls import org . jetbrain
import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . PROPERTY_KEYWORD import org . jetbrains . kotlin . lexer . KtTokens . PROTECTED_KEYWORD import org . jetbrains . kotlin . lexer . KtTokens . PUBLIC_KEYWORD import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VAL_KEYWORD import org . jetbrains . kotlin . lexer .

import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .

import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .

package org . jetbrains . kotlin . fir . expressions import org . jetbrains . kotlin . KtSourceElement import org . jetbrains . kotlin . fir . FirElement import org . jetbrains . kotlin . fir . types . ConeKotlinType import org . jetbrains . kotlin . fir . visitors . FirTransformer import org . jetbrains . kotlin . fir . visitors . FirVisitor abstract class FirPropertyAccessExpression : FirQualifiedAccessExpression ( ) { @ UnresolvedExpressionTypeAccess abstract override val coneTypeOrNull : ConeKotlinType ? abstract override val annotations : List < FirAnnotation > abstract override val calleeReference : FirReference abstract override val contextReceiverArguments : List < FirExpression > abstract override val typeArguments : List < FirTypeProjection > abstract override val explicitReceiver : FirExpression ? abstract override val dispatchReceiver : FirExpression ? abstract override val extensionReceiver : FirExpression ? abstract
import com . intellij . openapi . project . Project import com . intellij . psi . search . GlobalSearchScope import org . jetbrains . kotlin . analysis . low . level . api . fir . project . structure . LLFirLibrarySymbolProviderFactory import org . jetbrains . kotlin . analysis . low . level . api . fir . project . structure . LLFirModuleData import org . jetbrains . kotlin . analysis . low . level . api . fir . providers . LLFirModuleWithDependenciesSymbolProvider import org . jetbrains . kotlin . analysis . project . structure . KtBinaryModule import org . jetbrains . kotlin . analysis . project . structure . KtDanglingFileModule import org . jetbrains . kotlin . analysis . project . structure . KtModule import org . jetbrains . kotlin . analysis . project . structure . KtSourceModule import org . jetbrains . kotlin . analysis . project . structure . computeTransitiveDependsOnDependencies <EOL
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . * import com . intellij . psi . tree . TokenSet import com . intellij . psi . util . PsiTreeUtil import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kot
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .
package org . jetbrains . kotlin . fir . expressions import org . jetbrains . kotlin . KtSourceElement import org . jetbrains . kotlin . fir . FirElement import org . jetbrains . kotlin . fir . types . ConeKotlinType import org . jetbrains . kotlin . fir . types . FirTypeRef import org . jetbrains . kotlin . fir . visitors . FirTransformer import org . jetbrains . kotlin . fir . visitors . FirVisitor abstract class FirPropertyAccessExpression : FirQualifiedAccessExpression ( ) { @ UnresolvedExpressionTypeAccess abstract override val coneTypeOrNull : ConeKotlinType ? abstract override val annotations : List < FirAnnotation > abstract override val calleeReference : FirReference abstract override val contextReceiverArguments : List < FirExpression > abstract override val typeArguments : List < FirTypeProjection > abstract override val explicitReceiver : FirExpression ? abstract override val dispatchReceiver :
package org . jetbrains . kotlin . fir . expressions import org . jetbrains . kotlin . KtSourceElement import org . jetbrains . kotlin . fir . FirElement import org . jetbrains . kotlin . fir . types . ConeKotlinType import org . jetbrains . kotlin . fir . types . FirTypeRef import org . jetbrains . kotlin . fir . visitors . FirTransformer import org . jetbrains . kotlin . fir . visitors . FirVisitor abstract class FirTypeOperatorCall : FirExpression ( ) { abstract override val source : KtSourceElement ? @ UnresolvedExpressionTypeAccess abstract override val coneTypeOrNull : ConeKotlinType ? abstract override val annotations : List < FirAnnotation > abstract override val argumentList : FirArgumentList abstract val operation : FirOperation abstract val conversionTypeRef : FirTypeRef override fun < R , D > accept ( visitor : FirVisitor < R , D > , data : D )
package org . jetbrains . kotlin . fir . expressions import org . jetbrains . kotlin . KtSourceElement import org . jetbrains . kotlin . fir . FirElement import org . jetbrains . kotlin . fir . types . ConeKotlinType import org . jetbrains . kotlin . fir . types . FirTypeRef import org . jetbrains . kotlin . fir . visitors . FirTransformer import org . jetbrains . kotlin . fir . visitors . FirVisitor abstract class FirTypeOperatorCall : FirExpression ( ) { abstract override val source : KtSourceElement ? @ UnresolvedExpressionTypeAccess abstract override val coneTypeOrNull : ConeKotlinType ? abstract override val annotations : List < FirAnnotation > abstract val operation : FirOperation abstract val argument : FirExpression abstract val conversionTypeRef : FirTypeRef override fun < R , D > accept ( visitor : FirVisitor < R , D > , data : D ) : R =
package org . jetbrains . kotlin . fir . expressions import org . jetbrains . kotlin . KtSourceElement import org . jetbrains . kotlin . fir . FirElement import org . jetbrains . kotlin . fir . types . ConeKotlinType import org . jetbrains . kotlin . fir . types . FirTypeRef import org . jetbrains . kotlin . fir . visitors . FirTransformer import org . jetbrains . kotlin . fir . visitors . FirVisitor abstract class FirTypeOperatorCall : FirExpression ( ) { abstract override val source : KtSourceElement ? @ UnresolvedExpressionTypeAccess abstract override val coneTypeOrNull : ConeKotlinType ? abstract override val annotations : List < FirAnnotation > abstract override val argumentList : FirArgumentList abstract val operation : FirOperation abstract val conversionTypeRef : FirTypeRef override fun < R , D > accept ( visitor : FirVisitor < R , D > , data : D )
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org .
package org . jetbrains . kotlin . fir . expressions import org . jetbrains . kotlin . KtSourceElement import org . jetbrains . kotlin . fir . FirElement import org . jetbrains . kotlin . fir . types . ConeKotlinType import org . jetbrains . kotlin . fir . types . FirTypeRef import org . jetbrains . kotlin . fir . visitors . FirTransformer import org . jetbrains . kotlin . fir . visitors . FirVisitor abstract class FirFunctionCall : FirQualifiedAccessExpression ( ) { abstract override val source : KtSourceElement ? @ UnresolvedExpressionTypeAccess abstract override val coneTypeOrNull : ConeKotlinType ? abstract override val annotations : List < FirAnnotation > abstract override val calleeReference : FirNamedReference abstract override val typeArguments : List < FirTypeProjection > abstract override val explicitReceiver : FirExpression ? abstract override val dispatchReceiver : FirExpression ?
import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . util . diff . FlyweightCapableTreeStructure import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrain
import com . intellij . psi . tree . IElementType import com . intellij . psi . tree . TokenSet import com . intellij . psi . tree . TokenSet import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin .

import kotlinx . io . * import kotlinx . io . bytestring . ByteString import kotlinx . io . bytestring . decodeToString import kotlinx . io . bytestring . encodeToByteString import kotlin . test . * private const val SEGMENT_SIZE = Segment . SIZE class BufferSourceTest : AbstractBufferedSourceTest ( SourceFactory . BUFFER ) class RealBufferedSourceTest : AbstractBufferedSourceTest ( SourceFactory . REAL_BUFFERED_SOURCE ) class OneByteAtATimeBufferedSourceTest : AbstractBufferedSourceTest ( SourceFactory . ONE_BYTE_AT_A_TIME_BUFFERED_SOURCE ) class PeekBufferTest : AbstractBufferedSourceTest ( SourceFactory . PEEK_BUFFER ) class PeekBufferedSourceTest : AbstractBufferedSourceTest ( SourceFactory . PEEK_BUFFERED_SOURCE ) class PeekBufferedSourceTest : AbstractBufferedSourceTest ( SourceFactory . REAL_BUFFERED_SOURCE ) abstract class AbstractBufferedSource

import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
package kotlinx . collections . immutable . implementations . immutableMap import kotlinx . collections . immutable . ImmutableCollection import kotlinx . collections . immutable . ImmutableSet import kotlinx . collections . immutable . PersistentMap import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMap import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilder import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilderEntries import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilderValue import kotlinx . collections . immutable . internal . EndOfChain import kotlinx . collections . immutable . internal . assert internal class PersistentHashMapBuilder < K , V > ( private var keys : PersistentHashSet < K > , private var values : PersistentHashSet < V > , private var presenceArray : IntArray , private var hashArray : IntArray , private var node : TrieNode < K , V > ) : PersistentMap . Builder
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbrains . kotlin
@ SinceKotlin ( "1.4" ) public fun ULongProgression . firstOrNull ( ) : ULong ? = if ( this . first == ULong . MAX_VALUE ) null else this . first
@ SinceKotlin ( "1.4" ) public fun ULongProgression . firstOrNull ( predicate : ( ULong ) -> Boolean ) : ULong ? { for ( element in this ) if ( predicate ( element ) ) return element return null }
fun takeUInt ( u : UInt ) { } fun test ( ) { takeUInt ( 0 ) }
package kotlinx . collections . immutable . implementations . immutableMap import kotlinx . collections . immutable . ImmutableCollection import kotlinx . collections . immutable . ImmutableSet import kotlinx . collections . immutable . PersistentMap import kotlinx . collections . immutable . implementations . persistentHashMap . PersistentHashMap import kotlinx . collections . immutable . implementations . persistentHashMap . PersistentHashMapBuilder import kotlinx . collections . immutable . implementations . persistentMap . PersistentHashMapBuilderEntries import kotlinx . collections . immutable . implementations . persistentMap . PersistentHashMapBuilderRemove import kotlinx . collections . immutable . implementations . persistentMap . PersistentHashMapBuilderPut import kotlinx . collections . immutable . implementations . persistentMap . PersistentHashMapBuilderPutValue import kotlinx . collections . immutable . implementations . persistentOrderedMap . PersistentOrderedMap import kotlinx . collections . immutable . implementations . persistentOrderedMap . PersistentOrderedMapBuilder import kotlinx . collection
@ SinceKotlin ( "1.4" ) public fun ULongProgression . lastOrNull ( ) : ULong ? { if ( isEmpty ( ) ) return null var last = this . last ( ) for ( i in 1 .. this . lastIndex ) { val e = this . get ( i ) if ( e >= last ) { last = e } } return last }
import kotlin . collections . * import kotlin . test . * fun box ( ) : String { val progression = ULongProgression . fromClosedRange ( 0 , 0 , 0 ) if ( progression . lastOrNull ( ) != 0 ) return "" return "OK" }
import kotlin . random . * import kotlin . test . * import kotlin . native . concurrent . * import kotlin . native . internal . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import k
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ SinceKotlin ( "1.4" ) public fun UIntRange . randomOrNull ( ) : UInt ? = if ( isEmpty ( ) ) null else random ( ) @ SinceKotlin ( "1.4" ) public fun ULongRange . randomOrNull ( ) : ULong ? = if ( isEmpty ( ) ) null else random ( ) @ SinceKotlin ( "1.4" ) public fun ULongRange . randomOrNull ( ) : ULong ? = if ( isEmpty ( ) ) null else randomOrNull ( )
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = Int . MIN_VALUE .. Int . MAX_VALUE for ( i in intProgression step Int . MAX_VALUE ) { intList += i } assertEquals ( listOf ( Int . MIN_VALUE ) , intList ) val uintList = mutableListOf < UInt > ( ) val uintProgression = 0 .. 0 for ( i in uintProgression step 0 ) { uintList += i } assertEquals ( listOf ( 0 ) , uintList ) val ulongList = mutableListOf < ULong > ( ) val ulongProgression = 0 .. 0 for ( i in ulongProgression step 0 ) { ulongList += i } assertEquals ( listOf ( 0 ) , ulongList ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit @ nativeGetter operator fun get ( s : String ) : Any ? <EOL
@ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public operator fun UIntRange . contains ( value : UShort ) : Boolean @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public operator fun UIntRange . contains ( value : ULong ) : Boolean
@ SinceKotlin ( "1.4" ) public actual fun ULongRange ( start : ULong , endInclusive : ULong ) : ULongRange { return ULongRange ( start , endInclusive ) } @ SinceKotlin ( "1.4" ) public actual fun ULongRange ( start : ULong , end : ULong ) : ULongRange { return ULongRange ( start , end ) } @ SinceKotlin ( "1.4" ) public actual fun ULongRange ( start : ULong , endInclusive : ULong ) : ULongRange { return ULongRange ( start , endInclusive ) }
@ SinceKotlin ( "1.4" ) public actual fun < T : Comparable < T > > Array < out T > . sort ( ) : Unit { } @ SinceKotlin ( "1.4" ) public actual fun ByteArray . sort ( ) : Unit { } @ SinceKotlin ( "1.4" ) public actual fun ShortArray . sort ( ) : Unit { } @ SinceKotlin ( "1.4" ) public actual fun IntArray . sort ( ) : Unit { } @ SinceKotlin ( "1.4" ) public actual fun LongArray . sort ( ) : Unit { } @ SinceKotlin ( "1.4" ) public actual fun FloatArray . sort ( ) : Unit { } @ SinceKotlin ( "1.4" ) public actual fun DoubleArray . sort ( ) : Unit { }
@ SinceKotlin ( "1.4" ) public actual fun UIntRange ( start : UInt , endInclusive : UInt ) : UIntRange { return UIntRange ( start , endInclusive ) } @ SinceKotlin ( "1.4" ) public actual fun ULongRange ( start : ULong , endInclusive : ULong ) : ULongRange { return ULongRange ( start , endInclusive ) }
@ SinceKotlin ( "1.4" ) public actual fun < T : Comparable < T > > Array < out T > . sort ( ) : Unit { } @ SinceKotlin ( "1.4" ) public actual fun ByteArray . sort ( ) : Unit { } @ SinceKotlin ( "1.4" ) public actual fun ShortArray . sort ( ) : Unit { } @ SinceKotlin ( "1.4" ) public actual fun IntArray . sort ( ) : Unit { } @ SinceKotlin ( "1.4" ) public actual fun LongArray . sort ( ) : Unit { } @ SinceKotlin ( "1.4" ) public actual fun FloatArray . sort ( ) : Unit { } @ SinceKotlin ( "1.4" ) public actual fun DoubleArray . sort ( ) : Unit { }
@ SinceKotlin ( "1.4" ) public actual fun UIntRange . contains ( value : UInt ) : Boolean = value in this @ SinceKotlin ( "1.4" ) public actual fun ULongRange . contains ( value : ULong ) : Boolean = value in this





import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) @ OverloadResolutionByLambdaReturnType @ kotlin . jvm . JvmName ( "" ) public fun ULongProgression . reversed ( ) : ULongProgression = ULongProgression ( this . start , this . endInclusive , this . step ) @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public fun UIntProgression . reversed ( ) : UIntProgression = UIntProgression ( this . start , this . endInclusive , this . step ) @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public fun ULongProgression . reversed ( ) : ULongProgression = ULongProgression ( this . start , this . endInclusive , this . step )
@ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULongProgression . step ( step : Int ) : ULongProgression
package kotlinx . collections . immutable . implementations . immutableMap import kotlinx . collections . immutable . ImmutableCollection import kotlinx . collections . immutable . ImmutableSet import kotlinx . collections . immutable . PersistentMap import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMap import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilder import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilderEntries import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilderRemove import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilderPut import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilderRemove import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilderPutValue import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilderValue import kotlinx . collections . immutable . implementations .

@ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . until ( to : ULong ) : ULongRange @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun UByte . until ( to : UByte ) : UByteRange @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun UShort . until ( to : UShort ) : UShortRange
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ SinceKotlin ( "1.4" ) public infix fun Byte . until ( to : Byte ) : IntRange { return this . toInt ( ) . until ( to . toInt ( ) ) } @ SinceKotlin ( "1.4" ) public infix fun Short . until ( to : Short ) : IntRange { return this . toInt ( ) . until ( to . toInt ( ) ) } @ SinceKotlin ( "1.4" ) public infix fun Byte . until ( to : Byte ) : IntRange { return this . toInt ( ) . until ( to . toInt ( ) ) } @ SinceKotlin ( "1.4" ) public infix fun Short . until ( to : Short ) : IntRange { return this . toInt ( ) . until ( to . toInt ( ) ) } @ SinceKotlin ( "1.4" ) public infix fun Byte . until ( to : Byte ) : IntRange { return this . toInt ( ) . until ( to . toInt ( ) )


















@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong { open fun pong ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *





@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface FooInterface { fun methodWithOutArgs ( ) fun methodWithString ( s : String ) : String fun methodWithManyArgs ( n : Number , settings : Bar ) : Boolean } external open class Bar
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class OnHeapDataset
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class OnHeapDataset
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
@ SinceKotlin ( "1.4" ) public actual fun < T > Array < out T > . elementAt ( index : Int ) : T { return get ( index ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *


import kotlin . test . * import kotlinx . cinterop . * import kotlin . native . concurrent . * import kotlin . native . internal . * import kotlin . test . assertEquals import kotlin . test . assertFalse import kotlin . test . assertTrue import kotlin . test . assertNull import kotlin . test . assertSame import kotlin . test . assertSame import kotlin . test . assertSame import kotlin . test . assertTrue import kotlin . test . assertFalse import kotlin . test . assertNull import kotlin . test . assertSame import kotlin . test . assertTrue import kotlin . test . assertTrue import kotlin . test . assertFalse import kotlin . test . assertNull import kotlin . test . assertSame import kotlin . test . assertTrue import kotlin . test . assertFalse import kotlin . test . assertTrue
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong { open fun pong ( ) : String }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirRegularClassSymbol import org . jetbrains . kot

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *



package org . jetbrains . kotlin . gradle . plugin . mpp import org . jetbrains . kotlin . gradle . dsl . multiplatformExtension import org . jetbrains . kotlin . gradle . dsl . multiplatformExtensionOrNull import org . jetbrains . kotlin . gradle . plugin . KotlinCompilation import org . jetbrains . kotlin . gradle . plugin . KotlinPluginLifecycle import org . jetbrains . kotlin . gradle . plugin . KotlinSourceSet import org . jetbrains . kotlin . gradle . plugin . await import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinMetadataTarget import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinNativeTarget import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinSharedNativeCompilation import org . jetbrains . kotlin . gradle . plugin . sources . awaitPlatformCompil
import org . jetbrains . kotlin . analysis . api . KtAnalysisSession import org . jetbrains . kotlin . analysis . api . types . KtClassType import org . jetbrains . kotlin . analysis . api . types . KtNonErrorClassType import org . jetbrains . kotlin . analysis . api . types . KtType import org . jetbrains . kotlin . analysis . api . types . KtTypeMappingMode import org . jetbrains . kotlin . asJava . classes . lazyPub import org . jetbrains . kotlin . asJava . elements . KtLightDeclaration import org . jetbrains . kotlin . asJava . elements . KtLightField import org . jetbrains . kotlin . asJava . elements . KtLightMethod import org . jetbrains . kotlin . asJava . elements . KtLightModifierList import org . jetbrains . kotlin . asJava . elements . KtLightParameter import org . jetbrains .



import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; import org . jetbrains . annotations . Nullable ; import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; import org . jetbrains . annotations . Nullable ; import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; import org . jet
package org . jetbrains . kotlin . gradle . idea . proto . tcs import org . jetbrains . kotlin . gradle . idea . proto . Extras import org . jetbrains . kotlin . gradle . idea . proto . IdeaExtrasProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . ideaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . serialize . IdeaKotlinSourceDependencySerializer import org . jetbrains . kotlin . gradle . idea . tcs . IdeaKotlinSourceDependency import org . jetbrains . kotlin . gradle . idea . tcs . IdeaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . tcs . IdeaKotlinSourceDependency
import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * public external interface WebGLContextAttributes { var alpha : Boolean ? get ( ) = definedExternally set ( value ) = definedExternally var depth : Boolean ? get ( ) = definedExternally set ( value ) = definedExternally var stencil : Boolean ? get ( ) = definedExternally set ( value ) = definedExternally var antialias : Boolean ? get ( ) = definedExternally set ( value ) = definedExternally var premultipliedAlpha : Boolean ? get ( ) = definedExternally set ( value ) = definedExternally var preserveDrawingBuffer : Boolean ? get ( ) = definedExternally set ( value ) = definedExternally var preferLowPowerToHighPerformance : Boolean ? get ( ) = definedExternally set ( value ) = definedExternally var failIfMajorPerformanceCaveat : Boolean ? get
import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
import org . gradle . api . * import org . gradle . api . file . * import org . gradle . api . provider . * import org . gradle . api . tasks . * import org . gradle . kotlin . dsl . * import org . jetbrains . kotlin . gradle . dsl . * import org . jetbrains . kotlin . gradle . plugin . * import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_NATIVE_USE_XCODE_MESSAGE_STYLE import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_USE_XCODE_MESSAGE_STYLE import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_USE_XCODE_STYLE import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_USE

import org . gradle . api . provider . Provider import org . gradle . api . provider . ProviderFactory import org . gradle . api . tasks . * import org . gradle . work . DisableCachingByDefault import org . jetbrains . kotlin . gradle . dsl . KotlinJvmProjectExtension import org . jetbrains . kotlin . gradle . dsl . KotlinMultiplatformExtension import org . jetbrains . kotlin . gradle . dsl . KotlinTopLevelExtension import org . jetbrains . kotlin . gradle . plugin . KotlinCompilation import org . jetbrains . kotlin . gradle . plugin . KotlinSourceSet import org . jetbrains . kotlin . gradle . plugin . KotlinTarget import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinAndroidTarget import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinJvmAndroidCompilationFactory import org . jetbrain
import kotlin . reflect . KClass import kotlin . reflect . KProperty import kotlin . reflect . KType import kotlin . reflect . KTypeProjection import kotlin . reflect . KVariance import kotlin . reflect . full . createType import kotlin . reflect . full . starProjectedType import kotlin . reflect . full . withNullability import kotlin . reflect . jvm . internal . KTypeImpl import kotlin . reflect . jvm . internal . KotlinReflectionInternalError import kotlin . reflect . jvm . internal . asKCallableImpl import kotlin . reflect . jvm . internal . asKPropertyImpl import kotlin . reflect . jvm . internal . asKProperty0Impl import kotlin . reflect . jvm . internal . asKProperty1Impl import kotlin . reflect . jvm . internal . asKTypeImpl import kotlin . reflect . jvm . internal . asKTypeProjectionImpl import kotlin . reflect


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo { open fun bar ( ) : String companion object { fun bar ( ) : String } }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

@ SinceKotlin ( "1.4" ) public actual fun println ( message : Any ? ) { System . out . println ( message ) }
@ SinceKotlin ( "1.4" ) public actual fun println ( message : Any ? ) { System . out . println ( message ) }
@ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Float ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Double ) { System . out . print ( message ) }
@ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Short ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Int ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Long ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Float ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Double ) { System . out . print ( message )
@ SinceKotlin ( "1.4" ) public actual fun println ( message : Any ? ) { System . out . println ( message ) }
@ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Int ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Long ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Float ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Double ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Boolean ) { System . out . print ( message )
@ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public inline fun print ( message : Int ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public inline fun print ( message : Long ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public inline fun print ( message : Float ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public inline fun print ( message : Double ) { System . out . print ( message ) }
import kotlin . test . * fun box ( ) : String { assertEquals ( "" , 0 . toString ( ) ) return "OK" }
@ SinceKotlin ( "1.2" ) @ kotlin . internal . InlineOnly public inline fun print ( message : Float ) @ SinceKotlin ( "1.2" ) @ kotlin . internal . InlineOnly public inline fun print ( message : Int ) @ SinceKotlin ( "1.2" ) @ kotlin . internal . InlineOnly public inline fun print ( message : Long ) @ SinceKotlin ( "1.2" ) @ kotlin . internal . InlineOnly public inline fun print ( message : Short ) @ SinceKotlin ( "1.2" ) @ kotlin . internal . InlineOnly public inline fun print ( message : Byte )
@ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Int ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Long ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Float ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Double ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun print ( message : Boolean ) { System . out . print ( message )
@ SinceKotlin ( "1.4" ) public actual fun println ( ) : Unit { System . out . println ( message ) }
@ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Long ) @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Float ) @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Double ) @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Boolean ) @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Char ) @
@ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun println ( message : Float ) : Unit = System . out . println ( message ) @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) public fun println ( message : Double ) : Unit = System . out . println ( message )
@ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Short ) @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Int ) @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Long ) @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Float ) @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Double ) @
@ SinceKotlin ( "1.4" ) public actual fun println ( message : String ) { System . out . println ( message ) }
@ SinceKotlin ( "1.4" ) public actual fun println ( message : String ) { System . out . println ( message ) }
@ SinceKotlin ( "1.4" ) public actual fun println ( ) { }
import kotlin . test . * fun box ( ) : String { assertEquals ( "" , 0 . toString ( ) ) return "OK" }
@ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Float ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Int ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Long ) { System . out . print ( message ) } @ SinceKotlin ( "1.4" ) @ WasExperimental ( ExperimentalStdlibApi :: class ) @ kotlin . internal . InlineOnly public inline fun println ( message : Short ) { System . out . print ( message )
@ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public inline fun println ( message : ShortArray ) @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public inline fun println ( message : IntArray ) @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public inline fun println ( message : LongArray ) @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public inline fun println ( message : FloatArray ) @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public inline fun println ( message : DoubleArray ) @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public inline fun println ( message : BooleanArray ) @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public inline fun println ( message : CharArray )
import java . io . * fun box ( ) : String { return roundtrip ( Sam { s -> s + "K" } ) . get ( "O" ) } fun < T > roundtrip ( x : T ) : T { val out1 = ByteArrayOutputStream ( ) ObjectOutputStream ( out1 ) . writeObject ( x ) return ObjectInputStream ( ByteArrayInputStream ( out1 . toByteArray ( ) ) ) . readObject ( ) as T } import java . io . * ; public interface Sam extends Serializable { String get ( String s ) ; }


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import java . io . * fun box ( ) : String { return roundtrip ( Sam { s -> s + "K" } ) . get ( "O" ) } fun < T > roundtrip ( x : T ) : T { val out1 = ByteArrayOutputStream ( ) ObjectOutputStream ( out1 ) . writeObject ( x ) return ObjectInputStream ( ByteArrayInputStream ( out1 . toByteArray ( ) ) ) . readObject ( ) as T } import java . io . * ; public interface Sam extends Serializable { String get ( String s ) ; }
import org . jetbrains . kotlinx . dl . api . inference . FlatShape import org . jetbrains . kotlinx . dl . api . inference . facealignment . Landmark import org . jetbrains . kotlinx . dl . api . inference . objectdetection . DetectedObject import org . jetbrains . kotlinx . dl . api . inference . posedetection . DetectedPose import org . jetbrains . kotlinx . dl . api . preprocessing . Operation import org . jetbrains . kotlinx . dl . api . preprocessing . pipeline import org . jetbrains . kotlinx . dl . impl . preprocessing . image . ColorMode import org . jetbrains . kotlinx . dl . impl . preprocessing . image . convert import org . jetbrains . kotlinx . dl . impl . preprocessing . image . resize import org . jetbrains . kotlinx . dl . impl . preprocessing . image . toFloatArray import org

package org . jetbrains . kotlin . analysis . low . level . api . fir . test . configurators import com . intellij . openapi . Disposable import com . intellij . openapi . util . Disposer import org . jetbrains . kotlin . analysis . low . level . api . fir . test . configurators . AnalysisApiFirSourceTestConfigurator import org . jetbrains . kotlin . analysis . low . level . api . fir . test . configurators . AnalysisApiFirScriptTestConfigurator import org . jetbrains . kotlin . analysis . low . level . api . fir . test . configurators . AnalysisApiFirSourceTestConfiguratorFactory import org . jetbrains . kotlin . analysis . test . framework . base . AbstractAnalysisApiBasedTest import org . jetbrains . kotlin . analysis . test . framework . project . structure . KtTestModule import org . jetbrains . kotlin . analysis . test . framework . test . configurators . Analysi

fun forKlib ( ) : Iterable < CompiledDependency < KLIB > > = emptyList ( )
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
import org . jetbrains . kotlin . cli . common . arguments . K2JVMCompilerArguments import org . jetbrains . kotlin . cli . jvm . config . JvmClasspathRoot import org . jetbrains . kotlin . cli . jvm . config . JvmModulePathRoot import org . jetbrains . kotlin . cli . jvm . config . JvmTarget import org . jetbrains . kotlin . cli . jvm . config . JvmTarget . JVM_1_6 import org . jetbrains . kotlin . cli . jvm . config . JvmTarget . JVM_1_8 import org . jetbrains . kotlin . cli . jvm . config . JvmTarget . JVM_9 import org . jetbrains . kotlin . cli . jvm . config . JvmTarget . JVM_10 import org . jetbrains . kotlin . cli . jvm . config . JvmTarget . JVM_11 import org .

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlinx . dl . api . core . shape . shape import org . junit . jupiter . api . Assertions . assertEquals import org . junit . jupiter . api . Test import org . tensorflow . Shape import org . tensorflow . op . Ops private const val EPS = 0 private const val FAN_IN = 2 private const val FAN_OUT = 4 private const val SEED = 0 private const val DEFAULT_LAYER_NAME = "" internal class HeUniformTest { @ Test fun initialize ( ) { val actual = Array ( 2 ) { FloatArray ( 2 ) { 0 } } val expected = Array ( 2 ) { FloatArray ( 2 ) { 0 } } expected [ 0 ] [ 0 ] = 0 expected [ 0 ] [ 1 ] = 0 expected [ 1 ] [ 0 ] = 0 expected [ 1 ] [ 1 ] =
import kotlinx . html . a import kotlinx . html . div import kotlinx . html . span import kotlinx . html . stream . createHTML import org . gradle . testkit . runner . BuildResult import org . gradle . testkit . runner . TaskOutcome import org . gradle . util . GradleVersion import org . jetbrains . kotlin . gradle . testbase . * import org . junit . jupiter . api . DisplayName import org . junit . jupiter . params . ParameterizedTest import org . junit . jupiter . params . provider . Arguments import org . junit . jupiter . params . provider . ArgumentsProvider import org . junit . jupiter . params . provider . ArgumentsSource import java . io . File import kotlin . test . assertEquals import kotlin . test . assertNotNull import kotlin . test . assertTrue @ DisplayName ( "" ) @ AndroidGradlePluginTest

package kotlinx . kover . gradle . plugin . appliers import kotlinx . kover . gradle . plugin . appliers . instrumentation . instrument import kotlinx . kover . gradle . plugin . appliers . instrumentation . instrumentation import kotlinx . kover . gradle . plugin . appliers . origin . AndroidVariantOrigin import kotlinx . kover . gradle . plugin . appliers . origin . JvmVariantOrigin import kotlinx . kover . gradle . plugin . appliers . origin . AllVariantOrigins import kotlinx . kover . gradle . plugin . appliers . origin . AndroidAndJvmVariantOrigin import kotlinx . kover . gradle . plugin . appliers . origin . JvmAndAndroidVariantOrigin import kotlinx . kover . gradle . plugin . appliers . origin . AllVariantOrigins . JvmAndAndroid import kotlinx . kover . gradle . plugin . appliers . origin . JvmAndAndroidVariantOrigin .

import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlin



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlinx . collections . immutable . PersistentList import kotlinx . collections . immutable . toImmutableList import kotlinx . collections . immutable . toPersistentList import kotlinx . benchmark . * @ State ( Scope . Benchmark ) open class Set { @ Param ( BM_1 , BM_10 , BM_100 , BM_1000 , BM_10000 , BM_100000 , BM_1000000 ) var size : Int = 0 @ Param ( HASH_IMPL , ORDERED_IMPL ) var implementation = "" @ Param ( ASCENDING_HASH_CODE , RANDOM_HASH_CODE , COLLISION_HASH_CODE , NON_EXISTING_HASH_CODE ) var hashCodeType = "" @ Param ( IP_100 , IP_99_09 , IP_95 , IP_70 , IP_50 , IP_30 , IP_0 ) var immutablePercentage : Double = 0.0 private var builder = persistentListOf < String > (

import org . jetbrains . dokka . base . testApi . testRunner . BaseAbstractTest import org . jetbrains . dokka . links . DRI import org . jetbrains . dokka . model . DisplaySourceSet import org . jetbrains . dokka . model . dfs import org . jetbrains . dokka . model . withDescendants import org . jetbrains . dokka . pages . ContentPage import org . jetbrains . dokka . pages . ContentStyle import org . jetbrains . dokka . pages . ContentStyle . RowTitle import org . jetbrains . dokka . pages . RowTitle import kotlin . test . Test import kotlin . test . assertEquals class RowTitleTest : BaseAbstractTest ( ) { private val configuration = dokkaConfiguration { sourceSets { sourceSet { sourceRoots = listOf ( "src/" ) classpath += jvmStdlibPath ! ! } } }
package org . jetbrains . kotlin . gradle . idea . proto . generated . tcs ; @ kotlin . jvm . JvmName ( "" ) inline fun ideaKotlinClasspathProto ( block : org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinClasspathProtoKt . Dsl . ( ) -> kotlin . Unit ) : org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinClasspathProto = org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinClasspathProtoKt . Dsl . _create ( this . toBuilder ( ) ) . apply { block ( ) } . _build ( ) object IdeaKotlinClasspathProtoKt { @ kotlin . OptIn ( com . google . protobuf . kotlin . OnlyForUseByGeneratedProtoCode :: class ) @ com . google . protobuf . kotlin .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong { open fun pong ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong { open fun pong ( ) : String }
package org . jetbrains . kotlin . gradle . idea . proto . tcs import org . jetbrains . kotlin . gradle . idea . proto . Extras import org . jetbrains . kotlin . gradle . idea . proto . IdeaExtrasProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . ideaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . tcs . IdeaKotlinSourceDependency import org . jetbrains . kotlin . gradle . idea . testFixtures . tcs . TestIdeaKotlinInstances import org . jetbrains . kotlin . gradle . idea . testFixtures . tcs . TestIdeaKotlinInstances . simpleProject import org . jetbrains . kotlin . gradle . idea . testFixtures .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
package org . jetbrains . kotlin . konan . test . blackbox . support . settings import org . jetbrains . kotlin . konan . test . blackbox . AbstractNativeSimpleTest import org . jetbrains . kotlin . konan . test . blackbox . support . LoggedData import org . jetbrains . kotlin . konan . test . blackbox . support . compilation . TestCompilationArtifact import org . jetbrains . kotlin . konan . test . blackbox . support . compilation . TestCompilationResult . Companion . assertSuccess import org . jetbrains . kotlin . konan . test . blackbox . support . group . TestCaseGroupProvider import org . jetbrains . kotlin . konan . test . blackbox . support . settings . Timeouts import org . jetbrains . kotlin . konan . test . blackbox . support . util . DEFAULT_MODULE_NAME import org . jetbrains . kotlin . konan . test . blackbox . support .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
import kotlinx . kover . gradle . plugin . appliers . origin . AndroidVariantOrigin import kotlinx . kover . gradle . plugin . appliers . origin . JvmVariantOrigin import kotlinx . kover . gradle . plugin . appliers . origin . AllVariantOrigins import kotlinx . kover . gradle . plugin . appliers . origin . AndroidVariantOrigin import kotlinx . kover . gradle . plugin . appliers . origin . JvmVariantOrigin import kotlinx . kover . gradle . plugin . appliers . origin . AllVariantOrigins . JvmAndAndroid import kotlinx . kover . gradle . plugin . appliers . origin . AllVariantOrigins import kotlinx . kover . gradle . plugin . appliers . origin . AndroidOnly import kotlinx . kover . gradle . plugin . appliers . origin . AllVariantOrigins . AndroidOnly import kotlinx . kover . gradle . plugin . appliers . origin .
fun box ( ) : String { return """""" . trimIndent ( ) }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class GrandParent ( description : String ) external open class Parent ( description : String ) : GrandParent external open class Child ( description : String ) : Parent
import kotlin . test . * import kotlin . native . internal . * import kotlin . reflect . * import kotlin . reflect . full . * import kotlin . reflect . jvm . * import kotlin . reflect . jvm . internal . * import kotlin . reflect . jvm . internal . calls . * import kotlin . reflect . jvm . internal . calls . Caller import kotlin . reflect . jvm . internal . calls . createCaller import kotlin . reflect . jvm . internal . calls . model . * import kotlin . reflect . jvm . internal . calls . results . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . seconds <EOL











@ Throws ( Throwable :: class ) fun foo ( ) { }


import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . modules . * import java . util . Date import java . text . SimpleDateFormat object DateAsLongSerializer : KSerializer < Date > { override val descriptor : SerialDescriptor get ( ) = PrimitiveSerialDescriptor ( "" , PrimitiveKind . LONG ) override fun serialize ( encoder : Encoder , value : Date ) = encoder . encodeLong ( value . time ) override fun deserialize ( decoder : Decoder ) : Date = Date ( decoder . decodeLong ( ) ) } object DateAsStringSerializer : KSerializer < Date > { override val descriptor : SerialDescriptor get ( ) = PrimitiveSerialDescriptor ( "" , PrimitiveKind . STRING )
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > } }
import kotlin . experimental . ExperimentalNativeApi import kotlin . native . internal . GCUnsafeCall import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native .
import kotlin . experimental . ExperimentalNativeApi import kotlin . native . internal . GCUnsafeCall import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . IntrinsicType import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . IntrinsicType . * import kotlin . native . internal . TypedIntrinsic . IntrinsicType . * import kotlin . native . internal . TypedIntrinsic . IntrinsicType . * import kotlin . native . internal . TypedIntrinsic . IntrinsicType . * import kotlin . native . internal . TypedIntrinsic . IntrinsicType . * import kotlin . native . internal . TypedIntrinsic . IntrinsicType . * import kotlin . native . internal . TypedIntrinsic . IntrinsicType . * import kotlin . native . internal . Typ
import kotlin . experimental . ExperimentalNativeApi import kotlin . native . internal . GCUnsafeCall import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native .
import kotlin . experimental . ExperimentalNativeApi import kotlin . native . internal . GCUnsafeCall import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . IntrinsicType import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal
import kotlin . test . * val sb = StringBuilder ( ) fun printInt ( x : Int ) = sb . appendLine ( x . toString ( ) ) fun printLong ( x : Long ) = sb . appendLine ( x . toString ( ) ) fun printBoolean ( x : Boolean ) = sb . appendLine ( x . toString ( ) ) fun printByte ( x : Byte ) = sb . appendLine ( x . toString ( ) ) fun printShort ( x : Short ) = sb . appendLine ( x . toString ( ) ) fun printChar ( x : Char ) = sb . appendLine ( x . toString ( ) ) fun printFloat ( x : Float ) = sb . appendLine ( x . toString ( ) ) fun printDouble ( x : Double ) = sb . appendLine ( x . toString ( ) ) fun printUByte ( x : UByte ) = sb . appendLine ( x . toString ( ) ) fun printUShort ( x : UShort ) = sb . appendLine
import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . experimental . ExperimentalNativeApi import kotlin . native . concurrent . * import kotlin . native . internal . * import kotlin . native . internal . test . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds @ OptIn ( ExperimentalNativeApi :: class ) class DecodeStringTest { @ Test fun test ( ) { val buffer = Buffer ( ) buffer . writeString ( "" ) assertEquals ( "" , buffer . readString ( ) ) } }




@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlinx . serialization . * import kotlinx . serialization . builtins . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . test . * import kotlin . reflect . * import kotlin . test . * @ Serializable abstract class AbstractSerializable { @ Serializable abstract class ToDoSerializer : KSerializer < ToDo > { override val descriptor : SerialDescriptor get ( ) = PrimitiveSerialDescriptor ( "" , PrimitiveKind . STRING ) override fun deserialize ( decoder : Decoder ) : ToDo { TODO ( ) } override fun serialize ( encoder : Encoder , value : ToDo ) { TODO ( ) } } @ Serializable @ SerialName ( ""



import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . modules . * import java . util . Date object DateAsLongSerializer : KSerializer < Date > { override val descriptor : SerialDescriptor = PrimitiveSerialDescriptor ( "" , PrimitiveKind . LONG ) override fun serialize ( encoder : Encoder , value : Date ) = encoder . encodeLong ( value . time ) override fun deserialize ( decoder : Decoder ) : Date = Date ( decoder . decodeLong ( ) ) } object DateAsDoubleSerializer : KSerializer < Date > { override val descriptor : SerialDescriptor = PrimitiveSerialDescriptor ( "" , PrimitiveKind . DOUBLE ) override fun serialize ( encoder : Encoder , value : Date ) = encoder
import kotlinx . serialization . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization .
import kotlinx . serialization . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . test . * import kotlin . test . * class CharSerializerTest : JsonTestBase ( ) { @ Serializable data class CharWrapper ( val c : Char ) @ Serializable data class StringWrapper ( val s : String ) private val module = SerializersModule { polymorphic ( Char :: class ) { subclass ( Char . MIN_VALUE . toChar ( ) ) subclass ( Char . MAX_VALUE . toChar ( ) ) } } private val json = Json { serializersModule = module } @ Test fun testChar ( ) = parametrizedTest { assertEquals ( "" , json . encodeToString ( CharWrapper . serializer ( ) ,
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . modules . * import java . util . Date object DateAsLongSerializer : KSerializer < Date > { override val descriptor : SerialDescriptor = PrimitiveSerialDescriptor ( "" , PrimitiveKind . LONG ) override fun serialize ( encoder : Encoder , value : Date ) = encoder . encodeLong ( value . time ) override fun deserialize ( decoder : Decoder ) : Date = Date ( decoder . decodeLong ( ) ) } object DateAsDoubleSerializer : KSerializer < Date > { override val descriptor : SerialDescriptor = PrimitiveSerialDescriptor ( "" , PrimitiveKind . DOUBLE ) override fun serialize ( encoder : Encoder , value : Date ) = encoder
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlinx . serialization . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . protobuf . * import kotlinx . serialization . protobuf . internal . * import kotlinx . serialization . test . * import kotlin . jvm . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds class ProtoCompatibilityTest { @ Serializable data class Holder ( @ ProtoNumber ( 1 ) val a : Int , @ ProtoNumber ( 2 ) val b : Int , @ ProtoNumber ( 3 ) val c
import kotlinx . serialization . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . protobuf . * import kotlinx . serialization . test . * import kotlin . jvm . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . days import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlinx . serialization . * import kotlinx . serialization . descriptor
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . modules . * import java . math . BigDecimal import java . text . SimpleDateFormat object DateAsLongSerializer : KSerializer < Date > { override val descriptor : SerialDescriptor = PrimitiveSerialDescriptor ( "" , PrimitiveKind . LONG ) override fun serialize ( encoder : Encoder , value : Date ) = encoder . encodeLong ( value . time ) override fun deserialize ( decoder : Decoder ) : Date = Date ( decoder . decodeLong ( ) ) } object BigDecimalAsLongSerializer : KSerializer < BigDecimal > { override val descriptor : SerialDescriptor = PrimitiveSerialDescriptor ( "" , PrimitiveKind . LONG ) override fun serialize
import kotlinx . serialization . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
package kotlin . collections import kotlin . js . * import kotlin . ranges . contains import kotlin . ranges . reversed public actual fun < T > Array < out T > . elementAt ( index : Int ) : T { return elementAtOrElse ( index ) { throw IndexOutOfBoundsException ( "" ) } } public actual fun ByteArray . elementAt ( index : Int ) : Byte { return elementAtOrElse ( index ) { throw IndexOutOfBoundsException ( "" ) } } public actual fun ShortArray . elementAt ( index : Int ) : Short { return elementAtOrElse ( index ) { throw IndexOutOfBoundsException ( "" ) } } public actual fun IntArray . elementAt ( index : Int ) : Int { return elementAtOrElse ( index ) { throw IndexOutOfBoundsException ( "" ) } } public actual fun LongArray . elementAt ( index : Int ) : Long { return elementAtOrElse ( index ) { throw IndexOutOfB


import org . jetbrains . dokka . base . testApi . testRunner . BaseAbstractTest import kotlin . test . Test import kotlin . test . assertEquals class CustomTagWrapperTest : BaseAbstractTest ( ) { private val configuration = dokkaConfiguration { sourceSets { sourceSet { sourceRoots = listOf ( "src/" ) classpath += jvmStdlibPath ! ! } } } @ Test fun `should support custom tag` ( ) { testInline ( """""" . trimIndent ( ) , configuration ) { documentablesTransformationStage = { module -> val functions = module . packages . flatMap { it . classlikes } . flatMap { it . functions } assertEquals ( 2 , functions . size ) assertEquals ( "" , functions [ 0 ] . name ) assertEquals ( "" , functions [ 1 ] . name ) } } } }
import org . jetbrains . dokka . base . testApi . testRunner . BaseAbstractTest import org . jetbrains . dokka . model . Documentable import org . jetbrains . dokka . model . InheritedMember import org . jetbrains . dokka . model . properties . WithExtraProperties import org . jetbrains . dokka . pages . ContentPage import org . jetbrains . dokka . pages . ContentStyle import org . jetbrains . dokka . pages . ContentText import kotlin . test . Test import kotlin . test . assertEquals class ContentForDescriptionTest : BaseAbstractTest ( ) { private val testConfiguration = dokkaConfiguration { sourceSets { sourceSet { sourceRoots = listOf ( "src/" ) classpath += jvmStdlibPath ! ! } } } @ Test fun `full description` ( ) { testInline ( """""" . trimIndent ( ) , testConfiguration








@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface A { fun foo ( ) : String } external interface B { fun foo ( ) : String } external interface C { fun foo ( ) : String }


import org . jetbrains . kotlinx . dl . api . core . shape . shape import org . jetbrains . kotlinx . dl . api . core . shape . toLongArray import org . junit . jupiter . api . Assertions . assertEquals import org . junit . jupiter . api . Test import org . tensorflow . EagerSession import org . tensorflow . Shape import org . tensorflow . op . Ops private const val EPS = 0 private const val FAN_IN = 2 private const val FAN_OUT = 4 private const val SEED = 0 private const val DEFAULT_LAYER_NAME = "" internal class HeUniformTest { @ Test fun initialize ( ) { val actual = Array ( 2 ) { FloatArray ( 2 ) { 0 } } val expected = Array ( 2 ) { FloatArray ( 2 ) { 0 } } expected [ 0 ] [ 0 ] = 0 <EOL
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlinx . dl . api . core . Sequential import org . jetbrains . kotlinx . dl . api . core . activation . Activations import org . jetbrains . kotlinx . dl . api . core . initializer . Constant import org . jetbrains . kotlinx . dl . api . core . initializer . HeNormal import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . Conv2D import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . core . Dense import org . jetbrains . kotlinx . dl . api . core . layer . core . Input import org . jetbrains . kotlinx . dl . api . core . layer . pooling . AvgPool2D import org . jetbrains . kotlinx . dl

import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import java . util . Date import java . text . SimpleDateFormat object DateAsLongSerializer : KSerializer < Date > { override val descriptor : SerialDescriptor = PrimitiveSerialDescriptor ( "" , PrimitiveKind . LONG ) override fun serialize ( encoder : Encoder , value : Date ) = encoder . encodeLong ( value . time ) override fun deserialize ( decoder : Decoder )
@ Throws ( Throwable :: class ) fun foo ( ) { } fun box ( ) : String { try { foo ( ) } catch ( e : Throwable ) { return "OK" } return "" }
@ file : JvmName ( "" ) @ file : JvmMultifileClass package kotlinx . coroutines . flow import kotlinx . coroutines . * import kotlinx . coroutines . flow . internal . * import kotlin . jvm . * import kotlin . reflect . * import kotlinx . coroutines . flow . internal . unsafeFlow as flow public suspend fun < T > Flow < T > . toList ( ) : List < T > = toCollection ( ArrayList < T > ( ) ) public suspend fun < T > Flow < T > . toSet ( ) : Set < T > = toCollection ( LinkedHashSet < T > ( ) ) public suspend fun < T > Flow < T > . toHashSet ( ) : HashSet < T > = toCollection ( HashSet < T > ( ) ) public suspend fun < T > Flow < T > . toMutableSet ( ) : MutableSet < T > = toCollection ( LinkedHashSet < T > ( ) ) public suspend
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . modules . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . test . * import kotlin . reflect . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . days import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import k
fun test ( ) { println ( "" ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }






package org . jetbrains . kotlinx . dl . impl . preprocessing . image import java . awt . image . BufferedImage public fun interface Convert { public fun invoke ( source : BufferedImage ) : BufferedImage } public fun interface Rotate { public fun invoke ( source : BufferedImage ) : BufferedImage } public fun interface resize { public fun invoke ( source : BufferedImage ) : BufferedImage } public fun interface grayscale { public fun invoke ( source : BufferedImage ) : BufferedImage } public fun interface color { public fun invoke ( source : BufferedImage ) : BufferedImage } public fun interface convert { public fun invoke ( source : BufferedImage ) : BufferedImage } public fun interface rotate { public fun invoke ( source : BufferedImage ) : BufferedImage } public fun interface resize { public fun invoke ( source : BufferedImage ) : BufferedImage } public fun interface grayscaleAndColor {
package org . jetbrains . kotlinx . dl . impl . preprocessing . image import org . jetbrains . kotlinx . dl . api . core . shape . TensorShape import org . jetbrains . kotlinx . dl . api . preprocessing . Operation import org . jetbrains . kotlinx . dl . api . preprocessing . pipeline import org . jetbrains . kotlinx . dl . impl . preprocessing . image . ColorMode import org . jetbrains . kotlinx . dl . impl . preprocessing . image . convert import org . jetbrains . kotlinx . dl . impl . preprocessing . image . toFloatArray import org . jetbrains . kotlinx . dl . impl . preprocessing . rescale import org . jetbrains . kotlinx . dl . impl . summary . logSummary import java . awt . image . BufferedImage import java . io . File public class Convert ( public var colorMode : ColorMode = ColorMode .
fun box ( ) : String { val image = floatArrayOf ( 0 , 0 , 0 ) val ( r , g , b ) = image return if ( r == 0 && g == 0 && b == 0 ) "OK" else "fail" }




enum class ColorMode { RGB , RGBA , BGR , }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
import org . jetbrains . kotlin . library . metadata . KlibMetadataProtoBuf import org . jetbrains . kotlin . metadata . ProtoBuf import org . jetbrains . kotlin . metadata . deserialization . BinaryVersion import org . jetbrains . kotlin . metadata . deserialization . NameResolverImpl import org . jetbrains . kotlin . metadata . deserialization . getExtensionOrNull import org . jetbrains . kotlin . name . ClassId import org . jetbrains . kotlin . name . FqName import org . jetbrains . kotlin . name . Name import org . jetbrains . kotlin . serialization . SerializerExtensionProtocol import org . jetbrains . kotlin . serialization . deserialization . getClassId import org . jetbrains . kotlin . test . FirParser import org . jetbrains . kotlin . test . TargetBackend import org . jetbrains . kotlin . test . backend
package org . jetbrains . kotlin . gradle . idea . proto . tcs import org . jetbrains . kotlin . gradle . idea . proto . Extras import org . jetbrains . kotlin . gradle . idea . proto . IdeaExtrasProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . ideaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . serialize . IdeaKotlinExtrasSerializer import org . jetbrains . kotlin . gradle . idea . serialize . IdeaKotlinExtrasSerializer . IdeaKotlinSourceDependency import org . jetbrains . kotlin . gradle . idea . serialize . IdeaKotlinExtrasSerializer . IdeaKotlinSourceDependencyProto import org . jetbrains . kotlin .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { var x : Number var y : Number var z : Number var r : Number var g : Number var b : Number var alpha : Number ? get ( ) = definedExternally set ( value ) =
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external fun __promisify__ ( path : String ) : Promise < Unit > external fun __promisify__ ( path : Buffer ) : Promise < Unit > external fun __promisify__ ( path : URL ) : Promise < Unit >


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlin . load . kotlin . FacadeClassSource import org . jetbrains . kotlin . metadata . ProtoBuf import org . jetbrains . kotlin . metadata . deserialization . BinaryVersion import org . jetbrains . kotlin . metadata . deserialization . NameResolverImpl import org . jetbrains . kotlin . metadata . deserialization . TypeTable import org . jetbrains . kotlin . metadata . deserialization . VersionRequirementTable import org . jetbrains . kotlin . metadata . deserialization . getExtensionOrNull import org . jetbrains . kotlin . metadata . jvm . JvmProtoBuf import org . jetbrains . kotlin . metadata . jvm . JvmProtoBuf . StringTableTypes . Record import org . jetbrains . kotlin . metadata . jvm . JvmProtoBuf . StringTableTypes . Record . Operation . * import org . jetbrains . kotlin . metadata . jvm


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . annotations . NotNull ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import javax . annotation . Nonnull ; import javax . annotation . meta . TypeQualifierNickname ; import javax . annotation . meta . When ; @ Target ( { ElementType . TYPE_USE } ) @ Retention ( RetentionPolicy . RUNTIME ) @ Documented @ Nonnull ( when = When . MAYBE ) @ TypeQualifierNickname public @ interface Nullable { } import org . jetbrains . annotations . NotNull ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import javax . annotation . Nonnull ; import javax . annotation . meta . TypeQualifierNickname
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
import kotlin . experimental . ExperimentalTypeInference fun < K > FlowCollector < K > . bar ( ) : K = null as K fun < K > FlowCollector < K > . foo ( ) : K = null as K fun < K > K . bar3 ( ) : K = null as K fun < K > K . foo3 ( ) : K = null as K fun bar2 ( ) : Int = 1 fun foo2 ( ) : Float = 0 val bar4 : Int get ( ) = 1 var foo4 : Float get ( ) = 0 set ( value ) { } val < K > FlowCollector < K > . bar5 : K get ( ) = null as K val < K > FlowCollector < K > . foo5 : K get ( ) = null as K class Foo6 class Foo7 < T > fun foo7 ( ) = null as Foo7 < Int > interface FlowCollector < in T > { } fun < L > flow ( block : suspend FlowCollector
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . native . concurrent . * import kotlin . test . * import kotlin . native . internal . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . *
import kotlin . reflect . KClass import kotlin . reflect . KType import kotlin . reflect . KTypeParameter import kotlin . reflect . KType import kotlin . test . assertEquals import kotlin . test . assertNotEquals import kotlin . test . assertTrue import kotlin . test . assertNull import kotlin . test . assertNotNull import kotlin . test . assertSame import kotlin . test . assertTrue import kotlin . test . assertTrue import kotlin . test . assertFalse import kotlin . test . assertFalse import kotlin . test . assertFails import kotlin . test . assertFailsWith import kotlin . test . assertFailsWith import kotlin . test . assertNotNull import kotlin . test . assertNull import kotlin . test . assertTrue import kotlin . test . assertTrue import kotlin . test . assertTrue import kot
import kotlinx . cinterop . * import kotlin . test . * import objcTests . * import kotlin . native . concurrent . * import kotlin . native . internal . * import kotlin . native . internal . test . * import objcTests . * import kotlin . native . concurrent . * import kotlin . native . internal . test . * import objcTests . * import kotlin . native . internal . test . * import objcTests . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native .













import org . jetbrains . dokka . base . testApi . testRunner . BaseAbstractTest import org . jetbrains . dokka . links . DRI import org . jetbrains . dokka . links . PointingToDeclaration import org . jetbrains . dokka . model . doc . * import kotlin . test . Test import kotlin . test . assertEquals import kotlin . test . assertNotNull import kotlin . test . assertTrue class GetLinkTest : BaseAbstractTest ( ) { private val configuration = dokkaConfiguration { sourceSets { sourceSet { sourceRoots = listOf ( "src/" ) analysisPlatform = "jvm" classpath += jvmStdlibPath ! ! } } } @ Test fun `get link to function` ( ) { val writerPlugin = TestOutputWriterPlugin ( ) testInline ( """""" . trimMargin ( ) , configuration , pluginOverrides = listOf ( writer
import org . jetbrains . kotlinx . dl . api . core . Sequential import org . jetbrains . kotlinx . dl . api . core . activation . Activations import org . jetbrains . kotlinx . dl . api . core . initializer . HeNormal import org . jetbrains . kotlinx . dl . api . core . initializer . Zeros import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . Conv2D import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . core . Dense import org . jetbrains . kotlinx . dl . api . core . layer . core . Input import org . jetbrains . kotlinx . dl . api . core . layer . pooling . AvgPool2D import org . jetbrains . kotlinx . d
import org . jetbrains . kotlinx . dl . api . core . Sequential import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . Conv2D import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . core . Dense import org . jetbrains . kotlinx . dl . api . core . layer . core . Input import org . jetbrains . kotlinx . dl . api . core . layer . pooling . MaxPool2D import org . jetbrains . kotlinx . dl . api . core . loss . Losses import org . jetbrains . kotlinx . dl . api . core . metric . Metrics import org . jetbrains . kotlinx . dl . api . core . optimizer . SGD import org . jetbrains . kotlinx . dl

package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirRegularClassSymbol import org . jetbrains . kot
import kotlinx . coroutines . testing . * import kotlinx . coroutines . * import kotlinx . coroutines . debug . * import kotlinx . coroutines . selects . * import org . junit . * import org . junit . Test import org . junit . runner . * import org . junit . runners . * import java . util . concurrent . * import java . util . concurrent . atomic . * import kotlin . test . * @ RunWith ( Parameterized :: class ) class ChannelCloseStressTest ( private val nSenders : Int , private val nReceivers : Int ) : TestBase ( ) { companion object { @ Parameterized . Parameters ( name = "" ) @ JvmStatic fun params ( ) : Collection < Array < Any > > = listOf ( 0 , 1 , 10 ) . map { arrayOf < Any > ( it ) } } private val timeLimit = 0 * stressTestMultiplier

import org . jetbrains . kotlin . descriptors . * import org . jetbrains . kotlin . descriptors . annotations . Annotations import org . jetbrains . kotlin . descriptors . impl . ClassConstructorDescriptorImpl import org . jetbrains . kotlin . descriptors . impl . FunctionDescriptorImpl import org . jetbrains . kotlin . descriptors . impl . ReceiverParameterDescriptorImpl import org . jetbrains . kotlin . descriptors . impl . ValueParameterDescriptorImpl import org . jetbrains . kotlin . descriptors . impl . VariableDescriptorImpl import org . jetbrains . kotlin . incremental . components . LookupLocation import org . jetbrains . kotlin . incremental . components . NoLookupLocation import org . jetbrains . kotlin . incremental . record import org . jetbrains . kotlin . incremental . storage . LookupStorage import org . jetbrains . kotlin . incremental . storage . StorageManager import org . jetbr
import org . jetbrains . kotlin . descriptors . * import org . jetbrains . kotlin . descriptors . annotations . Annotations import org . jetbrains . kotlin . descriptors . impl . LocalVariableDescriptor import org . jetbrains . kotlin . descriptors . impl . ValueParameterDescriptorImpl import org . jetbrains . kotlin . descriptors . impl . VariableDescriptorImpl import org . jetbrains . kotlin . incremental . components . LookupLocation import org . jetbrains . kotlin . incremental . components . NoLookupLocation import org . jetbrains . kotlin . incremental . record import org . jetbrains . kotlin . name . Name import org . jetbrains . kotlin . resolve . calls . components . InferenceSession import org . jetbrains . kotlin . resolve . calls . components . NewTypeSubstitutor import org . jetbrains . kotlin . resolve . calls . components . NewTypeSubstitutorByConstructorMap import






@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Klass { open fun method ( ) : String companion object { fun method ( ) : String } }
import kotlin . test . * fun box ( ) : String { fail ( "" ) }


import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . internal . * import kotlinx . serialization . modules . * import kotlin . reflect . * import kotlin . reflect . full . * import kotlin . reflect . jvm . * import kotlin . reflect . jvm . internal . * import kotlin . reflect . jvm . internal . calls . * import kotlin . reflect . jvm . internal . calls . Caller import kotlin . reflect . jvm . internal . calls . createCaller import kotlin . reflect . jvm . internal . calls . toJvmDescriptor import kotlin . reflect . jvm . internal . calls . toKotlinCaller import kotlin . reflect . jvm . internal . calls . toKotlinFunction import kot
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . json . * import kotlinx . serialization . modules . polymorphic . * import kotlinx . serialization . modules . subclass . * import kotlinx . serialization . test . * import kotlin . test . * class JsonObjectPolymorphismTest : JsonTestBase ( ) { @ Serializable data class Holder ( @ Polymorphic val a : Any ) object SerializerA : KSerializer < Holder > { override val descriptor : SerialDescriptor = Holder . serializer ( ) . descriptor override fun serialize ( encoder : Encoder , value : Holder ) { TODO ( ) }
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . json . * import kotlinx . serialization . test . * import kotlin . test . * class JsonObjectSerializerTest : JsonTestBase ( ) { @ Serializable data class Holder ( val i : Int ) object SerializerB : KSerializer < Holder > { override val descriptor : SerialDescriptor = PrimitiveSerialDescriptor ( "" , PrimitiveKind . STRING ) override fun serialize ( encoder : Encoder , value : Holder ) = TODO ( ) override fun deserialize ( decoder : Decoder ) : Holder = TODO ( ) } object SerializerC : KSerializer < Holder
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . json . * import kotlinx . serialization . modules . json . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . json . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serial
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . json . * import kotlinx . serialization . modules . polymorphic . * import kotlinx . serialization . modules . subclass . * import kotlinx . serialization . test . * import kotlin . test . * class JsonObjectPolymorphismTest : JsonTestBase ( ) { @ Serializable data class Holder ( @ Polymorphic val a : Any ) object SerializerA : KSerializer < Holder > { override val descriptor : SerialDescriptor = Holder . serializer ( ) . descriptor override fun serialize ( encoder : Encoder , value : Holder ) { TODO ( ) } <EOL
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . json . * import kotlinx . serialization . modules . polymorphic . * import kotlinx . serialization . modules . subclass import kotlinx . serialization . modules . subclass import kotlinx . serialization . protobuf . * import kotlinx . serialization . test . * import kotlin . test . * class JsonElementPolymorphismTest : JsonTestBase ( ) { @ Serializable data class Holder ( @ Polymorphic val a : Any ) val module = SerializersModule { polymorphic ( Any :: class ) { subclass ( Holder . serializer ( ) ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . internal . * import kotlinx . serialization . modules . * import kotlin . reflect . * import kotlin . reflect . full . * import kotlin . reflect . jvm . * import kotlin . reflect . jvm . internal . * import kotlin . reflect . jvm . internal . * import kotlin . reflect . jvm . internal . * import kotlin . reflect . jvm . internal . * import kotlin . reflect . jvm . internal . * import kotlin . reflect . jvm . internal . * import kotlin . reflect . jvm . internal . * import kotlin . reflect . jvm . internal . * import kotlin . reflect . jvm . internal . * import
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . internal . * import kotlinx . serialization . modules . * import kotlin . reflect . * import kotlin . reflect . full . * import kotlin . reflect . jvm . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlin . time . * <EOL
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * fun box ( ) : String { assertEquals ( true , "true" . toBooleanStrictOrNull ( ) ) assertEquals ( false , "false" . toBooleanStrictOrNull ( ) ) return "OK" }










@ JvmName ( "" ) public fun < T : Number , D : Dim2 > LinAlg . inv ( mat : MultiArray < T , D2 > ) : NDArray < Double , D > = this . linAlgEx . inv ( mat )
import kotlin . test . * import kotlin . native . internal . * import kotlin . random . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds class NativeLinAlgTest { @ Test fun `matrix-matrix dot test` ( ) { val random = Random ( 42 ) val n = 7 val a = mk . ndarray ( mk [ mk [ random . nextDouble ( ) , random . nextDouble ( ) ] , mk [ random . nextDouble ( ) , random . nextDouble ( ) ] , mk [ random . nextDouble ( ) , random . nextDouble ( ) ] , mk [ random . nextDouble ( ) , random . nextDouble ( ) ] , mk [ random . nextDouble ( ) , random . nextDouble ( ) ] ] ) val b = mk . ndarray ( mk [ mk [ random . nextDouble ( ) , random . nextDouble ( ) ] , mk [ random . nextDouble ( ) , random . nextDouble ( ) ] , mk
package org . jetbrains . kotlinx . multik . ndarray . data import kotlin . jvm . JvmName @ JvmName ( "" ) public fun < T : Complex > MultiArray < T , D2 > . conj ( ) : MultiArray < T , D2 > = this . deepCopy ( ) as MultiArray < T , D2 > @ JvmName ( "" ) public fun < T : Complex > MultiArray < T , D2 > . conj ( i : Int ) : MultiArray < T , D2 > = this . deepCopy ( ) as MultiArray < T , D2 > @ JvmName ( "" ) public fun < T : Complex > MultiArray < T , D2 > . conj ( i : Int , axis : Int ) : MultiArray < T , D2 > = this . deepCopy ( ) as MultiArray < T , D2 >
import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * fun box ( ) : String { val list = listOf ( "O" , "K" ) val ( o , k ) = list return o + k }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any } external open class Foo { open fun bar ( a : Any ) : Number open var baz : Any }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }


import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
import kotlin . test . * fun box ( ) : String { val list = mutableListOf ( "OK" ) return list . firstOrNull ( ) ! ! }


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import java . util . * fun use ( ) { Optional . < caret > empty < String > ( ) Optional . < caret > empty < String ? > ( ) }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . KtFakeSourceElementKind import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kot
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class GrandParent ( ) external open class Parent ( ) : GrandParent external open class Child ( ) : Parent
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit } external interface `T$1` { fun bar ( a : Any
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class GrandParent ( ) external open class Parent ( ) : GrandParent external open class Child ( ) : Parent
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
import kotlin . random . * import kotlin . test . * import kotlin . native . concurrent . * import kotlin . native . internal . * import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal
import kotlin . test . * import kotlin . random . * fun box ( ) : String { val list = listOf ( 1 , 2 , 3 ) var x : Int ? = null for ( i in 0 .. list . size ) { x = if ( i == 0 ) list . first ( ) else list . last ( ) } return if ( x == 1 ) "OK" else "" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any } external open class Foo { open fun bar ( a : Any ) : Number open var baz : Any }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . checkers . declaration . FirBasicDeclarationChecker import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInline import org . jetbrain
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . checkers . declaration . FirBasicDeclarationChecker import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . containingClassLookupTag import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kot
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . KtFakeSourceElementKind import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kot
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any } external open class Foo { open fun bar ( a : Any ) : Number open var baz : Any }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * fun box ( ) : String { val list = mutableListOf ( 1 , 2 , 3 ) list . reverse ( ) assertEquals ( listOf ( 3 , 2 , 1 ) , list ) return "OK" }
fun box ( ) : String { val list = listOf ( "OK" ) return list . reversed ( ) . joinToString ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . utils . expandedConeType import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbrains . kot
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirRegularClassSymbol import org . jetbrains . kot
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
import kotlin . test . * fun box ( ) : String { val booleanArray = BooleanArray ( 5 ) booleanArray [ 0 ] = true booleanArray [ 1 ] = false booleanArray [ 2 ] = true booleanArray [ 3 ] = false booleanArray [ 4 ] = true assertEquals ( 5 , booleanArray . size ) assertEquals ( true , booleanArray [ 0 ] ) assertEquals ( false , booleanArray [ 1 ] ) assertEquals ( true , booleanArray [ 2 ] ) assertEquals ( false , booleanArray [ 3 ] ) assertEquals ( true , booleanArray [ 4 ] ) return "OK" }
import java . util . Arrays fun box ( ) : String { val a = Arrays . asList ( 1 , 2 , 3 ) return "OK" }
import java . util . Arrays fun box ( ) : String { val a = Arrays . asList ( "OK" ) return a [ 0 ] }
fun box ( ) : String { val a = ArrayList < Double > ( ) a . add ( 0 ) a . add ( 0 ) val b = a . toDoubleArray ( ) return if ( b . size == 2 && b [ 0 ] == 0 && b [ 1 ] == 0 ) "OK" else "fail" }
fun box ( ) : String { val a = ArrayList < Float > ( ) a . add ( 0 ) a . add ( 0 ) a . add ( 0 ) val b = a . toFloatArray ( ) if ( b . size != 3 ) return "" if ( b [ 0 ] != 0 ) return "" if ( b [ 1 ] != 0 ) return "" if ( b [ 2 ] != 0 ) return "" return "OK" }
fun box ( ) : String { val a = ArrayList < Int > ( ) a . add ( 1 ) a . add ( 2 ) val b = a . toIntArray ( ) return if ( b . size == 2 && b [ 0 ] == 1 && b [ 1 ] == 2 ) "OK" else "fail" }
fun box ( ) : String { val a = ArrayList < Long > ( ) a . add ( 1 ) a . add ( 2 ) val b = a . toTypedArray ( ) return if ( b . size == 2 && b [ 0 ] == 1 && b [ 1 ] == 2 ) "OK" else "fail" }
fun box ( ) : ShortArray { val c : Collection < Short > = arrayOf ( 1 , 2 , 3 ) val d : ShortArray = c . toShortArray ( ) return d }








import kotlin . test . * val sb = StringBuilder ( ) fun < T > Iterable < T > . join ( separator : String = "U+002CU+0020" , prefix : String = "" , postfix : String = "" ) { for ( element in this ) { sb . append ( separator ) sb . append ( prefix ) sb . append ( element ) sb . append ( postfix ) } } fun box ( ) : String { val list = listOf ( "O" , "K" ) list . join ( "" ) return sb . toString ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . containingClassLookupTag import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . declarations . utils . * import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl .
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbr
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }





@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *






@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
import java . util . * fun use ( ) { LinkedHashSet < Int > ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any } external open class Foo { open fun bar ( a : Any ) : Number open var baz : Any }


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ SinceKotlin ( "1.4" ) public actual fun < T > Collection < T > . count ( predicate : ( T ) -> Boolean ) : Int { var count = 0 for ( element in this ) if ( predicate ( element ) ) ++ count return count }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }




@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 ) { intList += i } assertEquals ( 8 , intList . max ( ) ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( 0 , longList . max ( ) ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 ) { charList += i } assertEquals ( '' , charList . max ( ) ) return "OK" }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }








@ SinceKotlin ( "1.4" ) public fun Iterable < Float > . maxOrNull ( ) : Float ? { val iterator = iterator ( ) if ( ! iterator . hasNext ( ) ) return null var max = iterator . next ( ) while ( iterator . hasNext ( ) ) { val e = iterator . next ( ) if ( max < e ) max = e } return max } @ SinceKotlin ( "1.4" ) public fun Iterable < Int > . maxOrNull ( ) : Int ? { val iterator = iterator ( ) if ( ! iterator . hasNext ( ) ) return null var max = iterator . next ( ) while ( iterator . hasNext ( ) ) { val e = iterator . next ( ) if ( max < e ) max = e } return max } @ SinceKotlin ( "1.4" ) public fun Iterable < Long > . maxOrNull ( ) : Long ? { val iterator = iterator ( ) if ( ! iterator .
@ SinceKotlin ( "1.4" ) public fun < T : Comparable < T > > Iterable < T > . maxOrNull ( ) : T ? { val iterator = iterator ( ) if ( ! iterator . hasNext ( ) ) return null var max = iterator . next ( ) while ( iterator . hasNext ( ) ) { val e = iterator . next ( ) if ( max < e ) max = e } return max }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
import kotlin . test . * fun box ( ) : String { val min = 0 . toString ( ) if ( "0" != min ) throw AssertionError ( min ) return "OK" }
import kotlin . test . * fun box ( ) : String { val min = 0 . toString ( ) if ( "0" != min ) throw AssertionError ( min ) return "OK" }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 ) { intList += i } assertEquals ( 1 , intList . minOrNull ( ) ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( 1L , longList . minOrNull ( ) ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 ) { charList += i } assertEquals ( 'a' , charList . minOrNull ( ) ) return "OK" }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }








@ SinceKotlin ( "1.4" ) public fun < T : Comparable < T > > Iterable < T > . minOrNull ( ) : T ? { val iterator = iterator ( ) if ( ! iterator . hasNext ( ) ) return null var min = iterator . next ( ) while ( iterator . hasNext ( ) ) { val e = iterator . next ( ) if ( min > e ) min = e } return min }
@ SinceKotlin ( "1.4" ) public fun < T : Comparable < T > > Iterable < T > . minOrNull ( ) : T ? { val iterator = iterator ( ) if ( ! iterator . hasNext ( ) ) return null var min = iterator . next ( ) while ( iterator . hasNext ( ) ) { val e = iterator . next ( ) if ( min > e ) min = e } return min }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }














@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external fun sum ( a : Number , b : Number , c : Number ) : Number
import kotlin . test . * fun box ( ) : Double { var sum = 0.0 for ( i in ( 0 .. 4 ) . reversed ( ) ) { sum += i } return sum }





import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . containingClassLookupTag import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . declarations . utils . * import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl .


package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . containingClassLookupTag import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . declarations . utils . isInner import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir . declarations . util
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbr
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbr
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbr
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface FooInterface { fun methodWithOutArgs ( ) fun methodWithString ( s : String ) : String fun methodWithManyArgs ( n : Number , settings : Bar ) : Boolean } external open class Bar

package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . containingClassLookupTag import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . declarations . utils . isInner import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir . declarations . util
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . containingClassLookupTag import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . declarations . utils . * import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . containingClassLookupTag import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . declarations . utils . * import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl .
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbr
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . utils . expandedConeType import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbrains . kot
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbr



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * fun box ( ) : String { val s = StringBuilder ( ) for ( ( index , _ ) in ( 0 .. 3 ) . withIndex ( ) ) { s . append ( "" ) } val ss = s . toString ( ) if ( ss != "" ) return "" return "OK" }
@ kotlin . internal . InlineOnly public inline fun ByteArray . average ( ) : Double { var sum : Double = 0.0 var count : Int = 0 for ( element in this ) { sum += element checkCountOverflow ( ++ count ) } return if ( count == 0 ) 0.0 else sum / count } @ kotlin . internal . InlineOnly public inline fun ShortArray . average ( ) : Double { var sum : Double = 0.0 var count : Int = 0 for ( element in this ) { sum += element checkCountOverflow ( ++ count ) } return if ( count == 0 ) 0.0 else sum / count } @ kotlin . internal . InlineOnly public inline fun IntArray . average ( ) : Double { var sum : Double = 0.0 var count : Int = 0 for ( element in this ) { sum += element checkCountOverflow ( ++ count ) } return if ( count ==
@ kotlin . internal . InlineOnly public inline fun Short . average ( ) : Double = java . lang . Double . average ( this . toDouble ( ) ) @ kotlin . internal . InlineOnly public inline fun Int . average ( ) : Double = java . lang . Double . average ( this . toDouble ( ) ) @ kotlin . internal . InlineOnly public inline fun Long . average ( ) : Double = java . lang . Double . average ( this . toDouble ( ) ) @ kotlin . internal . InlineOnly public inline fun Float . average ( ) : Double = java . lang . Double . average ( this . toDouble ( ) ) @ kotlin . internal . InlineOnly public inline fun Double . average ( ) : Double = java . lang . Double . average ( this )
@ kotlin . internal . InlineOnly public inline fun < T , R : Number > Iterable < T > . averageOf ( selector : ( T ) -> R ) : Double { var sum : R = 0.0 var count : Int = 0 for ( element in this ) { sum += selector ( element ) checkCountOverflow ( ++ count ) } return if ( count == 0 ) 0.0 else sum / count } @ SinceKotlin ( "1.4" ) @ OptIn ( kotlin . experimental . ExperimentalTypeInference :: class ) @ OverloadResolutionByLambdaReturnType @ kotlin . jvm . JvmName ( "" ) public fun < T > Iterable < T > . averageOf ( selector : ( T ) -> Double ) : Double { var sum : Double = 0.0 var count : Int = 0 for ( element in this ) { sum += selector ( element ) checkCountOverflow ( ++ count ) } return if ( count == 0 )
fun box ( ) : String { val list = listOf ( 1 , 2 , 3 ) var sum = 0 for ( i in list ) { sum += i } return if ( sum == 6 ) "OK" else "" }
fun box ( ) : String { val list = listOf ( 0 , 0 , 0 ) return if ( list . average ( ) == 0 ) "OK" else "fail" }
@ kotlin . jvm . JvmName ( "" ) public fun Iterable < Float > . average ( ) : Float { var sum = 0.0f var count = 0 for ( element in this ) { sum += element checkCountOverflow ( ++ count ) } return if ( count == 0 ) { sum } else { sum / count } } @ kotlin . jvm . JvmName ( "" ) public fun Iterable < Int > . average ( ) : Int { var sum = 0 var count = 0 for ( element in this ) { sum += element checkCountOverflow ( ++ count ) } return if ( count == 0 ) { sum } else { sum / count } } @ kotlin . jvm . JvmName ( "" ) public fun Iterable < Long > . average ( ) : Long { var sum = 0L var count = <NUM_LIT:0
import kotlin . test . * fun box ( ) : String { val list = listOf ( 1 , 2 , 3 ) val sum = list . sum ( ) assertEquals ( 6 , sum ) return "OK" }
import kotlin . test . * fun box ( ) : String { val array = shortArrayOf ( 1 , 2 , 3 ) var sum = 0 for ( element in array ) { sum += element } assertEquals ( 6 , sum ) return "OK" }
import kotlin . test . * fun box ( ) : String { val list = listOf ( 1 , 2 , 3 ) val sum = list . sum ( ) assertEquals ( 6 , sum ) return "OK" }
import kotlin . test . * fun box ( ) : String { val list = listOf ( 1 , 2 , 3 ) val sum = list . sum ( ) assertEquals ( 6 , sum ) return "OK" }
fun box ( ) : String { val list = listOf ( 0 , 0 , 0 ) val sum = list . sum ( ) return if ( sum == 0 ) "OK" else "" }
import kotlin . test . * fun box ( ) : String { val array = doubleArrayOf ( 1.0 , 2.0 , 3.0 ) var sum = 0.0 for ( element in array ) { sum += element } assertEquals ( 0 , sum ) return "OK" }


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

import kotlinx . coroutines . * import kotlinx . coroutines . channels . * import kotlinx . coroutines . debug . * import kotlinx . coroutines . selects . * import kotlinx . coroutines . sync . * import kotlinx . coroutines . testing . * import org . junit . * import org . junit . Test import org . junit . runner . * import org . junit . runners . * import java . util . concurrent . * import kotlin . concurrent . * import kotlin . test . * @ RunWith ( Parameterized :: class ) class ChannelSendReceiveStressTest ( private val kind : TestChannelKind , private val nSenders : Int , private val nReceivers : Int ) : TestBase ( ) { companion object { @ Parameterized . Parameters ( name = "" ) @ JvmStatic fun params ( ) : Collection < Array < Any > > = listOf ( <NUM_LIT:1

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * val sb = StringBuilder ( ) open class EmptyContinuation ( override val context : CoroutineContext = EmptyCoroutineContext ) : Continuation < Any ? > { companion object : EmptyContinuation ( ) override fun resumeWith ( result : Result < Any ? > ) { result . getOrThrow ( ) } } suspend fun s1 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resume ( 42 ) COROUTINE_SUSPENDED } suspend fun s2 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resumeWithException ( Error ( ) ) COROUTINE_SUSPENDED } fun f1 ( ) : Int { sb . appendLine ( "" ) return 0
package kotlinx . coroutines import kotlinx . coroutines . testing . * import kotlinx . coroutines . * import org . junit . * import org . junit . Test import java . util . concurrent . * import java . util . concurrent . atomic . * import kotlin . test . * class OnReceiveStressTest : TestBase ( ) { private val nSenders = 3 private val nReceivers = 3 private val nEvents = 0 * stressTestMultiplier private val timeLimit = 0 * stressTestMultiplier private val sent = atomic ( 0 ) private val received = atomic ( 0 ) private val pool = newFixedThreadPoolContext ( nSenders + nReceivers , "" ) @ After fun tearDown ( ) { pool . close ( ) } @ Test fun testStress ( ) = runBlocking { println ( "" ) val senders = List ( n
package kotlinx . coroutines import kotlinx . coroutines . testing . * import kotlinx . coroutines . * import org . junit . * import org . junit . Test import org . junit . runner . * import org . junit . runners . * import java . util . concurrent . * import kotlin . concurrent . * import kotlin . test . * @ RunWith ( Parameterized :: class ) class ConflatedBufferedChannelCloseStressTest ( private val nSenders : Int , private val nReceivers : Int ) : TestBase ( ) { companion object { @ Parameterized . Parameters ( name = "" ) @ JvmStatic fun params ( ) : Collection < Array < Any > > = listOf ( 0 , 1 , 10 ) . map { nSenders -> arrayOf ( 0 , 1 , 10 ) . map { nReceivers -> Pair ( nSenders , nReceivers ) } <EOL

import kotlin . test . * val log = StringBuilder ( ) fun logged ( message : String , value : Int ) = value . also { log . append ( message ) } fun box ( ) : String { var sum = 0 for ( i in ( logged ( "" , 1 ) .. logged ( "" , 4 ) ) . reversed ( ) . reversed ( ) ) { sum = sum * 10 + i } assertEquals ( 0 , sum ) assertEquals ( "" , log . toString ( ) ) return "OK" }

import kotlinx . cinterop . * import kotlinx . cinterop . internal . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds class TimeoutCancellationTest : TestBase ( ) { @ Test fun testBasicNoSuspend ( ) = runTest { expect ( 1 ) val result = withTimeoutOrNull ( 0 . milliseconds ) { expect ( 2 ) yield ( ) expectUnreached ( ) } assertNull ( result ) finish ( 3 ) } @ Test fun testBasicSuspend ( ) = runTest { expect ( 1 ) val result = withTimeoutOrNull ( 0 . milliseconds ) { expect ( 2 ) yield ( ) expectUnreached ( ) } assertNotNull ( result ) finish ( 3 ) } @ Test fun testDispatch ( ) = runTest {

package org . jetbrains . kotlinx . jupyter . api . libraries import org . jetbrains . kotlinx . jupyter . api . AfterCellExecutionCallback import org . jetbrains . kotlinx . jupyter . api . Code import org . jetbrains . kotlinx . jupyter . api . CodeCell import org . jetbrains . kotlinx . jupyter . api . CodePreprocessor import org . jetbrains . kotlinx . jupyter . api . DisplayResult import org . jetbrains . kotlinx . jupyter . api . DisplayResultWithCell import org . jetbrains . kotlinx . jupyter . api . DisplayResultWithCellImpl import org . jetbrains . kotlinx . jupyter . api . DisplayResultWithCellInfo import org . jetbrains . kotlinx . jupyter . api . DisplayResultWithCellInfoImpl import org . jetbrains . kotlinx .


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import helpers . * suspend fun suspendHere ( ) : String = suspendCoroutineUninterceptedOrReturn { x -> x . resume ( "OK" ) COROUTINE_SUSPENDED } fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } fun box ( ) : String { var result = "" builder { try { suspendHere ( ) } finally { result = "OK" } } return result }
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import kotlin . jvm . internal . * import kotlin . reflect . * import kotlin . reflect . jvm . internal . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . minutes import kotlin . time .
package kotlinx . coroutines import kotlinx . coroutines . testing . * import kotlinx . coroutines . * import kotlinx . coroutines . selects . * import org . junit . * import org . junit . Test import java . util . concurrent . * import java . util . concurrent . atomic . * import kotlin . concurrent . * import kotlin . test . * class ConflatedBroadcastChannelTest : TestBase ( ) { @ Before fun setup ( ) { ignoreLostThreads ( "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "<STR_LIT
package kotlinx . collections . immutable . implementations . immutableMap import kotlinx . collections . immutable . ImmutableCollection import kotlinx . collections . immutable . ImmutableSet import kotlinx . collections . immutable . PersistentMap import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMap import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilder import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilderEntry import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilder import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilderPut import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilderRemove import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilderPutValue import kotlinx . collections . immutable . implementations . immutableMap . PersistentHashMapBuilderRemoveValue import kotlinx . collections . immutable . implementations . immutable

import kotlinx . cinterop . * import kotlin . test . * import kotlin . native . concurrent . * import kotlin . native . internal . * import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . TypedIntrinsic import kotlin .
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import kotlin . jvm . internal . * import kotlin . reflect . * import kotlin . reflect . jvm . internal . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import helpers . * suspend fun suspendHere ( ) = TailCallOptimizationChecker . saveStackTrace ( ) fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } fun box ( ) : String { builder { try { suspendHere ( ) } finally { TailCallOptimizationChecker . checkNoStateMachineIn ( "" ) } } return "OK" }
import kotlinx . coroutines . * import kotlinx . coroutines . channels . * import kotlinx . coroutines . selects . * import kotlinx . coroutines . sync . * import kotlinx . coroutines . testing . * import kotlinx . coroutines . * import kotlinx . coroutines . channels . * import kotlinx . coroutines . selects . * import kotlin . test . * class SelectChannelStressTest : TestBase ( ) { private val iterations = 0 * stressTestMultiplier private val nSenders = 2 private val nReceivers = 2 private val nEvents = ( if ( isNative ) 0 else 0 ) * stressTestMultiplier private val sent = atomic ( 0 ) private val received = atomic ( 0 ) private val pool = newFixedThreadPoolContext ( nSenders + nReceivers , "" ) @ After fun tearDown ( )
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }








@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . reflect . KClass import kotlin . reflect . KType import kotlin . reflect . KTypeProjection import kotlin . reflect . KVariance import kotlin . reflect . KVisibility import kotlin . reflect . full . createType import kotlin . reflect . full . starProjectedType import kotlin . reflect . full . withNullability import kotlin . reflect . jvm . internal . KTypeImpl import kotlin . reflect . jvm . internal . KotlinReflectionInternalError import kotlin . reflect . jvm . internal . asKCallableImpl import kotlin . reflect . jvm . internal . asKPropertyImpl import kotlin . reflect . jvm . internal . asKPropertyImpl import kotlin . reflect . jvm . internal . asKTypeImpl import kotlin . reflect . jvm . internal . asKTypeProjectionImpl import kotlin . reflect . jvm . internal . asKTypeProjectionImpl import kotlin .

@ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun StringBuilder . appendLine ( value : Short ) : StringBuilder = append ( value . toInt ( ) ) @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun StringBuilder . appendLine ( value : Int ) : StringBuilder = append ( value ) @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun StringBuilder . appendLine ( value : Long ) : StringBuilder = append ( value ) @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun StringBuilder . appendLine ( value : Float ) : StringBuilder = append ( value ) @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun StringBuilder . appendLine ( value : Double ) : StringBuilder = append ( value )
fun box ( ) : String { val sb = StringBuilder ( ) sb . appendLine ( "OK" ) return sb . toString ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * val sb = StringBuilder ( ) fun box ( ) : String { sb . appendLine ( 1 ) sb . appendLine ( 2 ) assertEquals ( "" , sb . toString ( ) ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
package org . jetbrains . kotlin . fir . scopes . impl import org . jetbrains . kotlin . descriptors . ClassKind import org . jetbrains . kotlin . descriptors . Modality import org . jetbrains . kotlin . descriptors . Visibilities import org . jetbrains . kotlin . descriptors . Visibility import org . jetbrains . kotlin . fir . FirSession import org . jetbrains . kotlin . fir . containingClassLookupTag import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . declarations . utils . isInner import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir . declarations . utils . modality import org . jetbrains . kotlin . fir . declarations . utils . visibility import org . jetbrains . kotlin . fir . resolve . substitution . ConeSubstit
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . containingClassLookupTag import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . declarations . utils . * import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl .
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInline import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir

@ OptIn ( ExperimentalContracts :: class ) fun Any ? . isEnum ( ) : Boolean { contract { returns ( true ) implies ( this @ isEnum != null ) } return this is FirClassSymbol < * > && isSerializableEnum ( session ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun < E > select ( vararg x : E ) = x [ 0 ] fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( get ( ) , getInv ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( getInv ( ) , get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( getInv ( ) , getInv ( ) )
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun < E > select ( vararg x : E ) = x [ 0 ] fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( get ( ) , getInv ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( getInv ( ) , get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( getInv ( ) , getInv ( ) )

import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R1 > build ( block : TestInterface < R1 > . ( ) -> Unit ) : R1 = TODO ( ) @ OptIn ( ExperimentalTypeInference :: class ) fun < R2 > build2 ( block : TestInterface < R2 > . ( ) -> Unit ) : R2 = TODO ( ) class Inv < T > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > } }
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R1 > build ( block : TestInterface < R1 > . ( ) -> Unit ) : R1 = TODO ( ) @ OptIn ( ExperimentalTypeInference :: class ) fun < R2 > build2 ( block : TestInterface < R2 > . ( ) -> Unit ) : R2 = TODO ( ) class Inv < T > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > } }
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R1 > build ( block : TestInterface < R1 > . ( ) -> Unit ) : R1 = TODO ( ) @ OptIn ( ExperimentalTypeInference :: class ) fun < R2 > build2 ( block : TestInterface < R2 > . ( ) -> Unit ) : R2 = TODO ( ) class Inv < T > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > } }
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < T > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > } }
package org . jetbrains . kotlinx . multik . ndarray . data import kotlin . jvm . JvmName import kotlin . random . Random import kotlin . test . Test import kotlin . test . assertEquals import kotlin . test . assertTrue import kotlin . test . fail class MultiIndexProgressionTest { @ Test fun `test_of_iterating` ( ) { val prog = intArrayOf ( 0 , 2 , 1 ) .. intArrayOf ( 3 , 5 , 2 ) val expected = mapOf ( 0 to intArrayOf ( 0 , 2 , 1 ) , 1 to intArrayOf ( 0 , 2 , 2 ) , 2 to intArrayOf ( 0 , 3 , 1 ) , 3 to intArrayOf ( 0 , 3 , 2 ) , 4 to intArrayOf ( 1 , 3 , 2 ) , 5 to intArrayOf ( 1 , 3 , 3 ) ,
@ JvmName ( "" ) public fun < D : Dimension > log ( a : MultiArray < Double , D > ) : NDArray < Double , D > = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( a ) , dtype = Double :: class )
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < T1 > build ( block : TestInterface < T1 > . ( ) -> Unit ) : T1 = TODO ( ) @ OptIn ( ExperimentalTypeInference :: class ) fun < T2 > build2 ( block : TestInterface < T2 > . ( ) -> Unit ) : T2 = TODO ( ) class Inv < T > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE
import kotlin . jvm . functions . FunctionN ; public class A { public void foo ( FunctionN < ? > f ) { } } import kotlin . jvm . functions . FunctionN ; public class B extends A { public void foo ( FunctionN < ? > f ) { } } class C : B ( ) { override fun foo ( f : FunctionN < ? > ) { } }
import kotlin . jvm . functions . FunctionN ; public class A { public void foo ( FunctionN < Double , Double > f ) { } } import kotlin . jvm . functions . FunctionN ; public class B extends A { public void foo ( FunctionN < Double , Double > f ) { } } class C : B ( ) { override fun foo ( f : FunctionN < Double , Double > ) { } }
@ JvmName ( "" ) public fun < D : Dimension > cos ( a : MultiArray < Double , D > ) : NDArray < Double , D > = this . mathEx . cos ( a )
@ JvmName ( "" ) public fun < D : Dimension > cos ( a : MultiArray < Float , D > ) : NDArray < Float , D > = this . mathEx . cos ( a ) @ JvmName ( "" ) public fun < D : Dimension > cosF ( a : MultiArray < Float , D > ) : NDArray < Float , D > = this . mathEx . cosF ( a ) @ JvmName ( "" ) public fun < D : Dimension > cosCF ( a : MultiArray < ComplexFloat , D > ) : NDArray < ComplexFloat , D > = this . mathEx . cosCF ( a )
@ JvmName ( "" ) public fun < D : Dimension > cos ( a : MultiArray < Float , D > ) : NDArray < Float , D > = mk . math . cos ( a ) @ JvmName ( "" ) public fun < D : Dimension > cosF ( a : MultiArray < Float , D > ) : NDArray < Float , D > = mk . math . cosF ( a ) @ JvmName ( "" ) public fun < D : Dimension > cosCF ( a : MultiArray < ComplexFloat , D > ) : NDArray < ComplexFloat , D > = mk . math . cosCF ( a ) @ JvmName ( "" ) public fun < D : Dimension > cosCD ( a : MultiArray < ComplexDouble , D > ) : NDArray < ComplexDouble , D > = mk . math . cosCD ( a )
import kotlin . jvm . functions . FunctionN ; public class A { public void foo ( FunctionN < Double , Double > f ) { } } import kotlin . jvm . functions . FunctionN ; public class B extends A { public void foo ( FunctionN < Double , Double > f ) { } } class C : B ( ) { override fun foo ( f : FunctionN < Double , Double > ) { } }
import kotlin . jvm . functions . FunctionN ; import kotlin . Unit ; public class A { public void foo ( FunctionN < Unit > f ) { } } import kotlin . Unit ; public class B { public void foo ( FunctionN < Unit > f ) { } } public class C { public void foo ( FunctionN < Unit > f ) { } } public class D { public void foo ( FunctionN < Unit > f ) { } } public class E { public void foo ( FunctionN < Unit > f ) { } } public class F { public void foo ( FunctionN < Unit > f ) { } } public class G { public void foo ( FunctionN < Unit > f ) { } } public class H { public void foo ( FunctionN < Unit > f ) { } } public class I { public void foo ( FunctionN < Unit > f ) { } } public class J { public
@ JvmName ( "" ) public fun < D : Dimension > cosCD ( a : MultiArray < ComplexDouble , D > ) : NDArray < ComplexDouble , D > = this . mathEx . cosCD ( a )
@ JvmName ( "" ) public fun < D : Dimension > cos ( a : MultiArray < Float , D > ) : NDArray < Float , D > = ktMath . cos ( a ) @ JvmName ( "" ) public fun < D : Dimension > cosF ( a : MultiArray < Float , D > ) : NDArray < Float , D > = ktMath . cosF ( a ) @ JvmName ( "" ) public fun < D : Dimension > cosCF ( a : MultiArray < ComplexFloat , D > ) : NDArray < ComplexFloat , D > = ktMath . cosCF ( a ) @ JvmName ( "" ) public fun < D : Dimension > cosCD ( a : MultiArray < ComplexDouble , D > ) : NDArray < ComplexDouble , D > = ktMath . cosCD ( a )
import kotlinx . atomicfu . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx . atomicfu . locks . * import kotlinx .
package org . jetbrains . kotlin . cli . jvm . compiler import com . intellij . openapi . Disposable import com . intellij . openapi . util . Disposer import com . intellij . openapi . vfs . StandardFileSystems import com . intellij . openapi . vfs . VirtualFile import com . intellij . openapi . vfs . VirtualFileManager import com . intellij . openapi . vfs . impl . jar . CoreJarFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJarFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtFileSystem import com . intellij . openapi . vfs . impl . jar . impl . JarFileSystem import com . intellij . openapi . vfs . impl . jar . impl . CoreJarFileSystem import com . intellij . openapi . vfs . impl . jar . impl . JarFileSystem import com . intellij .
import kotlin . test . * val log = StringBuilder ( ) fun logged ( message : String , value : Int ) = value . also { log . append ( message ) } fun box ( ) : String { var sum = 0 for ( i in ( logged ( "" , 1 ) .. logged ( "" , 4 ) ) . reversed ( ) . reversed ( ) ) { sum = sum * 10 + i } assertEquals ( 0 , sum ) assertEquals ( "" , log . toString ( ) ) return "OK" }
package org . jetbrains . kotlin . gradle . idea . proto . generated . tcs ; @ kotlin . jvm . JvmName ( "" ) inline fun ideaKotlinSourceDependencyProto ( block : org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProtoKt . Dsl . ( ) -> kotlin . Unit ) : org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProto = org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProtoKt . Dsl . _create ( this . toBuilder ( ) ) . apply { block ( ) } . _build ( )
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . utils . expandedConeType import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbrains . kot
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . utils . expandedConeType import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbrains . kot
@ kotlin . jvm . JvmName ( "" ) @ kotlin . internal . InlineOnly public inline fun < T > Sequence < T > . elementAt ( index : Int ) : T { return elementAtOrElse ( index ) { throw IndexOutOfBoundsException ( "" ) } } @ kotlin . jvm . JvmName ( "" ) @ kotlin . internal . InlineOnly public inline fun < T > Sequence < T > . elementAtOrElse ( index : Int , defaultValue : ( Int ) -> T ) : T { return elementAtOrElse ( index ) { defaultValue ( it ) } }





package org . jetbrains . kotlinx . kandy . letsplot . layers . context import org . jetbrains . kotlinx . kandy . dsl . internal . LayerCollectorContext import org . jetbrains . kotlinx . kandy . dsl . internal . LayerContextInterface import org . jetbrains . kotlinx . kandy . ir . aes . Aes import org . jetbrains . kotlinx . kandy . ir . geom . Geom import org . jetbrains . kotlinx . kandy . letsplot . internal . X import org . jetbrains . kotlinx . kandy . letsplot . internal . Y_MAX import org . jetbrains . kotlinx . kandy . letsplot . internal . Y_MIN import org . jetbrains . kotlinx . kandy . letsplot . layers . context . aes . * import org . jetbrains . kotlinx . kandy . letsplot . layers . geom . ERROR_BAR public interface ErrorB









@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * val log = StringBuilder ( ) fun logged ( message : String , value : Int ) = value . also { log . append ( message ) } fun box ( ) : String { var sum = 0 for ( i in ( logged ( "" , 1 ) .. logged ( "" , 4 ) ) . reversed ( ) . reversed ( ) ) { sum = sum * 10 + i } assertEquals ( 0 , sum ) assertEquals ( "" , log . toString ( ) ) return "OK" }
import kotlin . test . * val log = StringBuilder ( ) fun logged ( message : String , value : Int ) = value . also { log . append ( message ) } fun box ( ) : String { var sum = 0 for ( i in ( logged ( "" , 1 ) .. logged ( "" , 4 ) ) . reversed ( ) . reversed ( ) ) { sum = sum * 10 + i } assertEquals ( 0 , sum ) assertEquals ( "" , log . toString ( ) ) return "OK" }
import kotlinx . coroutines . * import kotlinx . coroutines . channels . * import kotlinx . coroutines . selects . * import org . openjdk . jmh . annotations . * import java . util . concurrent . * import java . util . concurrent . atomic . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * @ Warmup ( iterations = 5 , time = 1 , timeUnit = TimeUnit . SECONDS ) @ Measurement ( iterations = 5 , time = 1 , timeUnit = TimeUnit . SECONDS ) @ Fork ( value = 1 ) @ BenchmarkMode ( Mode . AverageTime ) @ OutputTimeUnit ( TimeUnit . MILLISECONDS ) @ State ( Scope . Benchmark ) open class CombineTwoFlowsBenchmark { @ Param ( "" , "" ) private var size = 0 @ Benchmark fun combinePlain ( ) = runBlocking {
import kotlinx . coroutines . * import kotlinx . coroutines . channels . * import kotlinx . coroutines . internal . * import kotlinx . coroutines . selects . * import kotlin . test . * class AwaitFinaliseDslTest : TestBase ( ) { @ Test fun testCancellation ( ) = runTest { expect ( 1 ) val job = launch { expect ( 2 ) delay ( Long . MAX_VALUE ) expectUnreached ( ) } yield ( ) expect ( 3 ) job . cancel ( ) yield ( ) finish ( 4 ) } }




package org . jetbrains . kotlin . gradle . plugin . mpp import org . gradle . api . DefaultTask import org . gradle . api . Project import org . gradle . api . Task import org . gradle . api . file . DirectoryProperty import org . gradle . api . plugins . BasePlugin import org . gradle . api . provider . Provider import org . gradle . api . tasks . * import org . gradle . work . DisableCachingByDefault import org . jetbrains . kotlin . gradle . plugin . KotlinCompilation import org . jetbrains . kotlin . gradle . plugin . KotlinPluginLifecycle import org . jetbrains . kotlin . gradle . plugin . launchInStage import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinAndroidTarget import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinJvmAndroidCompilationFactory import org . jetbrains . kotlin . grad
import kotlinx . coroutines . * import kotlinx . coroutines . channels . * import kotlinx . coroutines . debug . * import kotlinx . coroutines . launch import kotlinx . coroutines . runBlocking import kotlin . test . * class FinaliseDslTest : TestBase ( ) { @ Test fun testFinaliseDsl ( ) = runBlocking { val job = launch { try { delay ( Long . MAX_VALUE ) } finally { throw RuntimeException ( ) } } job . join ( ) } }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }



fun build ( ) : SourceSetModel { return SourceSetModel ( sourceSetName = "" , sourceRoots = listOf ( File ( "" ) ) , dependentSourceSets = emptySet ( ) , sourceSetBinaryLayout = SourceSetModel . SourceSetLayout . KLIB ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong { open fun pong ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
fun build ( ) : SourceSetModel { return SourceSetModel ( sourceSetName = "" , sourceRoots = listOf ( File ( "" ) ) , dependentSourceSets = emptySet ( ) , sourceSetBinaryLayout = SourceSetModel . SourceSetLayout . KLIB ) }
package org . jetbrains . kotlin . gradle . idea . proto . tcs import org . jetbrains . kotlin . gradle . idea . proto . Extras import org . jetbrains . kotlin . gradle . idea . proto . IdeaExtrasProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . ideaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . tcs . IdeaKotlinSourceDependency import org . jetbrains . kotlin . gradle . idea . testFixtures . tcs . TestIdeaKotlinInstances import org . jetbrains . kotlin . gradle . idea . testFixtures . tcs . TestIdeaKotlinInstances . simpleProject import org . jetbrains . kotlin . gradle . idea . testFixtures .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface Landmark


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface FooInterface { fun methodWithOutArgs ( ) } external open class FooClass { open fun methodWithOutArgs ( ) }



import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }

import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . AnyColumnReference import org . jetbrains . kotlinx . dataframe . ColumnsSelector import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx

import kotlin . test . * fun box ( ) : String { val flow = flowOf ( 1 , 2 , 3 ) assertEquals ( 3 , flow . skip ( 1 ) . sum ( ) ) assertEquals ( 2 , flow . skip ( 2 ) . sum ( ) ) assertEquals ( 1 , flow . skip ( 3 ) . sum ( ) ) return "OK" }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }

import kotlin . test . * fun box ( ) : String { var sum = 0 for ( i in ( 1 .. 4 ) . reversed ( ) ) { sum = sum * 10 + i } assertEquals ( 0 , sum ) var sumL = 0L for ( i in ( 1L .. 0 ) . reversed ( ) ) { sumL = sumL * 10 + i } assertEquals ( 0 , sumL ) var sumC = 0 for ( i in ( '1' .. '4' ) . reversed ( ) ) { sumC = sumC * 10 + i . toInt ( ) - '0' . toInt ( ) } assertEquals ( 0 , sumC ) return "OK" }
package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . AnyColumnReference import org . jetbrains . kotlinx . dataframe . ColumnsSelector import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbr

import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }

import kotlin . test . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * val sb = StringBuilder ( ) open class EmptyContinuation ( override val context : CoroutineContext = EmptyCoroutineContext ) : Continuation < Any ? > { companion object : EmptyContinuation ( ) override fun resumeWith ( result : Result < Any ? > ) { result . getOrThrow ( ) } } suspend fun s1 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resume ( 42 ) COROUTINE_SUSPENDED } suspend fun s2 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resumeWithException ( Error ( ) ) COROUTINE_SUSPENDED } fun f1 ( ) : Int { sb . appendLine ( "" ) return 0
import kotlin . test . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * val sb = StringBuilder ( ) open class EmptyContinuation ( override val context : CoroutineContext = EmptyCoroutineContext ) : Continuation < Any ? > { companion object : EmptyContinuation ( ) override fun resumeWith ( result : Result < Any ? > ) { result . getOrThrow ( ) } } suspend fun s1 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resume ( 42 ) COROUTINE_SUSPENDED } suspend fun s2 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resumeWithException ( Error ( ) ) COROUTINE_SUSPENDED } fun f1 ( ) : Int { sb . appendLine ( "" ) return 0
import kotlin . test . * fun box ( ) : String { val flow : Flow < Int > = flow { emit ( 1 ) } val flow2 : Flow < Int > = flow { emit ( 2 ) } val flow3 : Flow < Int > = flow { emit ( 3 ) } val flow4 : Flow < Int > = flow { emit ( 4 ) } val flow5 : Flow < Int > = flow { emit ( 5 ) } val flow6 : Flow < Int > = flow { emit ( 6 ) } val flow7 : Flow < Int > = flow { emit ( 7 ) } val flow8 : Flow < Int > = flow { emit ( 8 ) } val flow9 : Flow < Int > = flow { emit ( 9 ) } val flow10 : Flow < Int > = flow { emit ( 10 ) } val flow11 : Flow < Int
import kotlin . test . * fun box ( ) : String { val flow = flowOf ( 1 , 2 , 3 ) var sum = 0 flow . forEach { sum += it } assertEquals ( 6 , sum ) return "OK" }
import kotlin . reflect . KProperty class Delegate { var inner = 1 operator fun getValue ( t : Any ? , p : KProperty < * > ) : Int = inner operator fun setValue ( t : Any ? , p : KProperty < * > , i : Int ) { inner = i } } class A { inner class B { var prop : Int by Delegate ( ) } } fun box ( ) : String { val c = A ( ) . B ( ) if ( c . prop != 1 ) return "" c . prop = 2 if ( c . prop != 2 ) return "" return "OK" }
@ Deprecated ( level = DeprecationLevel . ERROR , message = "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "
import kotlin . test . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * val sb = StringBuilder ( ) open class EmptyContinuation ( override val context : CoroutineContext = EmptyCoroutineContext ) : Continuation < Any ? > { companion object : EmptyContinuation ( ) override fun resumeWith ( result : Result < Any ? > ) { result . getOrThrow ( ) } } suspend fun s1 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resume ( 42 ) COROUTINE_SUSPENDED } fun f1 ( ) : Int { sb . appendLine ( "" ) return 0 } fun f2 ( ) : Int { sb . appendLine ( "" ) return 1 } fun f3 ( x : Int , y : Int ) : Int { sb . appendLine ( ""
import kotlin . test . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * val sb = StringBuilder ( ) open class EmptyContinuation ( override val context : CoroutineContext = EmptyCoroutineContext ) : Continuation < Any ? > { companion object : EmptyContinuation ( ) override fun resumeWith ( result : Result < Any ? > ) { result . getOrThrow ( ) } } suspend fun s1 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resume ( 42 ) COROUTINE_SUSPENDED } fun f1 ( ) : Int { sb . appendLine ( "" ) return 0 } fun f2 ( ) : Int { sb . appendLine ( "" ) return 1 } fun f3 ( x : Int , y : Int ) : Int { sb . appendLine ( ""
import kotlin . test . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * val sb = StringBuilder ( ) open class EmptyContinuation ( override val context : CoroutineContext = EmptyCoroutineContext ) : Continuation < Any ? > { companion object : EmptyContinuation ( ) override fun resumeWith ( result : Result < Any ? > ) { result . getOrThrow ( ) } } suspend fun s1 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resume ( 42 ) COROUTINE_SUSPENDED } fun f1 ( ) : Int { sb . appendLine ( "" ) return 0 } fun f2 ( ) : Int { sb . appendLine ( "" ) return 1 } fun f3 ( x : Int , y : Int ) : Int { sb . appendLine ( ""
import androidx . compose . runtime . * import androidx . compose . runtime . snapshots . SnapshotStateList import androidx . compose . ui . Alignment import androidx . compose . ui . Modifier import androidx . compose . ui . text . style . TextAlign import androidx . compose . ui . unit . dp import com . example . jetsnack . * import com . example . jetsnack . ui . theme . JetsnackTheme import com . example . jetsnack . model . OrderLine import com . example . jetsnack . model . SnackRepo import com . example . jetsnack . model . SnackbarManager import com . example . jetsnack . model . Snackbar import com . example . jetsnack . model . SnackbarManager import com . example . jetsnack . ui . theme . JetsnackTheme import com . example . jetsnack . ui . theme . Neutral8 import com . example . jetsnack . ui . theme . JetsnackTheme
package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe
import kotlinx . coroutines . * import kotlinx . coroutines . testing . * import kotlin . test . * class DelayTest : TestBase ( ) { @ Test fun testDelay ( ) = runTest { expect ( 1 ) val deferred = async { expect ( 3 ) delay ( 0 ) expect ( 4 ) } expect ( 2 ) yield ( ) expect ( 5 ) deferred . await ( ) finish ( 6 ) } }
import org . jetbrains . dokka . base . testApi . testRunner . BaseAbstractTest import org . jetbrains . dokka . links . DRI import org . jetbrains . dokka . model . DisplaySourceSet import org . jetbrains . dokka . model . dfs import org . jetbrains . dokka . model . withDescendants import kotlin . test . Test import kotlin . test . assertEquals import kotlin . test . assertTrue class GetDRIFromReceiverParameterTest : BaseAbstractTest ( ) { private val configuration = dokkaConfiguration { sourceSets { sourceSet { sourceRoots = listOf ( "src/" ) analysisPlatform = "jvm" sourceRoots = listOf ( "" ) } } } @ Test fun `get DRI from receiver` ( ) { testInline ( """""" . trimIndent ( ) , configuration ) { documentablesTransformationStage = { module -
import org . jetbrains . dokka . base . testApi . testRunner . BaseAbstractTest import org . jetbrains . dokka . links . DRI import org . jetbrains . dokka . model . DFunction import org . jetbrains . dokka . model . dfs import org . jetbrains . dokka . model . withDescendants import kotlin . test . Test import kotlin . test . assertEquals import kotlin . test . assertTrue class GetDRIFromLocalFunctionTest : BaseAbstractTest ( ) { private val configuration = dokkaConfiguration { sourceSets { sourceSet { sourceRoots = listOf ( "src/" ) analysisPlatform = "jvm" classpath += jvmStdlibPath ! ! } } } @ Test fun `get DRI from local function` ( ) { testInline ( """""" . trimIndent ( ) , configuration ) { documentablesTransformationStage = { module ->
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class GrandParent ( ) external open class Parent ( ) : GrandParent external open class Child ( ) : Parent
import org . jetbrains . kotlin . ir . declarations . IrTypeParameter import org . jetbrains . kotlin . ir . types . IrType import org . jetbrains . kotlin . ir . types . IrTypeAbbreviation import org . jetbrains . kotlin . ir . types . IrTypeArgument import org . jetbrains . kotlin . ir . types . IrTypeAbbreviationImpl import org . jetbrains . kotlin . ir . types . IrTypeArgumentList import org . jetbrains . kotlin . ir . types . IrTypeAbbreviation import org . jetbrains . kotlin . ir . types . IrTypeAbbreviationImpl import org . jetbrains . kotlin . ir . types . IrTypeArgument import org . jetbrains . kotlin . ir . types . IrTypeAbbreviation import org . jetbrains . kotlin . ir . types . IrTypeAbbreviationImpl import org . jetbrains . kotlin . ir . types . IrTypeArg


package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbr
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbr
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo { open fun bar ( ) : Number companion object { var variable : String } }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
fun test ( ) { val a = File ( "" ) a . deleteDirectoryContents ( ) }
import kotlin . test . * fun box ( ) : String { try { File ( "" ) . deleteRecursively ( ) } catch ( e : Exception ) { return "OK" } return "" }
package org . jetbrains . kotlin . gradle . plugin . mpp . apple import org . gradle . api . DefaultTask import org . gradle . api . Project import org . gradle . api . tasks . * import org . gradle . work . DisableCachingByDefault import org . jetbrains . kotlin . gradle . plugin . KotlinProjectSetupAction import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_NATIVE_USE_XCODE_MESSAGE_STYLE import org . jetbrains . kotlin . gradle . plugin . cocoapods . KotlinCocoapodsPlugin import org . jetbrains . kotlin . gradle . plugin . cocoapods . KotlinCocoapodsPlugin . Companion . POD_BUILD_TASK_NAME import org . jetbrains . kotlin . gradle . plugin . cocoapods .
package org . jetbrains . kotlin . gradle . idea . proto . generated . tcs ; @ kotlin . jvm . JvmName ( "" ) inline fun ideaKotlinSourceDependencyProto ( block : org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProtoKt . Dsl . ( ) -> kotlin . Unit ) : org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProto = org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProtoKt . Dsl . _create ( this . toBuilder ( ) ) . apply { block ( ) } . _build ( ) object IdeaKotlinSourceDependencyProtoKt { @ kotlin . OptIn ( com . google . protobuf . kotlin . OnlyForUseByGeneratedProtoCode :: class ) @ com .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

package org . jetbrains . kotlin . gradle . plugin . mpp . apple import org . gradle . api . DefaultTask import org . gradle . api . Project import org . gradle . api . tasks . * import org . gradle . work . DisableCachingByDefault import org . jetbrains . kotlin . gradle . plugin . KotlinProjectSetupAction import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_NATIVE_USE_XCODE_MESSAGE_STYLE import org . jetbrains . kotlin . gradle . plugin . cocoapods . KotlinCocoapodsPlugin import org . jetbrains . kotlin . gradle . plugin . cocoapods . KotlinCocoapodsPlugin . Companion . POD_BUILD_TASK_NAME import org . jetbrains . kotlin . gradle . plugin . cocoapods .
package org . jetbrains . kotlin . gradle . plugin . mpp . apple import org . gradle . api . DefaultTask import org . gradle . api . Project import org . gradle . api . tasks . * import org . gradle . work . DisableCachingByDefault import org . jetbrains . kotlin . gradle . plugin . KotlinProjectSetupAction import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_NATIVE_USE_XCODE_MESSAGE_STYLE import org . jetbrains . kotlin . gradle . plugin . cocoapods . KotlinCocoapodsPlugin import org . jetbrains . kotlin . gradle . plugin . cocoapods . KotlinCocoapodsPlugin . Companion . POD_BUILD_TASK_NAME import org . jetbrains . kotlin . gradle . plugin . cocoapods .
import org . jetbrains . kotlin . fir . FirSession import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . declarations . utils . isInner import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir . declarations . utils . isOverride import org . jetbrains . kotlin . fir . declarations . utils . isStatic import org . jetbrains . kotlin . fir . declarations . utils . isSuspend import org . jetbrains . kotlin . fir . declarations . utils . isTailRec import org . jetbrains . kotlin . fir . declarations . utils . isInline import org . jetbrains . kotlin . fir . declarations . utils . isInfix import org . jetbrains . kotlin . fir . declarations . utils . isOperator import org . jetbrains . kotlin . fir . declarations .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any ? get ( ) = definedExternally set ( value ) = definedExternally var boo : String ? get ( ) = definedExternally set ( value
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirClass import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInner import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir .

@ file : JsQualifier ( "" ) @ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) package fs . chmod import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external fun __promisify__ ( path : String , mode : Number ) : Promise < Unit >
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : JsQualifier ( "" ) @ file : JsModule ( "" ) @ file : JsNonModule @ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) package foo . bar . baz import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Klass { open fun method ( ) : String companion object { <EOL



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any } external open class Foo { open fun bar ( a : Any ) : Number open var baz : Any }






import helpers . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } suspend fun calculate ( ) = "OK" fun box ( ) : String { var result = "" builder { result = calculate ( ) } return result }
import helpers . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * suspend fun suspendHere ( ) : String = suspendCoroutineUninterceptedOrReturn { x -> x . resume ( "K" ) COROUTINE_SUSPENDED } suspend fun suspendWithArgument ( v : String ) : String = suspendCoroutineUninterceptedOrReturn { x -> x . resume ( v ) COROUTINE_SUSPENDED } suspend fun suspendWithDouble ( v : Double ) : Double = suspendCoroutineUninterceptedOrReturn { x -> x . resume ( v ) COROUTINE_SUSPENDED } suspend fun suspendWithBoolean ( v : Boolean ) : Boolean = suspendCoroutineUninterceptedOrReturn { x -> x . resume ( v ) COROUTINE_SUSPENDED } fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } fun box
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlin . diagnostics . DiagnosticSink import org . jetbrains . kotlin . diagnostics . Errors import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . expressions . FirQualifiedAccessExpression import org . jetbrains . kotlin . fir . expressions . FirResolvedQualifier import org . jetbrains . kotlin . fir . types . coneType object FirResolvedQualifierChecker : FirQualifiedAccessExpressionChecker ( MppCheckerKind . Common ) { override fun check ( expression : FirQualifiedAcce

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface FooInterface { fun method ( ) var prop : String } external open class FooClass { open fun method ( ) open var prop : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) }
@ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun UShort . until ( to : UShort ) : UIntRange @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun UInt . until ( to : UInt ) : UIntRange @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . until ( to : ULong ) : ULongRange
@ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . until ( to : ULong ) : ULongRange @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun UByte . until ( to : UByte ) : UByteRange @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun UShort . until ( to : UShort ) : UShortRange @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun UInt . until ( to : UInt ) : UIntRange @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . until ( to : ULong ) : ULongRange @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: cla
@ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . until ( to : ULong ) : ULongRange { if ( to <= ULong . MIN_VALUE ) return ULongRange . EMPTY return ULongRange ( this , to - 1u ) } @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . until ( to : ULong ) : ULongRange { if ( to >= ULong . MAX_VALUE ) return ULongRange . EMPTY return ULongRange ( this , to - 1u ) } @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . until ( to : ULong ) : ULongRange { if ( to <= ULong . MIN_VALUE ) return ULongRange . EMPTY return ULongRange ( this , to - 1u ) } @ SinceKot
@ SinceKotlin ( "1.4" ) public infix fun Byte . until ( to : Byte ) : IntRange { return this . toInt ( ) .. ( to . toInt ( ) - 1 ) . toInt ( ) } @ SinceKotlin ( "1.4" ) public infix fun Short . until ( to : Short ) : IntRange { return this . toInt ( ) .. ( to . toInt ( ) - 1 ) . toInt ( ) } @ SinceKotlin ( "1.4" ) public infix fun Int . until ( to : Int ) : IntRange { return this .. ( to . toInt ( ) - 1 ) . toInt ( ) } @ SinceKotlin ( "1.4" ) public infix fun Long . until ( to : Long ) : LongRange { return this .. ( to . toLong ( ) - 1 ) . toLong ( ) } @ SinceKotlin ( "1.4" ) public infix fun ULong . until ( to : ULong ) : ULongRange
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

import kotlin . test . * fun box ( ) : String { assertTrue ( 'U+0020' . isWhitespace ( ) ) assertFalse ( '' . isWhitespace ( ) ) return "OK" }
@ file : JvmName ( "" ) @ file : JvmMultifileClass package test fun foo ( ) { }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
fun box ( ) : String { val map = HashMap < String , String > ( ) map . put ( "O" , "K" ) return "O" + map . get ( "O" ) }







package kotlinx . coroutines import kotlinx . coroutines . testing . * import kotlinx . coroutines . * import org . junit . * import org . junit . Test import java . util . concurrent . * import java . util . concurrent . atomic . * import kotlin . coroutines . * import kotlin . test . * class ReusableCancellableContinuationInvariantStressTest : TestBase ( ) { private val nSenders = 2 private val nReceivers = 2 private val nEvents = 0 * stressTestMultiplier private val timeLimit = 0 * stressTestMultiplier private val sent = atomic ( 0 ) private val received = atomic ( 0 ) private val pool = newFixedThreadPoolContext ( nSenders + nReceivers , "" ) @ After fun tearDown ( ) { pool . close ( ) } @ Test fun testStress ( ) = run


package org . jetbrains . kotlin . konan . test . blackbox . support . runner import org . jetbrains . kotlin . konan . test . blackbox . AbstractNativeSimpleTest import org . jetbrains . kotlin . konan . test . blackbox . support . * import org . jetbrains . kotlin . konan . test . blackbox . support . TestCase . NoTestRunnerExtras import org . jetbrains . kotlin . konan . test . blackbox . support . compilation . TestCompilationArtifact . Executable import org . jetbrains . kotlin . konan . test . blackbox . support . compilation . TestCompilationFactory import org . jetbrains . kotlin . konan . test . blackbox . support . compilation . TestCompilationResult . Companion . assertSuccess import org . jetbrains . kotlin . konan . test . blackbox . support . group . TestCaseGroupProvider import org . jetbrains . kotlin . konan . test . blackbox
package org . jetbrains . kotlin . gradle . plugin . internal import org . gradle . api . internal . tasks . testing . TestResultProcessor import org . gradle . api . internal . tasks . testing . TestStartEvent import org . jetbrains . kotlin . gradle . internal . testing . KotlinTestRunnerListener import org . jetbrains . kotlin . gradle . internal . testing . KotlinTestResultProcessor import org . jetbrains . kotlin . gradle . internal . testing . KotlinTestStartEvent import org . jetbrains . kotlin . gradle . internal . testing . KotlinTestResultProcessorImpl import org . jetbrains . kotlin . gradle . plugin . KotlinCompilation import org . jetbrains . kotlin . gradle . plugin . KotlinCompilationInfo import org . jetbrains . kotlin . gradle . plugin . KotlinSourceSet import org . jetbrains . kotlin . gradle . plugin . KotlinTarget import org . jetbrains .


package org . jetbrains . kotlin . test . runners . codegen import org . jetbrains . kotlin . test . Constructor import org . jetbrains . kotlin . test . TargetBackend import org . jetbrains . kotlin . test . backend . BlackBoxCodegenSuppressor import org . jetbrains . kotlin . test . backend . BlackBoxInlinerCodegenSuppressor import org . jetbrains . kotlin . test . backend . handlers . IrInlineBodiesHandler import org . jetbrains . kotlin . test . backend . ir . IrBackendInput import org . jetbrains . kotlin . test . backend . ir . JvmIrBackendFacade import org . jetbrains . kotlin . test . backend . ir . JvmIrBackendInput import org . jetbrains . kotlin . test . builders . TestConfigurationBuilder import org . jetbrains . kotlin . test . builders . configureJvmArtifactsHandlersStep import org . jetbrains . kotlin
import kotlin . test . * val sb = StringBuilder ( ) fun box ( ) : String { sb . appendLine ( foo ( ) ) assertEquals ( """""" . trimIndent ( ) , sb . toString ( ) ) return "OK" } fun foo ( ) : Int { sb . appendLine ( "" ) return 0 }
import kotlin . test . * val log = StringBuilder ( ) fun < T > logged ( message : String , value : T ) : T { log . append ( message ) return value } fun box ( ) : String { var sum = 0 for ( i in ( logged ( "" , 1 ) .. logged ( "" , 4 ) ) . reversed ( ) . reversed ( ) ) { sum = sum * 10 + i } assertEquals ( 0 , sum ) assertEquals ( "" , log . toString ( ) ) return "OK" }
package org . jetbrains . kotlin . gradle . plugin . internal import org . gradle . api . internal . tasks . testing . TestResultProcessor import org . gradle . api . internal . tasks . testing . TestStartEvent import org . jetbrains . kotlin . gradle . internal . testing . KotlinTestRunnerListener import org . jetbrains . kotlin . gradle . internal . testing . KotlinTestRunner import org . jetbrains . kotlin . gradle . internal . testing . KotlinTestResultProcessor import org . jetbrains . kotlin . gradle . internal . testing . KotlinTestStartEvent import org . jetbrains . kotlin . gradle . plugin . KotlinPlatformType import org . jetbrains . kotlin . gradle . plugin . KotlinTarget import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinMetadataTarget import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinNativeTarget import org . jet
package org . jetbrains . kotlin . gradle . plugin . internal import org . gradle . api . internal . tasks . testing . TestResultProcessor import org . gradle . api . internal . tasks . testing . TestStartEvent import org . jetbrains . kotlin . gradle . internal . testing . KotlinTestRunnerListener import org . jetbrains . kotlin . gradle . internal . testing . KotlinTestResultProcessorImpl import org . jetbrains . kotlin . gradle . plugin . KotlinPlatformType import org . jetbrains . kotlin . gradle . plugin . KotlinTarget import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinAndroidTarget import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinJvmAndroidCompilationFactory import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinMetadataTarget import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinNativeTarget
import kotlin . test . * import kotlin . reflect . * import kotlin . reflect . jvm . * import kotlin . test . * class C { companion object { @ JvmField val x = "OK" } } fun box ( ) : String { val field = C . Companion :: class . java . getDeclaredField ( "x" ) return field . get ( null ) as String }


import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
@ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun maxOf ( a : Short , b : Short ) : Short { return Math . max ( a . toInt ( ) , b . toInt ( ) ) . toShort ( ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun maxOf ( a : Int , b : Int ) : Int { return Math . max ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun maxOf ( a : Long , b : Long ) : Long { return Math . max ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun maxOf ( a : Float , b : Float ) : Float { return Math . max ( a , b ) } @ SinceKotlin ( "1.1"
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > "" } }
@ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Int , vararg other : Int ) : Int { var max = a for ( e in other ) max = maxOf ( max , e ) return max }
@ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun maxOf ( a : Float , b : Float ) : Float { return Math . max ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun maxOf ( a : Double , b : Double ) : Double { return Math . max ( a , b ) }
import kotlin . test . * fun box ( ) : String { assertEquals ( 0 , maxOf ( 0 , 0 ) ) assertEquals ( 0 , maxOf ( 0 , 0 ) ) assertEquals ( 0 , maxOf ( 0 , 0 ) ) assertEquals ( 0 , maxOf ( 0 , 0 ) ) assertEquals ( 0 , maxOf ( 0 , 0 ) ) assertEquals ( 0 , maxOf ( 0 , 0 ) ) assertEquals ( 0 , maxOf ( 0 , 0 ) ) assertEquals ( 0 , maxOf ( 0 , 0 ) ) assertEquals ( 0 , maxOf ( 0 , 0 ) ) return "OK" }
@ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun maxOf ( a : Int , b : Int ) : Int { return Math . max ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun maxOf ( a : Long , b : Long ) : Long { return Math . max ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun maxOf ( a : Short , b : Short ) : Short { return Math . max ( a . toInt ( ) , b . toInt ( ) ) . toShort ( ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun maxOf ( a : Byte , b : Byte ) : Byte { return Math . max ( a . toInt ( ) , b . toInt ( ) ) . toByte (
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
fun box ( ) : String { return if ( maxOf ( 1 , 2 , 3 ) == 3 ) "OK" else "fail" }
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > "" } }
@ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Int , vararg other : Int ) : Int { var max = a for ( e in other ) max = maxOf ( max , e ) return max }
@ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Int , b : Int , c : Int ) : Int { return Math . max ( a , Math . max ( b , c ) ) }
@ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Double , b : Double , c : Double ) : Double { return Math . max ( a , Math . max ( b , c ) ) } @ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Float , b : Float , c : Float , d : Float ) : Float { return Math . max ( a , Math . max ( b , c , d ) ) } @ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Double , b : Double , c : Double , d : Double ) : Double { return Math . max ( a , Math . max ( b , c , d ) ) }
@ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Int , vararg other : Int ) : Int { var max = a for ( e in other ) max = maxOf ( max , e ) return max } @ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Long , vararg other : Long ) : Long { var max = a for ( e in other ) max = maxOf ( max , e ) return max } @ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Float , vararg other : Float ) : Float { var max = a for ( e in other ) max = maxOf ( max , e ) return max } @ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Double , vararg other : Double ) : Double { var max = a for ( e in other ) max = maxOf ( max , e ) return max }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
@ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Short , vararg other : Short ) : Short { var max = a for ( e in other ) max = maxOf ( max , e ) return max } @ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Int , vararg other : Int ) : Int { var max = a for ( e in other ) max = maxOf ( max , e ) return max } @ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Long , vararg other : Long ) : Long { var max = a for ( e in other ) max = maxOf ( max , e ) return max } @ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Float , vararg other : Float ) : Float { var max = a for ( e in other ) max = maxOf ( max , e ) return max } @ SinceKot
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > "" } }
@ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Long , vararg other : Long ) : Long { var max = a for ( e in other ) max = maxOf ( max , e ) return max }
@ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Int , vararg other : Int ) : Int { var max = a for ( e in other ) max = maxOf ( max , e ) return max }
@ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Double , vararg other : Double ) : Double { var max = a for ( e in other ) max = maxOf ( max , e ) return max }
@ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Int , vararg other : Int ) : Int { var max = a for ( e in other ) max = maxOf ( max , e ) return max } @ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Long , vararg other : Long ) : Long { var max = a for ( e in other ) max = maxOf ( max , e ) return max } @ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Float , vararg other : Float ) : Float { var max = a for ( e in other ) max = maxOf ( max , e ) return max } @ SinceKotlin ( "1.4" ) public actual fun maxOf ( a : Double , vararg other : Double ) : Double { var max = a for ( e in other ) max = maxOf ( max , e ) return max }
@ SinceKotlin ( "1.1" ) public actual fun < T : Comparable < T > > minOf ( a : T , vararg other : T ) : T { var min = a for ( e in other ) min = minOf ( min , e ) return min }
@ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Short , b : Short ) : Short { return Math . min ( a . toInt ( ) , b . toInt ( ) ) . toShort ( ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Int , b : Int ) : Int { return Math . min ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Long , b : Long ) : Long { return Math . min ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Float , b : Float ) : Float { return Math . min ( a , b ) } @ SinceKotlin ( "1.1"
@ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Int , b : Int ) : Int { return Math . min ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Long , b : Long ) : Long { return Math . min ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Float , b : Float ) : Float { return Math . min ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Double , b : Double ) : Double { return Math . min ( a , b ) }
@ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Long , b : Long ) : Long { return Math . min ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Float , b : Float ) : Float { return Math . min ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Double , b : Double ) : Double { return Math . min ( a , b ) }
@ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Float , b : Float ) : Float { return Math . min ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Double , b : Double ) : Double { return Math . min ( a , b ) }
@ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Int , b : Int ) : Int { return Math . min ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Long , b : Long ) : Long { return Math . min ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Byte , b : Byte ) : Byte { return Math . min ( a . toInt ( ) , b . toInt ( ) ) . toByte ( ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Short , b : Short ) : Short { return Math . min ( a . toInt ( ) , b . toInt ( ) ) . toShort (
@ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Int , b : Int ) : Int { return Math . min ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Long , b : Long ) : Long { return Math . min ( a , b ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Short , b : Short ) : Short { return Math . min ( a . toInt ( ) , b . toInt ( ) ) . toShort ( ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Byte , b : Byte ) : Byte { return Math . min ( a . toInt ( ) , b . toInt ( ) ) . toByte (
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
@ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Short , b : Short , c : Short ) : Short { return Math . min ( a . toInt ( ) , Math . min ( b . toInt ( ) , c . toInt ( ) ) ) . toShort ( ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Int , b : Int , c : Int ) : Int { return Math . min ( a , Math . min ( b , c ) ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Long , b : Long , c : Long ) : Long { return Math . min ( a , Math . min ( b , c ) ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun min
@ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Int , b : Int , c : Int ) : Int { return Math . min ( a , Math . min ( b , c ) ) } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Long , b : Long , c : Long ) : Long { return Math . min ( a , Math . min ( b , c ) ) } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Float , b : Float , c : Float ) : Float { return Math . min ( a , Math . min ( b , c ) ) } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Double , b : Double , c : Double ) : Double { return Math . min ( a , Math . min ( b , c ) ) }
@ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Long , b : Long , c : Long ) : Long { return Math . min ( a , Math . min ( b , c ) ) } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Float , b : Float , c : Float ) : Float { return Math . min ( a , Math . min ( b , c ) ) } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Double , b : Double , c : Double ) : Double { return Math . min ( a , Math . min ( b , c ) ) }
@ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Float , b : Float , c : Float ) : Float { return Math . min ( a , Math . min ( b , c ) ) } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Double , b : Double , c : Double ) : Double { return Math . min ( a , Math . min ( b , c ) ) }
@ SinceKotlin ( "1.1" ) public actual fun minOf ( a : Int , b : Int , c : Int ) : Int { return Math . min ( a , Math . min ( b , c ) ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Long , b : Long , c : Long ) : Long { return Math . min ( a , Math . min ( b , c ) ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Short , b : Short , c : Short ) : Short { return Math . min ( a , Math . min ( b , c ) ) }
@ SinceKotlin ( "1.1" ) public actual fun minOf ( a : Int , b : Int , c : Int ) : Int { return Math . min ( a , Math . min ( b , c ) ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Long , b : Long , c : Long ) : Long { return Math . min ( a , Math . min ( b , c ) ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Float , b : Float , c : Float ) : Float { return Math . min ( a , Math . min ( b , c ) ) } @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun minOf ( a : Double , b : Double , c : Double ) : Double { return Math . min ( a , Math . min ( b , c
@ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Int , vararg other : Int ) : Int { var min = a for ( e in other ) min = minOf ( min , e ) return min } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Long , vararg other : Long ) : Long { var min = a for ( e in other ) min = minOf ( min , e ) return min } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Float , vararg other : Float ) : Float { var min = a for ( e in other ) min = minOf ( min , e ) return min } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Double , vararg other : Double ) : Double { var min = a for ( e in other ) min = minOf ( min , e ) return min }
@ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Short , vararg other : Short ) : Short = minOf ( a , * other ) @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Int , vararg other : Int ) : Int = minOf ( a , * other ) @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Long , vararg other : Long ) : Long = minOf ( a , * other ) @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Float , vararg other : Float ) : Float = minOf ( a , * other ) @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Double , vararg other : Double ) : Double = minOf ( a , * other )
@ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Int , vararg other : Int ) : Int { var min = a for ( e in other ) min = minOf ( min , e ) return min } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Long , vararg other : Long ) : Long { var min = a for ( e in other ) min = minOf ( min , e ) return min } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Float , vararg other : Float ) : Float { var min = a for ( e in other ) min = minOf ( min , e ) return min } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Double , vararg other : Double ) : Double { var min = a for ( e in other ) min = minOf ( min , e ) return min }
@ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Long , vararg other : Long ) : Long { var min = a for ( e in other ) min = minOf ( min , e ) return min } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Float , vararg other : Float ) : Float { var min = a for ( e in other ) min = minOf ( min , e ) return min } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Double , vararg other : Double ) : Double { var min = a for ( e in other ) min = minOf ( min , e ) return min }
@ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Float , vararg other : Float ) : Float { var min = a for ( e in other ) min = minOf ( min , e ) return min } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Double , vararg other : Double ) : Double { var min = a for ( e in other ) min = minOf ( min , e ) return min }
@ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Double , vararg other : Double ) : Double { var min = a for ( e in other ) min = minOf ( min , e ) return min }
@ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Float , vararg other : Float ) : Float { var min = a for ( e in other ) min = minOf ( min , e ) return min } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Int , vararg other : Int ) : Int { var min = a for ( e in other ) min = minOf ( min , e ) return min } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Long , vararg other : Long ) : Long { var min = a for ( e in other ) min = minOf ( min , e ) return min } @ SinceKotlin ( "1.4" ) public actual fun minOf ( a : Short , vararg other : Short ) : Short { var min = a for ( e in other ) min = minOf ( min , e ) return min }
import kotlin . test . * val log = StringBuilder ( ) fun logged ( message : String , value : Int ) = value . also { log . append ( message ) } fun box ( ) : String { var sum = 0 for ( i in ( logged ( "" , 1 ) .. logged ( "" , 4 ) ) . reversed ( ) . reversed ( ) ) { sum = sum * 10 + i } assertEquals ( 0 , sum ) assertEquals ( "" , log . toString ( ) ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

import kotlinx . cinterop . * import kotlin . test . * import objcTests . * @ Test fun testKT42482 ( ) { kotlin . native . internal . GC . collect ( ) kotlin . native . internal . GC . collect ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo { open fun bar ( ) : Number companion object { var variable : String } }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String

import org . jetbrains . kotlin . metadata . ProtoBuf import org . jetbrains . kotlin . metadata . deserialization . BinaryVersion import org . jetbrains . kotlin . metadata . deserialization . NameResolverImpl import org . jetbrains . kotlin . metadata . deserialization . TypeTable import org . jetbrains . kotlin . metadata . deserialization . VersionRequirementTable import org . jetbrains . kotlin . metadata . deserialization . getExtensionOrNull import org . jetbrains . kotlin . name . ClassId import org . jetbrains . kotlin . name . FqName import org . jetbrains . kotlin . name . Name import org . jetbrains . kotlin . name . parentOrNull import org . jetbrains . kotlin . resolve . RequireKotlinConstants import org . jetbrains . kotlin . serialization . deserialization . ProtoEnumFlags import org . jetbrains . kotlin .
package org . jetbrains . kotlin . gradle . idea . proto . tcs import org . jetbrains . kotlin . gradle . idea . proto . Extras import org . jetbrains . kotlin . gradle . idea . proto . IdeaExtrasProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . ideaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . tcs . IdeaKotlinSourceDependency import org . jetbrains . kotlin . gradle . idea . testFixtures . tcs . TestIdeaKotlinInstances import org . jetbrains . kotlin . gradle . idea . testFixtures . tcs . TestIdeaKotlinInstances . simpleProject import org . jetbrains . kotlin . gradle . idea . testFixtures .
import org . jetbrains . kotlin . gradle . testbase . * import org . junit . jupiter . api . DisplayName import org . junit . jupiter . api . io . TempDir import java . nio . file . Path import kotlin . io . path . readText import kotlin . io . path . writeText import kotlin . test . assertEquals @ DisplayName ( "" ) @ AndroidGradlePluginTests class KotlinAndroidIncrementalIT : KGPBaseTest ( ) { @ DisplayName ( "" ) @ GradleAndroidTest fun testIncrementalCompilation ( gradleVersion : GradleVersion , agpVersion : String , jdkVersion : JdkVersions . ProvidedJdk , ) { project ( "" , gradleVersion , buildOptions = defaultBuildOptions . copy ( androidVersion = agpVersion ) , buildJdk = jdkVersion . location ) { build ( "" ) val modifiedSrc = subProject ( "lib" ) . kotlinSource
fun testTouchAppCommon ( gradleVersion : GradleVersion ) { project ( "" , gradleVersion ) { buildGradle . appendText ( """""" . trimIndent ( ) ) build ( "" ) { assertTasksExecuted ( "" ) } } } }
import org . jetbrains . kotlin . gradle . testbase . * import org . jetbrains . kotlin . gradle . util . * import org . junit . jupiter . api . DisplayName import org . junit . jupiter . api . io . TempDir import java . nio . file . Path import kotlin . io . path . readText import kotlin . io . path . writeText import kotlin . test . assertEquals @ DisplayName ( "" ) @ AndroidGradlePluginTests class KotlinAndroidIncrementalIT : KGPBaseTest ( ) { @ DisplayName ( "" ) @ GradleAndroidTest fun testIncrementalCompilation ( gradleVersion : GradleVersion , agpVersion : String , jdkVersion : JdkVersions . ProvidedJdk , ) { project ( "" , gradleVersion , buildOptions = defaultBuildOptions . copy ( androidVersion = agpVersion ) , buildJdk = jdkVersion . location ) { build ( "" )
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
package org . jetbrains . kotlin . gradle . idea . proto . tcs import org . jetbrains . kotlin . gradle . idea . proto . Extras import org . jetbrains . kotlin . gradle . idea . proto . IdeaExtrasProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . ideaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . tcs . IdeaKotlinSourceDependency import org . jetbrains . kotlin . gradle . idea . testFixtures . tcs . TestIdeaKotlinInstances import org . jetbrains . kotlin . gradle . idea . testFixtures . tcs . TestIdeaKotlinInstances . simpleProject import org . jetbrains . kotlin . gradle . idea . testFixtures .
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import kotlin . coroutines . intrinsics . COROUTINE_SUSPENDED import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturn import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithResult import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithException import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturn import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithException import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithResult import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithExceptionOrNull import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithResultOrNull import kotlin . corout
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import kotlin . coroutines . intrinsics . COROUTINE_SUSPENDED import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturn import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithResult import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithException import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithExceptionOrNull import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithExceptionOrNull import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithResult import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithResultOrNull import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithResultOrNull import
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbr
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
fun main ( ) { val modelHub = ONNXModelHub ( cacheDirectory = File ( "" ) ) val model = modelHub . loadModel ( ONNXModels . PoseDetection . MoveNetSinglePoseLighting ) model . use { for ( i in 1 .. 8 ) { println ( "" ) val imageFile = getFileFromResource ( "" ) val detectedPoses = it . detectPoses ( imageFile = imageFile ) detectedPoses . poses . forEach { println ( "" ) } } } }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirRegularClassSymbol import org . jetbrains . kot
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String














@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }









@ file : JvmName ( "" ) package test import kotlinx . android . parcel . * import android . os . Parcel import android . os . Parcelable import android . util . SparseBooleanArray @ Parcelize data class User ( val a : SparseBooleanArray ) : Parcelable fun box ( ) = parcelTest { parcel -> val user = User ( SparseBooleanArray ( 10 ) { false } ) user . writeToParcel ( parcel , 0 ) val bytes = parcel . marshall ( ) parcel . unmarshall ( bytes , 0 , bytes . size ) parcel . setDataPosition ( 0 ) val user2 = parcelableCreator < User > ( ) . createFromParcel ( parcel ) assert ( user == user2 ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }
import kotlin . test . * fun box ( ) : String { assertTrue ( '' . isLowSurrogate ( ) ) assertFalse ( '' . isLowSurrogate ( ) ) return "OK" }


@ SinceKotlin ( "1.4" ) public expect fun < T > Array < out T > . concatToString ( ) : String @ SinceKotlin ( "1.4" ) public expect fun ByteArray . concatToString ( ) : String @ SinceKotlin ( "1.4" ) public expect fun ShortArray . concatToString ( ) : String @ SinceKotlin ( "1.4" ) public expect fun IntArray . concatToString ( ) : String @ SinceKotlin ( "1.4" ) public expect fun LongArray . concatToString ( ) : String @ SinceKotlin ( "1.4" ) public expect fun FloatArray . concatToString ( ) : String @ SinceKotlin ( "1.4" ) public expect fun DoubleArray . concatToString ( ) : String @ SinceKotlin ( "1.4" ) public expect fun BooleanArray . concatToString ( ) : String @ SinceKotlin ( "1.4" ) public expect fun CharArray . concatToString ( ) : String

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }


import kotlin . experimental . ExperimentalNativeApi import kotlin . native . internal . test . * import kotlin . test . * @ OptIn ( ExperimentalNativeApi :: class ) fun box ( ) : String { val bytes = bytes ( 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) , 0 . toByte ( ) ,

import kotlin . experimental . ExperimentalNativeApi import kotlin . native . internal . test . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }


import kotlin . test . * fun box ( ) : String { assertEquals ( true , "true" . toBoolean ( ) ) assertEquals ( false , "false" . toBoolean ( ) ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * fun box ( ) : String { assertEquals ( 0 , "" . toDoubleOrNull ( ) ) assertEquals ( null , "" . toDoubleOrNull ( ) ) return "OK" }
import kotlin . test . * fun box ( ) : String { assertEquals ( 0 , "" . toFloatOrNull ( ) ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String

package org . jetbrains . kotlin . gradle . plugin . internal import org . gradle . api . internal . tasks . testing . TestResultProcessor import org . gradle . api . internal . tasks . testing . TestStartEvent import org . jetbrains . kotlin . gradle . internal . testing . KotlinTestRunnerListener import org . jetbrains . kotlin . gradle . internal . testing . KotlinTestResultProcessor import org . jetbrains . kotlin . gradle . plugin . KotlinPlatformType import org . jetbrains . kotlin . gradle . plugin . KotlinTarget import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinAndroidTarget import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinJvmAndroidCompilationFactory import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinMetadataTarget import org . jetbrains . kotlin . gradle . plugin . mpp . KotlinNativeTarget
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface CoverageToolOptions { var version : String ? get ( ) = definedExternally set ( value ) = definedExternally var jacocoVersion : String ? get ( ) = definedExternally set ( value ) = definedExternally } external
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *






@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { var x : Number var y : Number var z : Number var r : Number var s : Number var t : Number var u : Number var v : Number var w : Number var xxx
@ file : JvmName ( "" ) @ file : JvmMultifileClass package kotlinx . coroutines . flow import kotlinx . coroutines . * import kotlinx . coroutines . channels . * import kotlinx . coroutines . flow . internal . * import kotlin . coroutines . * import kotlin . jvm . * import kotlinx . coroutines . flow . internal . unsafeFlow as flow public fun < T > Flow < T > . catch ( action : suspend FlowCollector < T > . ( cause : Throwable ) -> Unit ) : Flow < T > = flow { val exception = catchImpl ( this ) if ( exception != null ) action ( exception ) } public fun < T > Flow < T > . retry ( retries : Long = Long . MAX_VALUE , predicate : suspend ( cause : Throwable ) -> Boolean = { true } ) : Flow < T > { require ( retries > 0 ) { "" } <EOL
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit @ nativeGetter operator fun get ( s : String ) : Any ? <EOL
import kotlinx . cinterop . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds @ OptIn ( kotlinx . cinterop . ExperimentalForeignApi :: class ) class TimeSourceTest : TestBase ( ) { @ Test fun timeSource ( ) { val timeSource = TimeSource . Monotonic assertEquals ( 0L , timeSource . currentTime ) assertEquals ( 0L , timeSource . currentTime + 1 ) assertEquals ( 1L , timeSource . currentTime + 2 ) assertEquals ( 0 , timeSource . currentTime + 3 ) assertEquals ( 0 , timeSource . currentTime + 4 ) assertEquals ( 0 , timeSource . currentTime + 5 ) assertEquals ( 0 , timeSource . currentTime + 6 ) assertEquals ( 0 , timeSource . currentTime +
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import helpers . * fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } suspend fun calculate ( ) = "OK" fun box ( ) : String { var result = "" builder { result = calculate ( ) } return result }
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import kotlin . coroutines . jvm . internal . * import kotlin . coroutines . intrinsics . COROUTINE_SUSPENDED import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturn import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnNull import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithResult import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithException import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithExceptionOrNull import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithResult import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithThrow import kotlin . coroutines . intrinsics . suspendCoroutineUn
import kotlin . test . * val sb = StringBuilder ( ) fun printInt ( x : Int ) = sb . appendLine ( x . toString ( ) ) fun printBoolean ( x : Boolean ) = sb . appendLine ( x . toString ( ) ) fun printByte ( x : Byte ) = sb . appendLine ( x . toString ( ) ) fun printShort ( x : Short ) = sb . appendLine ( x . toString ( ) ) fun printLong ( x : Long ) = sb . appendLine ( x . toString ( ) ) fun printFloat ( x : Float ) = sb . appendLine ( x . toString ( ) ) fun printDouble ( x : Double ) = sb . appendLine ( x . toString ( ) ) fun printChar ( x : Char ) = sb . appendLine ( x . toString ( ) ) fun printUByte ( x : UByte ) = sb . appendLine ( x . toString ( ) ) fun printUShort ( x : UShort ) = sb . appendLine
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }




import org . jetbrains . annotations . * ; public class A { public void foo ( @ NotNull Integer x ) { } } interface B { fun foo ( x : Int ) } class C : A ( ) , B fun main ( ) { C ( ) . foo ( 42 ) }



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) package api import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface Api



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *




fun Any . test ( ) { < ! DEPRECATED_SINCE_KOTLIN_WITHOUT_ARGUMENTS ! > @ Deprecated ( "" ) < ! > < ! DEPRECATED_SINCE_KOTLIN_WITHOUT_ARGUMENTS ! > @ Deprecated ( "" ) < ! > < ! DEPRECATED_SINCE_KOTLIN_WITHOUT_ARGUMENTS ! > @ Deprecated ( "" ) < ! > < ! DEPRECATED_SINCE_KOTLIN_WITHOUT_ARGUMENTS ! > @ Deprecated ( "" ) < ! > < ! DEPRECATED_SINCE_KOTLIN_WITHOUT_ARGUMENTS ! > @ Deprecated ( "" ) < ! > < ! DEPRECATED_SINCE_KOTLIN_WITHOUT_ARGUMENTS ! > @ Deprecated ( "" ) < ! > }
import kotlin . test . * import kotlin . native . internal . * import kotlin . native . internal . test . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nan
@ Deprecated ( "" , level = DeprecationLevel . WARNING ) fun platform ( ) { }
@ Deprecated ( "" , level = DeprecationLevel . WARNING ) fun platform ( configureAction : Action < in Dependency > ) : Dependency = throw UnsupportedOperationException ( ) fun platform ( configureAction : Action < in Dependency > ) : Dependency = throw UnsupportedOperationException ( )
import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *

import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *

import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *




import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *

import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *

import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *






import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } suspend fun calculate ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> x . resume ( 42 ) COROUTINE_SUSPENDED } fun box ( ) : String { builder { calculate ( ) } return "OK" }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }


import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import helpers . * fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } suspend fun calculate ( ) = "OK" fun box ( ) : String { builder { calculate ( ) } return "OK" }

import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import helpers . * fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } suspend fun calculate ( ) = "OK" fun box ( ) : String { builder { calculate ( ) } return "OK" }



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : JvmName ( "" ) @ file : JvmMultifileClass package kotlin . io . path import java . io . IOException import java . nio . ByteBuffer import java . nio . charset . Charset import java . nio . charset . CodingErrorAction import java . nio . charset . CodingErrorAction . CONTINUE import java . nio . charset . CodingErrorAction . TERMINATE import java . nio . charset . CharsetDecoder import java . nio . charset . CharsetEncoder import java . nio . charset . CodingErrorAction import java . nio . charset . CodingErrorAction . INVALID_CHARSET import java . nio . charset . CodingErrorAction . REPLACE import java . nio . charset . CodingErrorAction . TERMINATE import java . nio . charset . CharsetDecoder import java . nio . charset . CodingErrorAction .

import org . jetbrains . kotlinx . dl . api . core . shape . TensorShape import org . jetbrains . kotlinx . dl . api . preprocessing . Operation import org . jetbrains . kotlinx . dl . api . preprocessing . pipeline import org . jetbrains . kotlinx . dl . impl . preprocessing . * import org . jetbrains . kotlinx . dl . impl . preprocessing . camerax . toBitmap import org . jetbrains . kotlinx . dl . impl . preprocessing . resize import org . jetbrains . kotlinx . dl . impl . preprocessing . toFloatArray import org . jetbrains . kotlinx . dl . impl . preprocessing . toIntArray import org . jetbrains . kotlinx . dl . impl . preprocessing . toLongArray import org . jetbrains . kotlinx . dl . impl . preprocessing . toShortArray import org . jetbrains . kotlin









import kotlin . test . * import kotlinx . cinterop . * import kotlinx . io . * import kotlinx . io . bytestring . ByteString import kotlinx . io . bytestring . encodeToByteString import kotlinx . io . bytestring . decodeToByteString import kotlinx . io . bytestring . encodeToByteString import kotlinx . io . bytestring . decodeToByteString import kotlin . test . * private const val SEGMENT_SIZE = Segment . SIZE class BufferSourceTest : AbstractBufferedSourceTest ( SourceFactory . BUFFER ) class RealBufferedSourceTest : AbstractBufferedSourceTest ( SourceFactory . REAL_BUFFERED_SOURCE ) class OneByteAtATimeBufferedSourceTest : AbstractBufferedSourceTest ( SourceFactory . ONE_BYTE_AT_A_TIME_BUFFERED_SOURCE ) class PeekBufferTest : AbstractBufferedSourceTest ( SourceFactory . PEEK_BUFFERED_SOURCE )


package kotlinx . io import kotlinx . io . bytestring . ByteString import kotlinx . io . bytestring . decodeToByteString import kotlinx . io . bytestring . encodeToByteString import kotlin . test . * private const val SEGMENT_SIZE = Segment . SIZE class BufferSourceTest : AbstractBufferedSourceTest ( SourceFactory . BUFFER ) class RealBufferedSourceTest : AbstractBufferedSourceTest ( SourceFactory . REAL_BUFFERED_SOURCE ) class OneByteAtATimeBufferedSourceTest : AbstractBufferedSourceTest ( SourceFactory . ONE_BYTE_AT_A_TIME_BUFFERED_SOURCE ) class PeekBufferTest : AbstractBufferedSourceTest ( SourceFactory . PEEK_BUFFER ) class PeekBufferedSourceTest : AbstractBufferedSourceTest ( SourceFactory . PEEK_BUFFERED_SOURCE ) class PeekBufferedSourceTest : AbstractBufferedSourceTest ( SourceFactory . REAL_BUFFERED_SOURCE ) abstract class AbstractBufferedSourceTest











import org . tensorflow . Operand import org . tensorflow . Shape import org . tensorflow . op . Ops private const val EPS = 0 private const val FAN_IN = 2 private const val FAN_OUT = 4 private const val SEED = 0 private const val DEFAULT_LAYER_NAME = "" internal class LeCunUniformTest { @ Test fun initialize ( ) { val actual = Array ( 2 ) { FloatArray ( 2 ) { 0 } } val expected = Array ( 2 ) { FloatArray ( 2 ) { 0 } } expected [ 0 ] [ 0 ] = 0 expected [ 0 ] [ 1 ] = 0 expected [ 1 ] [ 0 ] = 0 expected [ 1 ] [ 1 ] = 0 val shape = Shape . make ( 2 , 2 ) EagerSession . create ( ) . use { session -> val tf = Ops . create ( session ) val
@ file : OptIn ( kotlinx . cinterop . ExperimentalForeignApi :: class ) import kotlinx . cinterop . * import kotlin . test . * import objcTests . * import kotlin . native . concurrent . * import kotlin . test . * import objcTests . * import kotlin . native . internal . test . * import kotlin . test . * import objcTests . * import kotlin . native . internal . test . * import kotlin . test . * import objcTests . * import kotlin . native . internal . test . * import kotlin . test . * import objcTests . * import kotlin . native . internal . test . * import kotlin . test . * import objcTests . * import kotlin . native . internal . test . * import kotlin . test . * import objcTests . * import kotlin

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . Conv2D import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . core . Dense import org . jetbrains . kotlinx . dl . api . core . layer . core . Input import org . jetbrains . kotlinx . dl . api . core . layer . pooling . AvgPool2D import org . jetbrains . kotlinx . dl . api . core . loss . Losses import org . jetbrains . kotlinx . dl . api . core . metric . Metrics import org . jetbrains . kotlinx . dl . api . core . optimizer . Adam import org . jetbrains . kotlinx . dl . dataset . OnFlyImageDataset import org . jetbrains . kotlinx . d




package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . containingClassLookupTag import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . declarations . utils . * import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class A { open fun f ( ) : String } external open class B : A { override fun f ( ) : String }
import org . jetbrains . dokka . base . testApi . testRunner . BaseAbstractTest import org . jetbrains . dokka . links . DRI import org . jetbrains . dokka . model . Documentable import org . jetbrains . dokka . model . WithGenerics import org . jetbrains . dokka . model . properties . WithExtraProperties import org . jetbrains . dokka . pages . ContentPage import org . jetbrains . dokka . pages . ContentStyle import org . jetbrains . dokka . pages . ContentStyle . RowTitle import org . jetbrains . dokka . pages . RowTitle import kotlin . test . Test import kotlin . test . assertEquals class RowTitleTest : BaseAbstractTest ( ) { private val configuration = dokkaConfiguration { sourceSets { sourceSet { sourceRoots = listOf ( "src/" ) classpath += jvmStdlibPath ! ! } }
import org . jetbrains . dokka . base . testApi . testRunner . BaseAbstractTest import kotlin . test . Test import kotlin . test . assertEquals class ContentForClasslikesAndEntriesTest : BaseAbstractTest ( ) { private val configuration = dokkaConfiguration { sourceSets { sourceSet { sourceRoots = listOf ( "src/" ) classpath += jvmStdlibPath ! ! } } } @ Test fun `should include enum` ( ) { testInline ( """""" . trimIndent ( ) , configuration ) { documentablesTransformationStage = { module -> val functions = module . packages . flatMap { it . classlikes } . flatMap { it . functions } assertEquals ( 2 , functions . size ) assertEquals ( "" , functions [ 0 ] . name ) assertEquals ( "" , functions [ 1 ] . name ) } } } @ Test <EOL

import kotlinx . coroutines . testing . * import kotlinx . coroutines . * import kotlinx . coroutines . channels . * import kotlinx . coroutines . selects . * import org . junit . * import org . junit . Test import java . util . concurrent . * import kotlin . test . * class SupervisorCancellationStressTest : TestBase ( ) { private val nSenders = 3 private val nReceivers = 3 private val nEvents = ( if ( isNative ) 0 else 0 ) * stressTestMultiplier private val timeLimit = 0 * stressTestMultiplier private val sent = atomic ( 0 ) private val received = atomic ( 0 ) private val pool = newFixedThreadPoolContext ( nSenders + nReceivers , "" ) @ After fun tearDown ( ) { pool . close ( ) } @ Test fun testStress ( ) = runBl
package org . jetbrains . kotlin . analysis . low . level . api . fir . test . configurators import com . intellij . openapi . Disposable import com . intellij . openapi . project . Project import org . jetbrains . kotlin . analysis . low . level . api . fir . test . configurators . AnalysisApiFirSourceTestConfigurator import org . jetbrains . kotlin . analysis . low . level . api . fir . test . configurators . AnalysisApiFirScriptTestConfigurator import org . jetbrains . kotlin . analysis . low . level . api . fir . test . configurators . AnalysisApiFirSourceTestConfiguratorFactory import org . jetbrains . kotlin . analysis . test . framework . base . AbstractAnalysisApiBasedTest import org . jetbrains . kotlin . analysis . test . framework . project . structure . KtTestModule import org . jetbrains . kotlin . analysis . test . framework . test . configurators . AnalysisApi
import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; public class A { @ NotNull public String foo ( ) { return "" ; } } import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; public class B { public String foo ( ) { return "" ; } } import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; public class C { public String foo ( ) { return "" ; } } import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; public class D { public String foo ( ) { return "" ; } } import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; public class E { public String foo ( ) { return "" ; }
import java . lang . annotation . * ; import java . lang . annotation . Documented ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import javax . annotation . Nonnull ; import javax . annotation . meta . TypeQualifierNickname ; import javax . annotation . meta . When ; @ Target ( { ElementType . TYPE_USE } ) @ Retention ( RetentionPolicy . RUNTIME ) @ Documented @ Nonnull ( when = When . MAYBE ) @ TypeQualifierNickname public @ interface Nullable { } import java . lang . annotation . Documented ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import javax . annotation . Nonnull ; import javax . annotation . meta . TypeQualifierNickname ; import javax . annotation . meta . When ; @
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import kotlin . native . concurrent . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import k
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface SchedulerLike { fun now ( ) : Number }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
import kotlin . coroutines . * import helpers . * fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } suspend fun calculate ( ) = "OK" fun box ( ) : String { builder { calculate ( ) } return "" }
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import helpers . * fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } suspend fun calculate ( ) = "OK" fun box ( ) : String { var result = "" builder { result = calculate ( ) } return result }
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import kotlin . coroutines . jvm . internal . * import kotlin . coroutines . intrinsics . COROUTINE_SUSPENDED import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturn import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnNull import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithResult import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithException import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithExceptionOrNull import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithResult import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithThrow import kotlin . coroutines . intrinsics . suspendCoroutineUn
import kotlin . test . * fun box ( ) : String { val a : Any = 1 val b : Any = 1 val c : Any = 1 val d : Any = 1 val e : Any = 1 val f : Any = 1 val g : Any = 1 assertFalse ( a == b ) assertFalse ( a == c ) assertFalse ( a == d ) assertFalse ( a == e ) assertFalse ( a == f ) assertFalse ( g == a ) assertFalse ( g == b ) assertFalse ( g == c ) assertFalse ( g == d ) assertFalse ( g == e ) assertFalse ( g == f ) return "OK" }
@ kotlin . internal . InlineOnly public inline fun String . hashCode ( ) : Int = asDynamic ( ) . hashCode ( )

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class GrandParent ( ) external open class Parent ( ) : GrandParent external open class Child ( ) : Parent








import org . jetbrains . kotlinx . dl . api . core . Sequential import org . jetbrains . kotlinx . dl . api . core . activation . Activations import org . jetbrains . kotlinx . dl . api . core . initializer . Constant import org . jetbrains . kotlinx . dl . api . core . initializer . HeNormal import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . Conv2D import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . core . Dense import org . jetbrains . kotlinx . dl . api . core . layer . core . Input import org . jetbrains . kotlinx . dl . api . core . layer . isTrainable import org . jetbrains . kotlinx . dl . api . core
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . junit . jupiter . api . Test import org . tensorflow . EagerSession import org . tensorflow . Shape import org . tensorflow . op . Ops private const val EPS = 0 private const val FAN_IN = 2 private const val FAN_OUT = 4 private const val SEED = 0 private const val DEFAULT_LAYER_NAME = "" internal class ConvLayerTest { @ Test fun initialize ( ) { val actual = Array ( 2 ) { FloatArray ( 2 ) { 0 } } val expected = Array ( 2 ) { FloatArray ( 2 ) { 0 } } expected [ 0 ] [ 0 ] = 0 expected [ 0 ] [ 1 ] = - 0 expected [ 1 ] [ 0 ] = 0 expected [ 1 ] [ 1 ] = - 0 val shape = Shape . make ( 2 , 2 ) EagerSession . create ( ) . use { session -

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface A { fun ping ( ) }
import kotlin . test . * import kotlin . reflect . * import kotlin . reflect . jvm . * import kotlin . reflect . jvm . internal . * import kotlin . reflect . jvm . internal . calls . * import kotlin . reflect . jvm . internal . calls . Caller . * import kotlin . reflect . jvm . internal . calls . CallerImpl . * import kotlin . reflect . jvm . internal . calls . createCaller import kotlin . reflect . jvm . internal . calls . toKCaller import kotlin . reflect . jvm . internal . calls . toKCallerImpl import kotlin . reflect . jvm . internal . calls . toKFunction import kotlin . reflect . jvm . internal . calls . toKFunctionImpl import kotlin . reflect . jvm . internal . calls . toKProperty import kotlin . reflect . jvm . internal . calls . toKPropertyImpl import kotlin . reflect . jvm . internal . calls .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ JvmName ( "" ) public fun < T : Boolean > KtNDArray < T > . all ( predicate : ( T ) -> Boolean ) : Boolean { for ( element in this ) if ( ! predicate ( element ) ) return false return true } @ JvmName ( "" ) public fun < T : Boolean ? > KtNDArray < T > . all ( predicate : ( T ) -> Boolean ? ) : Boolean { for ( element in this ) if ( element == null ) return false return predicate ( element ) != null }
import kotlin . test . * fun box ( ) : String { val ndarray = mk . ndarray ( mk [ mk [ 1 , 2 , 3 ] , mk [ 4 , 5 , 6 ] ] ) var sum = 0 for ( el in ndarray ) { sum += el } assertEquals ( 0 , sum ) return "OK" }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertTrue ( intList . isEmpty ( ) ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertTrue ( longList . isEmpty ( ) ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertTrue ( charList . isEmpty ( ) ) return "OK" }
@ JvmName ( "" ) public fun < T : Any > KtNDArray < T > . any ( axis : Int ) : KtNDArray < Boolean > = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( this , axis ) ) inline fun < reified T : Any > KtNDArray < T > . any ( axis : Int ) : KtNDArray < Boolean > = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( this , axis ) )
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbrains . kotlin
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * import kotlin . native . internal . * import kotlin . random . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds class NativeMathTest { @ Test fun testArgMax ( ) { val a = mk . ndarray ( mk [ mk [ 0 , 0 , 0 ] , mk [ 0 , 0 , 0 ] ] ) assertEquals ( 2 , a . argMax ( ) ) } }
@ JvmName ( "" ) public fun < T : Number > KtNDArray < T > . argMax ( ) : Int { val strides : IntArray ? = if ( this . consistent ) null else this . strides return JniMath . argMax ( this . data . data , this . offset , this . size , this . shape , strides , this . dtype . nativeCode ) }
@ JvmName ( "" ) public fun < T : Number > KtNDArray < T > . argMin ( axis : Int ) : KtNDArray < Long > = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( this , axis ) )
@ JvmName ( "" ) public fun < T : Number , D : Dimension > MultiArray < T , D > . argMin ( ) : Int { var index = 0 for ( element in this ) { checkIndexOverflow ( index ) if ( this [ index ] < element ) { index ++ } } return index } @ JvmName ( "" ) public fun < D : Dimension > MultiArray < Float , D > . argMin ( ) : Int { var index = 0 for ( element in this ) { checkIndexOverflow ( index ) if ( this [ index ] < element ) { index ++ } } return index } @ JvmName ( "" ) public fun < D : Dimension > MultiArray < Double , D > . argMin ( ) : Int { var index = 0 for ( element in this ) { checkIndexOverflow ( index ) if ( this [ index ] < element ) { index ++

@ file : JvmName ( "" ) @ file : JvmMultifileClass @ file : JvmName ( "" ) package kotlin . io . path import java . io . IOException import java . nio . file . * import kotlin . io . path . ExperimentalPathApi import kotlin . io . path . createTempFile import kotlin . io . path . deleteIfExists import kotlin . io . path . exists import kotlin . io . path . readText import kotlin . io . path . writeText @ ExperimentalPathApi public fun Path . copyTo ( target : Path , overwrite : Boolean = false ) : Path { val options = if ( overwrite ) arrayOf < CopyOption > ( StandardCopyOption . REPLACE_EXISTING ) else emptyArray ( ) return copyToRecursively ( target , options ) } @ ExperimentalPathApi public fun Path . copyToRecursively ( target : Path , options : Array < CopyOption > ) :
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }


import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun < E > select ( vararg x : E ) = x [ 0 ] fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( get ( ) , getInv ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( getInv ( ) , get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( getInv ( ) , getInv ( ) )



import kotlin . test . * fun box ( ) : String { val list1 = ArrayList < Int > ( ) val list2 = ArrayList < Int > ( ) for ( i in 0 .. 3 ) { list1 . add ( i ) if ( i == 1 ) break } for ( i in 0 .. 3 ) { list2 . add ( i ) if ( i == 1 ) break } val list3 = ArrayList < Int > ( ) for ( i in 0 .. 3 ) { list3 . add ( i ) if ( i == 1 ) continue } for ( i in 0 .. 3 ) { list3 . add ( i ) if ( i == 1 ) continue } assertEquals ( list1 , list3 ) assertEquals ( list2 , list3 ) return "OK" }
import kotlin . test . * import kotlinx . cinterop . * import kotlin . native . internal . * import kotlin . test . * import kotlinx . cinterop . ExperimentalForeignApi @ OptIn ( ExperimentalForeignApi :: class ) fun box ( ) : String { val int1 = 1 val int2 = 2 val int3 = 3 val int4 = 4 val int5 = 5 val int6 = 6 val int7 = 7 val int8 = 8 val int9 = 9 val int10 = 10 val int11 = 11 val int12 = 12 val int13 = 0 val int14 = 0 val int15 = 0 val int16 = 16 val int17 = 0 val int18 = 0 val int19 = 0 val int20 = 20 val int21 = 0 val int22 =
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . internal . * import kotlinx . serialization . modules . * import kotlin . reflect . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion .
import kotlin . test . * import kotlin . native . internal . * import kotlin . reflect . * import kotlin . reflect . jvm . * import kotlin . reflect . jvm . internal . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import k
package org . jetbrains . kotlinx . multik . ndarray . data import org . jetbrains . kotlinx . multik . ndarray . complex . ComplexDouble import org . jetbrains . kotlinx . multik . ndarray . complex . ComplexFloat import org . jetbrains . kotlinx . multik . ndarray . complex . JsComplexDouble import org . jetbrains . kotlinx . multik . ndarray . complex . JsComplexFloat import org . jetbrains . kotlinx . multik . ndarray . data . DataType . * import kotlin . jvm . JvmName @ JvmName ( "" ) public fun < T : Number , D : Dimension > MultiArray < T , D > . toType ( ) : MultiArray < T , D > = this . toType < T , D > ( DataType . ofKClass ( this . dtype ) ) @ JvmName ( "" ) public fun < D : Dimension > MultiArray

import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
@ JvmName ( "" ) public fun < T : Comparable < T > > KtNDArray < T > . maxOrNull ( ) : T ? { val iterator = iterator ( ) if ( ! iterator . hasNext ( ) ) return null var max = iterator . next ( ) while ( iterator . hasNext ( ) ) { val e = iterator . next ( ) if ( max < e ) max = e } return max } @ JvmName ( "" ) public fun < T : Comparable < T > > KtNDArray < T > . maxOrNull ( ) : T ? { val iterator = iterator ( ) if ( ! iterator . hasNext ( ) ) return null var max = iterator . next ( ) while ( iterator . hasNext ( ) ) { val e = iterator . next ( ) if ( max < e ) max = e } return max }
@ JvmName ( "" ) fun < T : Number > KtNDArray < T > . mean ( axis : Int ) : KtNDArray < Double > = mean ( this , axis )
import kotlin . test . * fun box ( ) : String { val ndarray = mk . ndarray ( mk [ mk [ 1 , 2 , 3 ] , mk [ 4 , 5 , 6 ] ] ) assertEquals ( 0 , ndarray . mean ( ) ) return "OK" }
import kotlin . math . min import kotlin . test . Test import kotlin . test . assertEquals import kotlin . test . assertTrue class TestBasic { @ Test fun test ( ) { val a = array ( arrayOf ( 1 , 2 , 3 ) ) val check = array ( arrayOf ( 1 ) ) assertEquals ( check , a . min ( ) ) } }
package org . jetbrains . kotlinx . multik . ndarray . data import kotlin . jvm . JvmName @ JvmName ( "" ) public fun < T : Number , D : Dimension > MultiArray < T , D > . min ( ) : T ? { val iterator = iterator ( ) if ( ! iterator . hasNext ( ) ) return null var min = iterator . next ( ) while ( iterator . hasNext ( ) ) { val e = iterator . next ( ) if ( min > e ) { min = e } } return min }
import kotlin . test . * import kotlin . native . internal . * import kotlin . reflect . * import kotlin . reflect . full . * import kotlin . reflect . jvm . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin .

@ JvmName ( "" ) fun < T : Number > KtNDArray < T > . prod ( axis : Int ) : KtNDArray < T > = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( this , axis ) ) inline fun < reified T : Number > KtNDArray < T > . prod ( axis : Int , keepdims : Boolean = false ) : KtNDArray < T > = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( this , axis , keepdims ) ) fun < T : Number > KtNDArray < T > . prod ( axis : Int ) : KtNDArray < T > = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( this , axis ) )
import kotlin . test . * import kotlin . native . internal . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test
import kotlin . test . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * val sb = StringBuilder ( ) open class EmptyContinuation ( override val context : CoroutineContext = EmptyCoroutineContext ) : Continuation < Any ? > { companion object : EmptyContinuation ( ) override fun resumeWith ( result : Result < Any ? > ) { result . getOrThrow ( ) } } suspend fun s1 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resume ( 42 ) COROUTINE_SUSPENDED } suspend fun s2 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resumeWithException ( Error ( ) ) COROUTINE_SUSPENDED } fun f1 ( ) : Int { sb . appendLine ( "" ) return 0
@ JvmName ( "" ) public fun < T : Any > KtNDArray < T > . put ( indices : IntArray , values : DoubleArray , mode : Mode = Mode . RAISE ) : Unit = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( indices , values , mode . str ) ) @ JvmName ( "" ) public fun < T : Any > KtNDArray < T > . put ( indices : IntArray , values : FloatArray , mode : Mode = Mode . RAISE ) : Unit = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( indices , values , mode . str ) ) @ JvmName ( "" ) public fun < T : Any > KtNDArray < T > . put ( indices : IntArray , values : LongArray , mode : Mode = Mode . RAISE ) : Unit = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( indices , values , mode . str ) ) @ JvmName ( "<STR_LIT
package org . jetbrains . kotlinx . multik . ndarray . data import org . jetbrains . kotlinx . multik . ndarray . complex . ComplexDouble import org . jetbrains . kotlinx . multik . ndarray . complex . ComplexFloat import org . jetbrains . kotlinx . multik . ndarray . complex . JsComplexDouble import org . jetbrains . kotlinx . multik . ndarray . complex . JsComplexFloat import org . jetbrains . kotlinx . multik . ndarray . data . DataType . * import kotlin . jvm . JvmName @ JvmName ( "" ) public fun < T : Number , D : Dimension > MultiArray < T , D > . toType ( ) : MultiArray < T , D > = this . toType ( DataType . ofKClass ( this . dtype ) ) @ JvmName ( "" ) public fun < D : Dimension > MultiArray < Float , D

package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . checkers . declaration . FirBasicDeclarationChecker import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInline import org . jetbrain
@ JvmName ( "" ) public fun < T : Any > KtNDArray < T > . resize ( vararg dims : Int , interpolation : Interpolation = Interpolation . BILINEAR ) : KtNDArray < T > = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( this , dims , interpolation ) )

@ JvmName ( "" ) public fun < T : Comparable < T > > KtNDArray < T > . max ( ) : T ? = null @ JvmName ( "" ) public fun < T : Comparable < T > > KtNDArray < T > . maxOrNull ( ) : T ? = null @ JvmName ( "" ) public fun < T : Comparable < T > > KtNDArray < T > . maxWith ( comparator : Comparator < in T > ) : T ? = null @ JvmName ( "" ) public fun < T : Comparable < T > > KtNDArray < T > . maxWithOrNull ( comparator : Comparator < in T > ) : T ? = null
package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . AnyColumnReference import org . jetbrains . kotlinx . dataframe . ColumnsSelector import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx
import kotlin . test . * import kotlin . native . internal . * import kotlin . reflect . * import kotlin . reflect . full . * import kotlin . reflect . jvm . * import kotlin . reflect . jvm . internal . * import kotlin . test . * @ OptIn ( ExperimentalAssociatedObjects :: class ) @ AssociatedObjectKey @ Retention ( AnnotationRetention . BINARY ) annotation class Associated1 ( val kClass : KClass < * > ) @ OptIn ( ExperimentalAssociatedObjects :: class ) @ AssociatedObjectKey @ Retention ( AnnotationRetention . BINARY ) annotation class Associated2 ( val kClass : KClass < * > ) @ OptIn ( ExperimentalAssociatedObjects :: class ) @ AssociatedObjectKey @ Retention ( AnnotationRetention . BINARY ) annotation class Associated3 ( val kClass : KClass < * > ) @ OptIn ( ExperimentalAssociatedObjects :: class ) @ AssociatedObjectKey @ Ret
@ JvmName ( "" ) public fun < T : Comparable < T > > KtNDArray < T > . sort ( axis : Int = - 1 , kind : KindSort ? = null ) : KtNDArray < T > = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( this , axis , kind ? . enumEncode ( ) ) )
import kotlin . test . * import kotlin . reflect . * import kotlin . reflect . full . * import kotlin . reflect . jvm . * import kotlin . reflect . jvm . internal . * import kotlin . test . * @ JvmInline value class Z1 ( val x1 : UInt , val x2 : Int ) @ JvmInline value class Z2 ( val x1 : Z1 , val x2 : Z1 ) @ JvmInline value class Z3 ( val x1 : Z2 , val x2 : Z2 ) @ JvmInline value class Z4 ( val x1 : Z3 , val x2 : Z3 ) @ JvmInline value class Z5 ( val x1 : Z4 , val x2 : Z4 ) @ JvmInline value class Z6 ( val x1 : Z5 , val x2 : Z5 ) @ JvmInline value class Z7 ( val x1 : Z6 ,
@ JvmName ( "" ) public fun < T : Number > KtNDArray < T > . std ( axis : Int , ddof : Int = 0 ) : Double = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( this , axis , ddof ) )
@ JvmName ( "" ) public fun < T : Number > KtNDArray < T > . sum ( axis : Int ) : KtNDArray < T > = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( this , axis ) ) @ JvmName ( "" ) public fun < T : Number > KtNDArray < T > . sum ( axis : IntArray ) : KtNDArray < T > = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( this , axis ) ) @ JvmName ( "" ) public fun < T : Number > KtNDArray < T > . sum ( axis : IntArray , offset : Int = 0 ) : KtNDArray < T > = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( this , axis , offset ) )
import kotlin . test . * import kotlin . native . internal . * import kotlin . reflect . * import kotlin . reflect . full . * import kotlin . reflect . jvm . * import kotlin . reflect . jvm . internal . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds @ OptIn ( ExperimentalAssociatedObjects :: class ) @ AssociatedObjectKey @ Retention ( AnnotationRetention . BINARY ) annotation class Associated1 ( val kClass : KClass < * > ) @ OptIn ( ExperimentalAssociatedObjects :: class ) @ AssociatedObjectKey @ Retention ( AnnotationRetention . BINARY ) annotation class Associated2 ( val kClass : KClass < * > ) @ OptIn ( ExperimentalAssociatedObjects :: class ) @ AssociatedObjectKey @ Retention ( AnnotationRetention . BINARY ) <EOL
@ file : JvmName ( "" ) @ file : JvmMultifileClass package kotlin . io import java . io . File import java . io . IOException import java . nio . file . Files import java . nio . file . Path import java . nio . file . StandardCopyOption import java . util . zip . ZipEntry import java . util . zip . ZipFile import kotlin . contracts . ExperimentalContracts import kotlin . contracts . InvocationKind import kotlin . contracts . contract @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalPathApi :: class ) @ Throws ( IOException :: class ) @ kotlin . internal . InlineOnly public inline fun Path . copyTo ( target : Path , vararg options : CopyOption ) : Path = Files . copy ( this , target , * options ) @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalPathApi :: class ) @ kotlin
import kotlin . test . * import kotlin . native . internal . * import kotlin . reflect . * import kotlin . reflect . jvm . * import kotlin . reflect . jvm . internal . * import kotlin . test . assertEquals import kotlin . test . assertTrue @ JvmInline value class Z1 ( val x1 : UInt , val x2 : Int ) @ JvmInline value class Z2 ( val x1 : Z1 , val x2 : Z1 ) @ JvmInline value class Z3 ( val x1 : Z2 , val x2 : Z2 ) @ JvmInline value class Z4 ( val x1 : Z3 , val x2 : Z3 ) @ JvmInline value class Z5 ( val x1 : Z4 , val x2 : Z4 ) @ JvmInline value class Z6 ( val x1 : Z5 , val x2 : Z5 ) @ JvmInline
import kotlin . experimental . ExperimentalNativeApi import kotlin . native . internal . test . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin
import kotlin . test . * import kotlin . native . internal . * import kotlinx . cinterop . * import kotlin . text . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion
import kotlin . test . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * val sb = StringBuilder ( ) open class EmptyContinuation ( override val context : CoroutineContext = EmptyCoroutineContext ) : Continuation < Any ? > { companion object : EmptyContinuation ( ) override fun resumeWith ( result : Result < Any ? > ) { result . getOrThrow ( ) } } suspend fun s1 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resume ( 42 ) COROUTINE_SUSPENDED } suspend fun s2 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resumeWithException ( Error ( ) ) COROUTINE_SUSPENDED } fun f1 ( ) : Int { sb . appendLine ( "" ) return 0
@ file : JvmName ( "" ) @ file : JvmMultifileClass @ file : JvmName ( "" ) package kotlin . io import java . io . File import java . io . IOException import java . nio . file . Files import java . nio . file . Path import java . nio . file . StandardCopyOption import java . util . zip . ZipEntry import java . util . zip . ZipFile import java . util . zip . ZipOutputStream import kotlin . contracts . ExperimentalContracts import kotlin . contracts . contract @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalPathApi :: class ) @ Throws ( IOException :: class ) @ kotlin . internal . InlineOnly public inline fun Path . copyTo ( target : Path , vararg options : CopyOption ) : Path = Files . copy ( this , target , * options ) @ SinceKotlin ( "1.5" ) @ WasExperimental (
@ JvmName ( "" ) public fun < T : Number > KtNDArray < T > . var ( axis : Int , ddof : Int = 0 ) : KtNDArray < Double > = callFunc ( nameMethod = arrayOf ( "" ) , args = arrayOf ( this , axis , ddof ) )
import kotlin . test . * import kotlin . native . internal . * import kotlin . native . internal . test . * import kotlin . test . * import kotlin . native . internal . test . Test import kotlin . test . assertEquals import kotlin . test . assertTrue class TestBasic { @ Test fun test ( ) { val a = array ( arrayOf ( 1 , 2 , 3 ) ) val check1 = array ( arrayOf ( 1 , 2 , 3 ) ) val check2 = array ( arrayOf ( 1 , 2 , 3 ) ) assertEquals ( check1 , a . reshape ( 1 , 3 ) ) assertEquals ( check2 , a . reshape ( 3 , 1 ) ) } }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
fun main ( ) { val ( train , test ) = mnist ( ) modernLeNet . use { it . compile ( optimizer = SGD ( learningRate = 0 ) , loss = Losses . SOFT_MAX_CROSS_ENTROPY_WITH_LOGITS , metric = Accuracy ( ) ) it . logSummary ( ) val trainingHistory = it . fit ( dataset = train , epochs = EPOCHS , batchSize = TRAINING_BATCH_SIZE ) assertEquals ( trainingHistory . batchHistory . size , 0 ) assertEquals ( 1 , trainingHistory . batchHistory [ 0 ] . epochIndex ) assertEquals ( 0 , trainingHistory . batchHistory [ 0 ] . batchIndex ) assertTrue ( trainingHistory . batchHistory [ 0 ] . lossValue > 0 ) assertTrue ( trainingHistory . batchHistory [ 0 ] . metricValues [ 0 ] < 0 ) } }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirRegularClassSymbol import org . jetbrains . kot

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }





@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }













package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl .


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
import org . jetbrains . kotlin . types . Variance import org . jetbrains . kotlin . types . model . KotlinTypeMarker import org . jetbrains . kotlin . types . model . TypeSubstitutorMarker import org . jetbrains . kotlin . types . model . TypeSystemContext import org . jetbrains . kotlin . types . model . TypeSystemInferenceExtensionContext import org . jetbrains . kotlin . types . model . TypeSystemInferenceExtensionContextDelegate import org . jetbrains . kotlin . types . model . TypeSubstitutorMarker import org . jetbrains . kotlin . types . model . TypeSubstitutor import org . jetbrains . kotlin . types . model . TypeSystemContext import org . jetbrains . kotlin . types . model . TypeSystemInferenceExtensionContextDelegate import org . jetbrains . kotlin . types . model . TypeSubstitutorMarker import org . jetbrains .
@ file : OptIn ( kotlinx . cinterop . ExperimentalForeignApi :: class ) import kotlinx . cinterop . * import kotlin . test . * import objcTests . * import kotlin . native . concurrent . * import kotlin . native . internal . * import kotlin . test . * import objcTests . * import kotlin . native . concurrent . * import kotlin . test . * import objcTests . * import kotlin . native . internal . * import kotlin . test . * import objcTests . * import kotlin . native . internal . test . * import objcTests . * import kotlin . native . internal . test . * import objcTests . * import kotlin . native . internal . test . * import objcTests . * import kotlin . native . internal . test . * import objcTests . * import kot
fun main ( ) { val modelHub = ONNXModelHub ( cacheDirectory = File ( "" ) ) val model = modelHub . loadModel ( ONNXModels . CV . MobileNetV2 ) model . printSummary ( ) model . use { for ( i in 1 .. 8 ) { println ( "" ) val imageFile = getFileFromResource ( "" ) val recognizedObject = it . predictObject ( imageFile = imageFile ) println ( recognizedObject ) val top5 = it . predictTopKObjects ( imageFile = imageFile , topK = 5 ) println ( top5 . toString ( ) ) } } } fun getFileFromResource ( resourcePath : String ) : File { val resource = modelHub . resource ( resourcePath ) return File ( resource ) }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirRegularClassSymbol import org . jetbrains . kot
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : JsQualifier ( "" ) @ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) package fs . chmod import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external fun __promisify__ ( path : String , mode : String ) : Promise < Unit > external fun __promisify__ ( path : String , mode : Number ) : Promise < Unit >
class ARTICLE : Tag ( "" ) { }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
class AUDIO val AUDIO . asFlowContent : FlowContent get ( ) = throw Exception ( ) val AUDIO . asInteractiveContent : InteractiveContent get ( ) = throw Exception ( ) val AUDIO . asPhrasingContent : PhrasingContent get ( ) = throw Exception ( )
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class BDO { open fun bdo ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface Canvas
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Bitmap external open class Canvas : Bitmap
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
class CITE { operator fun invoke ( ) { } } fun test ( ) { CITE ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Figure
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : JsQualifier ( "" ) @ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) package fs . chmod import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external fun __promisify__ ( path : String , mode : Number ) : Promise < Unit >
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Gauge
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any } external open class Foo { open fun bar ( a : Any ) : Number open var baz : Any }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class A { open fun f ( ) : String } external open class B : A { override fun f ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class A { open fun f ( ) : String } external open class B : A { override fun f ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any } external open class Foo { open fun bar ( a : Any ) : Number open var baz : Any }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Time external open class Clock
import org . jetbrains . dokka . base . testApi . testRunner . BaseAbstractTest import org . jetbrains . dokka . links . DRI import org . jetbrains . dokka . model . DisplaySourceSet import org . jetbrains . dokka . model . dfs import org . jetbrains . dokka . model . withDescendants import org . jetbrains . dokka . pages . ContentPage import org . jetbrains . dokka . pages . ContentStyle import org . jetbrains . dokka . pages . ContentStyle . RowTitle import org . jetbrains . dokka . pages . RowTitle import kotlin . test . Test import kotlin . test . assertEquals class RowTitleTest : BaseAbstractTest ( ) { private val configuration = dokkaConfiguration { sourceSets { sourceSet { sourceRoots = listOf ( "src/" ) classpath += jvmStdlibPath ! ! } } }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface Tr { fun foo ( ) } external open class TR { open fun foo ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Video
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
import kotlin . reflect . KClass import kotlin . test . assertEquals import kotlin . test . assertTrue annotation class A ( val value : String ) annotation class B ( val value : String ) annotation class C ( val value : String ) annotation class D ( val value : String ) annotation class E ( val value : String ) annotation class F ( val value : String ) annotation class G ( val value : String ) annotation class H ( val value : String ) annotation class I ( val value : String ) annotation class J ( val value : String ) annotation class K ( val value : String ) annotation class L ( val value : String ) annotation class M ( val value : String ) annotation class N ( val value : String ) annotation class O ( val value : String ) annotation class P ( val value : String ) annotation class R ( val value : String ) annotation class S ( val value : String ) annotation class T ( val value : String ) annotation class U ( val value : String ) annotation cla
import kotlin . reflect . KClass import kotlin . test . assertEquals import kotlin . test . assertTrue annotation class A ( val value : String ) annotation class B ( val value : String ) annotation class C ( val value : String ) annotation class D ( val value : String ) fun box ( ) : String { assertEquals ( "" , A :: class . qualifiedName ) assertEquals ( "" , B :: class . qualifiedName ) assertEquals ( "" , C :: class . qualifiedName ) assertEquals ( "" , D :: class . qualifiedName ) assertTrue ( A :: class . qualifiedName ! ! . contains ( "" ) ) assertTrue ( B :: class . qualifiedName ! ! . contains ( "" ) ) assertTrue ( C :: class . qualifiedName ! ! . contains ( "" ) ) assertTrue ( D :: class . qualifiedName ! ! . contains ( "" ) ) return "OK" }
import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ OptIn ( kotlin . native . runtime . NativeRuntimeApi :: class ) import kotlin . native . concurrent . * import kotlin . test . * import kotlinx . cinterop . * import kotlin . native . internal . * import kotlin . native . internal . test . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration

package org . jetbrains . kotlin . gradle . plugin . internal import org . gradle . api . Project import org . gradle . api . provider . Provider import org . jetbrains . kotlin . gradle . plugin . VariantImplementationFactories import org . jetbrains . kotlin . gradle . plugin . variantImplementationFactory import org . jetbrains . kotlin . gradle . targets . js . dsl . ExperimentalWasmDsl import org . jetbrains . kotlin . gradle . targets . js . dsl . KotlinJsSubTargetContainerDsl import org . jetbrains . kotlin . gradle . targets . js . dsl . KotlinWasmSubTargetContainerDsl import org . jetbrains . kotlin . gradle . targets . js . dsl . KotlinWasmSubTargetDsl import org . jetbrains . kotlin . gradle . targets . js . ir . KotlinJsIrTarget import org . jetbrains . kotlin . gradle . targets . js . ir
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *


import org . jetbrains . kotlin . fir . FirSession import org . jetbrains . kotlin . fir . declarations . FirFile import org . jetbrains . kotlin . fir . resolve . ScopeSession import org . jetbrains . kotlin . fir . resolve . transformers . ReturnTypeCalculatorForFullBodyResolve import org . jetbrains . kotlin . fir . symbols . impl . FirCallableSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirClassLikeSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirFunctionSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirPropertySymbol import org . jetbrains . kotlin . fir . types . ConeErrorType import org . jetbrains . kotlin . fir . types . ConeFlexibleType import org . jetbrains . kotlin . fir . types . ConeKotlinType import org . jetbrains . kotlin
fun main ( ) { val modelHub = ONNXModelHub ( cacheDirectory = File ( "" ) ) val model = modelHub . loadModel ( ONNXModels . ObjectDetection . SSD ) model . use { detectionModel -> println ( detectionModel ) val imageFile = getFileFromResource ( "" ) val detectedObjects = detectionModel . detectObjects ( imageFile = imageFile ) detectedObjects . forEach { println ( "" ) } } }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirRegularClassSymbol import org . jetbrains . kot
fun main ( ) { val ( train , test ) = mnist ( ) lenet5Classic ( ) }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirRegularClassSymbol import org . jetbrains . kot

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *

import kotlin . experimental . ExperimentalNativeApi import kotlin . native . internal . test . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin
import kotlin . experimental . ExperimentalNativeApi import kotlin . native . concurrent . * import kotlin . native . internal . * import kotlin . test . * private const val SEGMENT_SIZE = Segment . SIZE private const val MAX_BYTES_PER_MINUTE = 0 private const val MAX_BYTES_PER_HOUR = 0 private const val MAX_BYTES_PER_DAY = 0 private const val MAX_BYTES_PER_WEEK = 0 private const val MAX_BYTES_PER_DAY = 0 private const val MAX_BYTES_PER_SECOND = 0 private const val MAX_BYTES_PER_MINUTE = 0 private const val MAX_BYTES_PER_HOUR = 0 private const val MAX_BYTES_PER_DAY = 0 private const val MAX_BYTES_PER_WEEK = 0 private const val MAX_BYTES_PER_SECOND = <NUM_LIT





import org . jetbrains . kotlinx . dl . api . core . shape . TensorShape import org . jetbrains . kotlinx . dl . api . preprocessing . Operation import org . jetbrains . kotlinx . dl . api . preprocessing . pipeline import org . jetbrains . kotlinx . dl . impl . preprocessing . image . ColorMode import org . jetbrains . kotlinx . dl . impl . preprocessing . image . convert import org . jetbrains . kotlinx . dl . impl . preprocessing . image . resize import org . jetbrains . kotlinx . dl . impl . preprocessing . image . toFloatArray import org . jetbrains . kotlinx . dl . impl . preprocessing . onResult import org . jetbrains . kotlinx . dl . impl . preprocessing . rescale import org . jetbrains . kotlinx . dl . impl . summary . logSummary import java . awt . image . Buffered
import org . jetbrains . kotlinx . dl . api . core . shape . TensorShape import org . jetbrains . kotlinx . dl . api . preprocessing . Operation import org . jetbrains . kotlinx . dl . api . preprocessing . pipeline import org . jetbrains . kotlinx . dl . impl . preprocessing . image . ColorMode import org . jetbrains . kotlinx . dl . impl . preprocessing . image . convert import org . jetbrains . kotlinx . dl . impl . preprocessing . image . resize import org . jetbrains . kotlinx . dl . impl . preprocessing . image . toFloatArray import org . jetbrains . kotlinx . dl . impl . preprocessing . onResult import org . jetbrains . kotlinx . dl . impl . preprocessing . rescale import org . jetbrains . kotlinx . dl . impl . summary . logSummary import java . awt . image . Buffered
import org . jetbrains . kotlinx . dl . api . core . shape . TensorShape import org . jetbrains . kotlinx . dl . api . preprocessing . Operation import org . jetbrains . kotlinx . dl . api . preprocessing . pipeline import org . jetbrains . kotlinx . dl . impl . preprocessing . image . ColorMode import org . jetbrains . kotlinx . dl . impl . preprocessing . image . convert import org . jetbrains . kotlinx . dl . impl . preprocessing . image . resize import org . jetbrains . kotlinx . dl . impl . preprocessing . image . toFloatArray import org . jetbrains . kotlinx . dl . impl . preprocessing . onResult import org . jetbrains . kotlinx . dl . impl . preprocessing . rescale import org . jetbrains . kotlinx . dl . impl . summary . logSummary import java . awt . image . Buffered
import java . awt . Dimension import java . awt . image . BufferedImage import javax . swing . JComponent import javax . swing . JDialog import javax . swing . JFrame import javax . swing . JComponent import javax . swing . JDialog import javax . swing . JFrame import javax . swing . JComponent import javax . swing . JDialog import javax . swing . JFrame import javax . swing . JComponent import javax . swing . JDialog import javax . swing . JFrame import javax . swing . JComponent import javax . swing . JDialog import javax . swing . JFrame import javax . swing . JComponent import javax . swing . JDialog import javax . swing . JFrame import javax . swing . JComponent import javax . swing . JDialog import javax . swing . JFrame import jav
import kotlin . test . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * val sb = StringBuilder ( ) open class EmptyContinuation ( override val context : CoroutineContext = EmptyCoroutineContext ) : Continuation < Any ? > { companion object : EmptyContinuation ( ) override fun resumeWith ( result : Result < Any ? > ) { result . getOrThrow ( ) } } suspend fun s1 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resume ( 42 ) COROUTINE_SUSPENDED } suspend fun s2 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resumeWithException ( Error ( ) ) COROUTINE_SUSPENDED } fun f1 ( ) : Int { sb . appendLine ( "" ) return 0

import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import helpers . * fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } suspend fun calculate ( ) = "OK" fun box ( ) : String { builder { calculate ( ) } return "" }

import org . gradle . api . DefaultTask import org . gradle . api . file . DirectoryProperty import org . gradle . api . file . FileCollection import org . gradle . api . model . ObjectFactory import org . gradle . api . provider . Provider import org . gradle . api . tasks . * import org . gradle . work . DisableCachingByDefault import org . jetbrains . kotlin . gradle . plugin . cocoapods . CocoapodsExtension . * import org . jetbrains . kotlin . gradle . plugin . cocoapods . CocoapodsExtension . CocoapodsDependency . * import org . jetbrains . kotlin . gradle . plugin . cocoapods . CocoapodsExtension . CocoapodsDependency . PodLocation . * import org . jetbrains . kotlin . gradle . plugin . cocoapods . CocoapodsExtension . PodLocation . * import org . jetbrains . kotlin . gradle . plugin . cocoapods .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
import kotlin . test . * val log = StringBuilder ( ) fun logged ( message : String , value : Int ) = value . also { log . append ( message ) } fun box ( ) : String { var sum = 0 for ( i in ( logged ( "" , 1 ) .. logged ( "" , 4 ) ) . reversed ( ) . reversed ( ) ) { sum = sum * 10 + i } assertEquals ( 0 , sum ) assertEquals ( "" , log . toString ( ) ) return "OK" }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbrains . kotlin
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbrains . kotlin
@ Throws ( NoSuchElementException :: class ) @ SinceKotlin ( "1.7" ) public fun CharProgression . first ( predicate : ( Char ) -> Boolean ) : Char { for ( element in this ) if ( predicate ( element ) ) return element throw NoSuchElementException ( ) } @ Throws ( NoSuchElementException :: class ) @ SinceKotlin ( "1.7" ) public fun CharProgression . firstOrNull ( ) : Char ? { for ( element in this ) { if ( predicate ( element ) ) return element } return null } @ Throws ( NoSuchElementException :: class ) @ SinceKotlin ( "1.7" ) public fun CharProgression . firstOrNull ( predicate : ( Char ) -> Boolean ) : Char ? { for ( element in this ) if ( predicate ( element ) ) return element return null }
@ SinceKotlin ( "1.4" ) public fun < T : Comparable < T > > Sequence < T > . firstOrNull ( ) : T ? { val iterator = iterator ( ) if ( ! iterator . hasNext ( ) ) return null var min = iterator . next ( ) while ( iterator . hasNext ( ) ) { val e = iterator . next ( ) if ( min > e ) { min = e } } return min }
@ SinceKotlin ( "1.4" ) public fun LongProgression . firstOrNull ( predicate : ( Long ) -> Boolean ) : Long ? { for ( element in this ) if ( predicate ( element ) ) return element return null } @ SinceKotlin ( "1.4" ) public fun LongProgression . firstOrNull ( predicate : ( Int ) -> Boolean ) : Long ? { for ( element in this ) if ( predicate ( element ) ) return element return null }
@ SinceKotlin ( "1.7" ) public fun CharProgression . firstOrNull ( predicate : ( Char ) -> Boolean ) : Char ? { for ( element in this ) if ( predicate ( element ) ) return element return null } @ SinceKotlin ( "1.7" ) public fun CharProgression . firstOrNull ( predicate : ( Char ) -> Int ) : Char ? { for ( element in this ) if ( predicate ( element ) ) return element return null } @ SinceKotlin ( "1.7" ) public fun CharProgression . firstOrNull ( predicate : ( Char ) -> Long ) : Char ? { for ( element in this ) if ( predicate ( element ) ) return element return null } @ SinceKotlin ( "1.7" ) public fun CharProgression . firstOrNull ( predicate : ( Char ) -> Boolean ) : Char ? { for ( element in this ) if ( predicate ( element ) ) return element return null }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external fun foo ( )
@ SinceKotlin ( "1.4" ) public fun LongProgression . last ( predicate : ( Long ) -> Boolean ) : Long { var last : Long ? = 0 for ( e in this ) { if ( predicate ( e ) ) { last = e } } return last } @ SinceKotlin ( "1.4" ) public fun LongProgression . lastOrNull ( ) : Long ? { var last : Long ? = 0 for ( e in this ) { if ( predicate ( e ) ) { last = e } } return last }
@ SinceKotlin ( "1.4" ) public fun CharProgression . last ( predicate : ( Char ) -> Boolean ) : Char { for ( element in this ) if ( predicate ( element ) ) return element throw NoSuchElementException ( "" ) } @ SinceKotlin ( "1.4" ) public fun CharProgression . last ( predicate : ( Char ) -> Int ) : Char { for ( element in this ) if ( predicate ( element ) ) return element throw NoSuchElementException ( "" ) } @ SinceKotlin ( "1.4" ) public fun CharProgression . last ( predicate : ( Char ) -> Boolean ) : Char { for ( element in this ) if ( predicate ( element ) ) return element throw NoSuchElementException ( "" ) }
@ SinceKotlin ( "1.4" ) public fun < T : Comparable < T > > Iterable < T > . lastOrNull ( ) : T ? = null @ SinceKotlin ( "1.4" ) public fun < T : Comparable < T > > Array < T > . lastOrNull ( ) : T ? = null @ SinceKotlin ( "1.4" ) public fun < T : Comparable < T > > progression ( start : T , endInclusive : T ) : IntProgression = IntProgression ( start , endInclusive , 1 ) @ SinceKotlin ( "1.4" ) public fun < T : Comparable < T > > progression ( start : T , endInclusive : T , step : Int ) : IntProgression = IntProgression ( start , endInclusive , step )
@ SinceKotlin ( "1.4" ) public fun < T : Comparable < T > > Sequence < T > . lastOrNull ( ) : T ? { val iterator = iterator ( ) if ( ! iterator . hasNext ( ) ) return null var last = iterator . next ( ) while ( iterator . hasNext ( ) ) { last = iterator . next ( ) } return last }
@ SinceKotlin ( "1.4" ) public fun < T : Comparable < T > > Sequence < T > . lastOrNull ( ) : T ? { val iterator = iterator ( ) if ( ! iterator . hasNext ( ) ) return null var last = iterator . next ( ) while ( iterator . hasNext ( ) ) { last = iterator . next ( ) } return last }
import kotlin . random . * import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = Int . MIN_VALUE .. Int . MAX_VALUE for ( i in intProgression step 2 ) { intList += i } assertEquals ( listOf ( Int . MIN_VALUE ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = Long . MIN_VALUE .. Long . MAX_VALUE for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( Long . MIN_VALUE ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = Char . MIN_VALUE .. Char . MAX_VALUE for ( i in charProgression step 2 ) { charList += i } assertEquals ( listOf ( Char . MIN_VALUE ) , charList ) return "
import kotlin . random . * import kotlin . test . * fun box ( ) : String { assertEquals ( 0 , 0 . random ( ) ) assertEquals ( 0 , 0 . random ( 0 ) ) assertEquals ( 0 , 0 . random ( 0 ) ) assertEquals ( 0 , 0 . random ( 0 ) ) assertEquals ( 0 , Long . MAX_VALUE . random ( ) ) assertEquals ( 0 , Long . MAX_VALUE . random ( 0 ) ) return "OK" }
@ SinceKotlin ( "1.4" ) public actual fun CharRange . random ( ) : Char { return random ( Random ) } @ SinceKotlin ( "1.4" ) public actual fun CharRange . random ( random : Random ) : Char { return random . next ( ) }
import kotlin . test . * fun box ( ) : String { val actualIndices = mutableListOf < Int > ( ) val actualValues = mutableListOf < Int > ( ) for ( i in J . arrayOfMaybeNullable ( ) . indices ) { actualIndices += i actualValues += i } assertEquals ( listOf ( 0 , 1 ) , actualIndices ) assertEquals ( listOf ( 42 , - 42 ) , actualValues ) return "OK" } public class J { public static Integer [ ] arrayOfMaybeNullable ( ) { return new Integer [ ] { 42 , - 42 } ; } }
import kotlin . test . * fun box ( ) : String { val actualIndices = mutableListOf < Int > ( ) val actualValues = mutableListOf < Int > ( ) for ( i in J . listOfNotNull ( ) . indices ) { actualIndices += i actualValues += i } assertEquals ( listOf ( 0 , 1 ) , actualIndices ) assertEquals ( listOf ( 42 , - 42 ) , actualValues ) return "OK" } import java . util . * ; import org . jetbrains . annotations . * ; public class J { public static List < @ NotNull Integer > listOfNotNull ( ) { return Collections . singletonList ( null ) ; } }
import kotlin . random . * import kotlin . test . * import kotlin . native . concurrent . * import kotlin . native . internal . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import k
@ SinceKotlin ( "1.4" ) public actual fun IntRange . randomOrNull ( ) : Int ? = if ( isEmpty ( ) ) null else random ( )
fun box ( ) : String { val list = listOf ( 1 , 2 , 3 ) return if ( list . randomOrNull ( ) == 1 ) "OK" else "fail" }
@ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public inline fun CharRange . randomOrNull ( predicate : ( Char ) -> Boolean ) : Char ? { for ( element in this ) if ( predicate ( element ) ) return element return null }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = Int . MIN_VALUE downTo Int . MAX_VALUE for ( i in intProgression step Int . MAX_VALUE ) { intList += i } assertEquals ( listOf ( Int . MIN_VALUE ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = Long . MIN_VALUE downTo Long . MAX_VALUE for ( i in longProgression step Long . MAX_VALUE ) { longList += i } assertEquals ( listOf ( Long . MIN_VALUE ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = Char . MIN_VALUE downTo Char . MAX_VALUE for ( i in charProgression step Char . MAX_VALUE . toInt ( ) ) { charList += i } assertEquals ( listOf ( Char . MIN_VALUE ) ,
@ SinceKotlin ( "1.4" ) public fun FloatRange . randomOrNull ( random : Random ) : Float ? = if ( isEmpty ( ) ) random . nextFloat ( ) else null @ SinceKotlin ( "1.4" ) public fun DoubleRange . randomOrNull ( random : Random ) : Double ? = if ( isEmpty ( ) ) random . nextDouble ( ) else null @ SinceKotlin ( "1.4" ) public fun CharRange . randomOrNull ( random : Random ) : Char ? = if ( isEmpty ( ) ) random . nextChar ( ) else null
@ SinceKotlin ( "1.4" ) public fun < T : Comparable < T > > CharRange . randomOrNull ( random : Random ) : T ? { if ( isEmpty ( ) ) return null return get ( random . nextInt ( length ) ) } @ SinceKotlin ( "1.4" ) public fun CharRange . randomOrNull ( random : Random ) : Char ? { if ( isEmpty ( ) ) return null return get ( random . nextInt ( length ) ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ SinceKotlin ( "1.4" ) public actual fun IntRange ( start : Int , endInclusive : Int ) : IntRange = IntRange ( start , endInclusive ) public actual fun IntRange ( start : Int , end : Int ) : IntRange = IntRange ( start , end ) public actual fun IntRange ( start : Int , end : Int ) : IntRange = IntRange ( start , end ) public actual fun IntRange ( start : Int , end : Int ) : IntRange = IntRange ( start , end ) public actual fun IntRange ( start : Int , end : Int ) : IntRange = IntRange ( start , end )
@ SinceKotlin ( "1.4" ) public actual fun LongRange ( start : Long , endInclusive : Long ) : LongRange { return LongRange ( start , endInclusive ) ; } public actual fun LongRange ( start : Long , endExclusive : Long ) : LongRange { return LongRange ( start , endExclusive ) ; } public actual fun LongRange ( start : Long , end : Long ) : LongRange { return LongRange ( start , end ) ; } public actual fun LongRange ( start : Long , endInclusive : Long ) : LongRange { return LongRange ( start , endInclusive ) ; } public actual fun LongRange ( start : Long , endExclusive : Long ) : LongRange { return LongRange ( start , endExclusive ) ; } public actual fun LongRange ( start : Long , end : Long ) : LongRange { return LongRange ( start , end ) ; }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . checkers . declaration . FirBasicDeclarationChecker import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . * import org . jetbrains . k
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ SinceKotlin ( "1.4" ) public actual fun LongRange ( start : Long , endInclusive : Long ) : LongRange { return LongRange ( start , endInclusive ) ; } public actual fun LongRange ( start : Long , endExclusive : Long ) : LongRange { return LongRange ( start , endExclusive ) ; } public actual fun LongRange ( start : Long , end : Long ) : LongRange { return LongRange ( start , end ) ; }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ SinceKotlin ( "1.4" ) public actual fun IntRange ( start : Int , endInclusive : Int ) : IntRange = IntRange ( start , endInclusive ) public actual fun IntRange ( start : Int , end : Int ) : IntRange = IntRange ( start , end ) public actual fun IntRange ( start : Int , end : Int ) : IntRange = IntRange ( start , end ) public actual fun IntRange ( start : Int , end : Int ) : IntRange = IntRange ( start , end ) public actual fun IntRange ( start : Int , end : Int ) : IntRange = IntRange ( start , end )
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ SinceKotlin ( "1.4" ) public actual fun IntRange ( start : Int , endInclusive : Int ) : IntRange = IntRange ( start , endInclusive ) public actual fun IntRange ( start : Int , end : Int ) : IntRange = IntRange ( start , end ) public actual fun IntRange ( start : Int , end : Int ) : IntRange = IntRange ( start , end ) public actual fun IntRange ( start : Int , end : Int ) : IntRange = IntRange ( start , end ) public actual fun IntRange ( start : Int , end : Int ) : IntRange = IntRange ( start , end ) public actual fun IntRange ( start : Int , end : Int ) : IntRange = IntRange ( start , end )
@ SinceKotlin ( "1.4" ) public actual fun LongRange ( start : Long , endInclusive : Long ) : LongRange { return if ( start >= endInclusive ) LongRange ( start - endInclusive , endInclusive ) else LongRange ( start , endInclusive ) ; } @ SinceKotlin ( "1.4" ) public actual fun LongRange ( start : Int , endInclusive : Int ) : LongRange { return if ( start >= endInclusive ) LongRange ( start - endInclusive , endInclusive ) else LongRange ( start , endInclusive ) ; } @ SinceKotlin ( "1.4" ) public actual fun LongRange ( start : Long , endInclusive : Long ) : LongRange { return if ( start >= endInclusive ) LongRange ( start - endInclusive , endInclusive ) else LongRange ( start , endInclusive ) ; }
@ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun Int . downTo ( to : Short ) : IntProgression @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun Int . downTo ( to : Int ) : IntProgression @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun Int . downTo ( to : Long ) : IntProgression @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun Int . downTo ( to : Float ) : IntProgression @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun Int . downTo ( to : Double ) : IntProgression
@ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun Long . downTo ( to : Short ) : LongProgression @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun Long . downTo ( to : Int ) : LongProgression @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun Long . downTo ( to : Long ) : LongProgression @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun Long . downTo ( to : Float ) : LongProgression @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun Long . downTo ( to : Double ) : LongProgression
@ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun Int . downTo ( to : Int ) : IntProgression = IntProgression ( this , to , 1 ) @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun Long . downTo ( to : Long ) : LongProgression = LongProgression ( this , to , 1L ) @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun Byte . downTo ( to : Byte ) : ByteProgression = ByteProgression ( this , to , 1 ) @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun Int . downTo ( to : Int ) : IntProgression = IntProgression ( this , to , 1 ) @ SinceKotlin ( "1.1" ) @ kotlin . internal . InlineOnly public actual inline fun Long . downTo ( to : Long
public class IntProgression { public final int first = 1 ; public final int last = 5 ; public final int step = - 2 ; } fun box ( ) : String { val progression = IntProgression . fromClosedRange ( 1 , 5 , - 2 ) if ( progression . first != 1 ) return "" if ( progression . last != 5 ) return "" if ( progression . step != - 2 ) return "" return "OK" }
public class CharProgression { public final int first = 1 ; public final int last = 7 ; public final int step = - 2 ; } fun box ( ) : String { val p = CharProgression ( ) if ( p . first != 1 ) return "" if ( p . last != 7 ) return "" if ( p . step != - 2 ) return "" return "OK" }
public class IntProgression { public final int first = 1 ; public final int last = 5 ; public final int step = - 2 ; } fun box ( ) : String { val p = IntProgression ( ) if ( p . first != 1 ) return "" if ( p . last != 5 ) return "" if ( p . step != - 2 ) return "" return "OK" }
@ SinceKotlin ( "1.4" ) public infix fun Long . downTo ( to : Int ) : LongProgression = LongProgression . fromClosedRange ( this , to , - 1 ) @ SinceKotlin ( "1.4" ) public infix fun Long . downTo ( to : Long ) : LongProgression = LongProgression . fromClosedRange ( this , to , - 1 ) @ SinceKotlin ( "1.4" ) public infix fun Long . downTo ( to : Long ) : LongProgression = LongProgression . fromClosedRange ( this , to , - 1 )
@ SinceKotlin ( "1.4" ) public infix fun Byte . downTo ( to : Int ) : IntProgression = IntProgression . fromClosedRange ( this , to , - 1 ) @ SinceKotlin ( "1.4" ) public infix fun Byte . downTo ( to : Int ) : IntProgression = IntProgression . fromClosedRange ( this , to , 1 ) @ SinceKotlin ( "1.4" ) public infix fun Byte . downTo ( to : Long ) : LongProgression = LongProgression . fromClosedRange ( this , to , - 1 ) @ SinceKotlin ( "1.4" ) public infix fun Byte . downTo ( to : Long ) : LongProgression = LongProgression . fromClosedRange ( this , to , 1 ) @ SinceKotlin ( "1.4" ) public infix fun Byte . downTo ( to : Short ) : ShortProgression = ShortProgression . fromClosedRange ( this , to , - 1 ) @ SinceK
public class IntProgression { public final int first = 1 ; public final int last = 5 ; public final int step = - 2 ; } fun box ( ) : String { val p = IntProgression ( ) if ( p . first != 1 ) return "" if ( p . last != 5 ) return "" if ( p . step != - 2 ) return "" return "OK" }
@ SinceKotlin ( "1.4" ) public infix fun Int . downTo ( to : Byte ) : ByteProgression @ SinceKotlin ( "1.4" ) public infix fun Int . downTo ( to : Short ) : ShortProgression @ SinceKotlin ( "1.4" ) public infix fun Int . downTo ( to : Int ) : IntProgression @ SinceKotlin ( "1.4" ) public infix fun Int . downTo ( to : Long ) : LongProgression @ SinceKotlin ( "1.4" ) public infix fun Int . downTo ( to : Byte ) : ByteProgression @ SinceKotlin ( "1.4" ) public infix fun Int . downTo ( to : Short ) : ShortProgression @ SinceKotlin ( "1.4" ) public infix fun Int . downTo ( to : Int ) : IntProgression @ SinceKotlin ( "1.4" ) public infix fun Int . downTo ( to : Long ) : LongProgression
@ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun LongProgression . downTo ( to : Long ) : LongProgression = LongProgression ( this , to , - 1 ) @ SinceKotlin ( "1.4" ) @ kotlin . internal . InlineOnly public actual inline fun LongProgression . downTo ( to : Long ) : LongProgression = LongProgression ( this , to , 1 )
@ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun Byte . downTo ( to : ULong ) : ULongProgression @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun Short . downTo ( to : Byte ) : ByteProgression @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun Short . downTo ( to : UByte ) : UByteProgression @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun Short . downTo ( to : UShort ) : UShortProgression @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun Short . downTo ( to : UInt ) : UIntProgression @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedType
@ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun UInt . downTo ( to : ULong ) : ULongProgression @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . downTo ( to : UByte ) : UByteProgression @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . downTo ( to : UShort ) : UShortProgression @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . downTo ( to : UInt ) : UIntProgression @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . downTo ( to : ULong ) : ULongProgression
@ SinceKotlin ( "1.4" ) public infix fun Int . downTo ( to : Byte ) : IntProgression @ SinceKotlin ( "1.4" ) public infix fun Int . downTo ( to : Int ) : IntProgression @ SinceKotlin ( "1.4" ) public infix fun Int . downTo ( to : Long ) : IntProgression @ SinceKotlin ( "1.4" ) public infix fun Int . downTo ( to : Float ) : IntProgression @ SinceKotlin ( "1.4" ) public infix fun Int . downTo ( to : Double ) : IntProgression
@ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . downTo ( to : UShort ) : ULongProgression @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . downTo ( to : UInt ) : ULongProgression @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalUnsignedTypes :: class ) public infix fun ULong . downTo ( to : ULong ) : ULongProgression
@ SinceKotlin ( "1.4" ) public infix fun Byte . downTo ( to : Int ) : IntProgression = IntProgression ( this . toInt ( ) , this . toInt ( ) , - 1 , to . toInt ( ) ) @ SinceKotlin ( "1.4" ) public infix fun Byte . downTo ( to : Long ) : LongProgression = LongProgression ( this . toLong ( ) , this . toLong ( ) , - 1 , to . toLong ( ) ) @ SinceKotlin ( "1.4" ) public infix fun Byte . downTo ( to : Float ) : FloatProgression = FloatProgression ( this . toFloat ( ) , this . toFloat ( ) , - 1 , to . toFloat ( ) ) @ SinceKotlin ( "1.4" ) public infix fun Byte . downTo ( to : Double ) : DoubleProgression = DoubleProgression ( this . toDouble ( ) , this . toDouble ( ) , - 1 , to . toDouble ( ) )
public class IntProgression { public final int first = 1 ; public final int last = 5 ; public final int step = - 2 ; } fun box ( ) : String { val p = IntProgression ( ) if ( p . first != 1 ) return "" if ( p . last != 5 ) return "" if ( p . step != - 2 ) return "" return "OK" }
fun box ( ) : String { val p = IntProgression . fromClosedRange ( 0 , 10 , 2 ) return if ( p . first == 0 && p . last == 10 && p . step == 2 ) "OK" else "fail" }
fun box ( ) : String { var step = 1L for ( i in ( 1L .. 0 ) . reversed ( ) . reversed ( ) ) { step *= 10 } return if ( step == 0 ) "OK" else "" }
public class CharProgression { public final int first = 1 ; public final int last = 7 ; public final int step = 2 ; } fun main ( ) { val x = CharProgression ( ) x . first x . last x . step }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbrains . kotlin
import kotlin . test . * fun box ( ) : String { assertEquals ( listOf ( 1L , 0 , 0 ) , ( 1L .. 0 step 0 ) . toList ( ) ) assertEquals ( listOf ( 1L , 0 , 0 ) , ( 1L . toLong ( ) .. 0 . toLong ( ) step 0 ) . toList ( ) ) assertEquals ( listOf ( 1L , 0 , 0 ) , ( 1L . toLong ( ) .. 0 . toLong ( ) step 0 ) . toList ( ) ) assertEquals ( listOf ( 0 , 0 , 0 ) , ( 0 . toLong ( ) .. 0 . toLong ( ) step 0 ) . toList ( ) ) assertEquals ( listOf ( 0 , 0 , 0 ) , ( 0 . toLong ( ) .. 0 . toLong ( ) step 0 ) . toList ( ) ) assertEquals ( listOf ( 0 , 0 , 0 ) , ( 0 . to
package org . jetbrains . kotlin . analysis . low . level . api . fir . test . configurators import com . intellij . openapi . Disposable import org . jetbrains . kotlin . analysis . low . level . api . fir . test . configurators . AnalysisApiFirSourceTestConfigurator import org . jetbrains . kotlin . analysis . low . level . api . fir . test . configurators . AnalysisApiFirScriptTestConfigurator import org . jetbrains . kotlin . analysis . low . level . api . fir . test . configurators . AnalysisApiFirSourceTestConfiguratorFactory import org . jetbrains . kotlin . analysis . test . framework . base . AbstractAnalysisApiBasedTest import org . jetbrains . kotlin . analysis . test . framework . project . structure . KtTestModule import org . jetbrains . kotlin . analysis . test . framework . test . configurators . AnalysisApiTestServiceRegistrar import org . jetbrains . k
import kotlin . test . * fun box ( ) : String { assertEquals ( 0 . toByte ( ) .. 3 . toByte ( ) , 0 . toByte ( ) .. 3 . toByte ( ) ) assertEquals ( 0 . toByte ( ) .. 3 . toByte ( ) , 0 . toByte ( ) .. 3 . toByte ( ) ) assertEquals ( 0 . toByte ( ) .. 3 . toByte ( ) , 0 . toByte ( ) .. 3 . toByte ( ) ) assertEquals ( 0 . toShort ( ) .. 3 . toShort ( ) , 0 . toShort ( ) .. 3 . toShort ( ) ) assertEquals ( 0 . toShort ( ) .. 3 . toShort ( ) , 0 . toShort ( ) .. 3 . toShort ( ) ) assertEquals ( 0 . toShort ( ) .. 3 . toShort ( ) , 0 . toShort ( ) .. 3 . toShort ( ) ) assertEquals ( 0 . toShort
@ SinceKotlin ( "1.4" ) public infix fun Long . until ( to : Short ) : LongRange { if ( to <= Short . MIN_VALUE ) return LongRange . EMPTY return this . rangeUntil ( to . toLong ( ) ) } @ SinceKotlin ( "1.4" ) public infix fun Long . until ( to : Int ) : LongRange { if ( to <= Int . MIN_VALUE ) return LongRange . EMPTY return this . rangeUntil ( to . toLong ( ) ) } @ SinceKotlin ( "1.4" ) public infix fun Long . until ( to : Long ) : LongRange { if ( to <= Long . MIN_VALUE ) return LongRange . EMPTY return this . rangeUntil ( to ) } @ SinceKotlin ( "1.4" ) public infix fun Long . until ( to : Short ) : LongRange { if ( to <= Short . MIN_VALUE ) return LongRange . EMPTY return this . rangeUntil ( to . toLong ( ) ) <EOL
import kotlin . test . * val sb = StringBuilder ( ) fun box ( ) : String { for ( i in Byte . MIN_VALUE .. Byte . MAX_VALUE ) { sb . append ( i ) if ( i != 0 . toByte ( ) ) break } assertEquals ( "" , sb . toString ( ) ) return "OK" }
import kotlin . test . * fun box ( ) : String { assertTrue ( 0 . toShort ( ) until 0 . toShort ( ) ) assertTrue ( 0 . toShort ( ) until 1 . toShort ( ) ) assertTrue ( 0 . toShort ( ) until 2 . toShort ( ) ) assertTrue ( 0 . toShort ( ) until 3 . toShort ( ) ) assertTrue ( 1 . toShort ( ) until 0 . toShort ( ) ) assertTrue ( 1 . toShort ( ) until 1 . toShort ( ) ) assertTrue ( 1 . toShort ( ) until 2 . toShort ( ) ) assertTrue ( 1 . toShort ( ) until 3 . toShort ( ) ) assertTrue ( 2 . toShort ( ) until 0 . toShort ( ) ) assertTrue ( 2 . toShort ( ) until 1 . toShort ( ) ) assertTrue ( 2 . toShort ( ) until 2 . toShort ( ) ) assertTrue ( 2 .
fun test ( a : Char , b : Char ) { < ! EQUALITY_NOT_APPLICABLE ! > a == b < ! > < ! EQUALITY_NOT_APPLICABLE ! > a === b < ! > < ! EQUALITY_NOT_APPLICABLE ! > a !== b < ! > }
import kotlin . test . * val sb = StringBuilder ( ) fun box ( ) : String { for ( i in Int . MIN_VALUE .. Int . MAX_VALUE ) { sb . append ( i ) ; } assertEquals ( "" , sb . toString ( ) ) return "OK" }
@ SinceKotlin ( "1.4" ) public infix fun Long . until ( to : Long ) : LongRange { return this . rangeUntil ( to ) } @ SinceKotlin ( "1.4" ) public infix fun Long . until ( to : Short ) : LongRange { return this . rangeUntil ( to . toLong ( ) ) } @ SinceKotlin ( "1.4" ) public infix fun Long . until ( to : Byte ) : LongRange { return this . rangeUntil ( to . toLong ( ) ) } @ SinceKotlin ( "1.4" ) public infix fun Long . until ( to : Int ) : LongRange { return this . rangeUntil ( to . toLong ( ) ) } @ SinceKotlin ( "1.4" ) public infix fun Long . until ( to : Long ) : LongRange { return this . rangeUntil ( to ) } @ SinceKotlin ( "1.4" ) public infix fun Long . until ( to : Short ) : Long
import kotlin . test . * val sb = StringBuilder ( ) fun box ( ) : String { for ( i in Byte . MIN_VALUE .. Byte . MAX_VALUE ) { sb . append ( i ) if ( i != 0 . toByte ( ) ) break } assertEquals ( "" , sb . toString ( ) ) return "OK" }
import kotlin . test . * val sb = StringBuilder ( ) fun box ( ) : String { for ( i in Short . MIN_VALUE .. Short . MAX_VALUE ) { sb . append ( i ) if ( i == 0 . toShort ( ) ) continue } assertEquals ( "" , sb . toString ( ) ) return "OK" }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) return "OK" }
import kotlin . test . * val sb = StringBuilder ( ) fun box ( ) : String { for ( i in Int . MIN_VALUE .. Int . MAX_VALUE ) { sb . append ( i ) ; } sb . appendLine ( ) for ( i in Long . MIN_VALUE .. Long . MAX_VALUE ) { sb . append ( i ) ; } sb . appendLine ( ) return "OK" }
import kotlin . test . * val sb = StringBuilder ( ) fun box ( ) : String { for ( i in Byte . MIN_VALUE .. Byte . MAX_VALUE ) { sb . append ( i ) if ( i != 0 . toByte ( ) ) { sb . append ( "" ) } } assertEquals ( "" , sb . toString ( ) ) return "OK" }
fun box ( ) : String { return if ( 1 . until ( 2 ) == 2 ) "OK" else "fail" }
fun box ( ) : String { return if ( 1 . until ( 2 ) == 1 ) "OK" else "fail" }
fun box ( ) : String { return if ( 1 . until ( 2 ) == 2 ) "OK" else "fail" }
import kotlin . test . * val sb = StringBuilder ( ) fun box ( ) : String { for ( i in Byte . MIN_VALUE .. Byte . MAX_VALUE ) { sb . append ( i ) if ( i != 0 . toByte ( ) ) sb . append ( "U+002CU+0020" ) } assertEquals ( "" , sb . toString ( ) ) return "OK" }
import kotlin . test . * fun box ( ) : String { assertTrue ( 0 until 1 == IntRange ( 0 , 1 ) ) assertTrue ( 0 until 2 == IntRange ( 0 , 2 ) ) assertTrue ( 0 until 3 == IntRange ( 0 , 3 ) ) assertFalse ( 0 until 4 == IntRange ( 0 , 4 ) ) assertFalse ( 1 until 0 == IntRange ( 1 , 0 ) ) assertFalse ( 1 until 2 == IntRange ( 1 , 2 ) ) assertFalse ( 1 until 3 == IntRange ( 1 , 3 ) ) return "OK" }

@ kotlin . internal . InlineOnly public inline fun Byte . coerceAtLeast ( minimumValue : Int ) : Int = ( toInt ( ) . coerceAtLeast ( minimumValue . toInt ( ) ) ) . toInt ( ) public inline fun Byte . coerceAtLeast ( minimumValue : Long ) : Long = ( toLong ( ) . coerceAtLeast ( minimumValue . toLong ( ) ) ) . toLong ( ) public inline fun Byte . coerceAtLeast ( minimumValue : UByte ) : UByte = ( toUByte ( ) . coerceAtLeast ( minimumValue . toUByte ( ) ) ) . toUByte ( ) public inline fun Byte . coerceAtLeast ( minimumValue : UShort ) : UShort = ( toUShort ( ) . coerceAtLeast ( minimumValue . toUShort ( ) ) ) . toUShort ( ) public inline fun Byte . coerceAtLeast ( minimumValue : UInt ) : UInt = ( toUInt ( ) . coerceAtLeast ( minimumValue . toUInt ( ) ) )
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > "" } }

@ kotlin . internal . InlineOnly public inline fun Byte . coerceAtLeast ( minimumValue : Byte ) : Byte = ( minimumValue . toInt ( ) and 0 ) . toByte ( ) @ kotlin . internal . InlineOnly public inline fun Short . coerceAtLeast ( minimumValue : Short ) : Short = ( minimumValue . toInt ( ) and 0 ) . toShort ( ) @ kotlin . internal . InlineOnly public inline fun Int . coerceAtLeast ( minimumValue : Int ) : Int = ( minimumValue . toDouble ( ) and 0 ) . toInt ( ) @ kotlin . internal . InlineOnly public inline fun Long . coerceAtLeast ( minimumValue : Long ) : Long = ( minimumValue . toDouble ( ) and 0 ) . toLong ( ) @ kotlin . internal . InlineOnly public inline fun Float . coerceAtLeast ( minimumValue : Float ) : Float = ( minimumValue . toDouble ( ) and 0 ) . toFloat ( ) @ kotlin . internal
fun box ( ) : String { if ( 0 . coerceAtLeast ( 1 ) != 1 ) return "" if ( 0 . coerceAtLeast ( 2 ) != 2 ) return "" if ( 0 . coerceAtLeast ( 3 ) != 3 ) return "" return "OK" }
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > "" } }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
@ kotlin . internal . InlineOnly public inline fun Byte . coerceAtMost ( maximumValue : Int ) : Int = ( toInt ( ) and 0 ) . coerceAtMost ( maximumValue . toUInt ( ) ) public inline fun Byte . coerceAtMost ( maximumValue : Long ) : Long = ( toLong ( ) and 0 ) . coerceAtMost ( maximumValue . toULong ( ) ) public inline fun Byte . coerceAtMost ( maximumValue : UByte ) : UByte = ( toUByte ( ) and 0 ) . coerceAtMost ( maximumValue . toUByte ( ) ) public inline fun Short . coerceAtMost ( maximumValue : Short ) : Short = ( toInt ( ) and 0 ) . coerceAtMost ( maximumValue . toInt ( ) ) public inline fun Short . coerceAtMost ( maximumValue : Int ) : Int = ( toInt ( ) and 0 ) . coerceAtMost ( maximumValue . toUInt ( ) ) public inline fun Short . coerceAtMost ( maximumValue : Long ) : Long = ( toLong (
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > } }
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > } }
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > } }
@ kotlin . internal . InlineOnly public inline fun Float . coerceAtMost ( maximumValue : Float ) : Float = nativeMath . coerceAtMost ( this , maximumValue ) @ SinceKotlin ( "1.2" ) @ InlineOnly public inline fun Double . coerceAtMost ( maximumValue : Double ) : Double = nativeMath . coerceAtMost ( this , maximumValue ) @ SinceKotlin ( "1.2" ) @ InlineOnly public inline fun Float . coerceAtMost ( maximumValue : Double ) : Float = nativeMath . coerceAtMost ( this , maximumValue ) @ SinceKotlin ( "1.2" ) @ InlineOnly public inline fun Double . coerceAtMost ( maximumValue : Float ) : Double = nativeMath . coerceAtMost ( this , maximumValue )
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > } }











@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlinx . serialization . * import kotlinx . serialization . builtins . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . protobuf . * import kotlinx . serialization . test . * import kotlin . jvm . * import kotlin . test . * import kotlin . time . * import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . days import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration






import kotlin . test . * val sb = StringBuilder ( ) fun printInt ( x : Int ) = sb . appendLine ( x . toString ( ) ) fun printBoolean ( x : Boolean ) = sb . appendLine ( x . toString ( ) ) fun printChar ( x : Char ) = sb . appendLine ( x . toString ( ) ) fun printByte ( x : Byte ) = sb . appendLine ( x . toString ( ) ) fun printShort ( x : Short ) = sb . appendLine ( x . toString ( ) ) fun printLong ( x : Long ) = sb . appendLine ( x . toString ( ) ) fun printFloat ( x : Float ) = sb . appendLine ( x . toString ( ) ) fun printDouble ( x : Double ) = sb . appendLine ( x . toString ( ) ) fun printUByte ( x : UByte ) = sb . appendLine ( x . toString ( ) ) fun printUShort ( x : UShort ) = sb . appendLine



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external fun __promisify__ ( ms : Number ) : Promise < Unit >
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }








import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > } }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String



import kotlin . math . log10 fun box ( ) : String { val result = log10 ( 0 ) if ( result != 0 ) return "" return "OK" }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbr




@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ SinceKotlin ( "1.4" ) public actual fun min ( a : Float , b : Float ) : Float { return if ( a . compareTo ( b ) < 0 ) a else b } @ SinceKotlin ( "1.4" ) public actual fun min ( a : Int , b : Int ) : Int { return if ( a . compareTo ( b ) < 0 ) a else b } @ SinceKotlin ( "1.4" ) public actual fun min ( a : Long , b : Long ) : Long { return if ( a . compareTo ( b ) < 0 ) a else b } @ SinceKotlin ( "1.4" ) public actual fun min ( a : Short , b : Short ) : Short { return if ( a . compareTo ( b ) < 0 ) a else b }
@ SinceKotlin ( "1.4" ) public actual fun max ( a : Int , b : Int ) : Int { return if ( a > b ) a else b } @ SinceKotlin ( "1.4" ) public actual fun max ( a : Long , b : Long ) : Long { return if ( a > b ) a else b } @ SinceKotlin ( "1.4" ) public actual fun max ( a : Short , b : Short ) : Short { return if ( a > b ) a else b }


@ SinceKotlin ( "1.4" ) public actual fun Double . pow ( n : Int ) : Double { if ( n == 0 ) return Double . NaN if ( n == 1 ) return this var x : Double = this for ( i in 2 .. n ) { x = x * x } return x }
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > } }
@ SinceKotlin ( "1.2" ) public expect fun Float . withSign ( sign : Int ) : Float @ SinceKotlin ( "1.2" ) public expect fun Double . withSign ( sign : Double ) : Double @ SinceKotlin ( "1.2" ) public expect fun Float . withSign ( sign : Double ) : Float
@ SinceKotlin ( "1.2" ) public expect fun Double . nextDown ( ) : Double @ SinceKotlin ( "1.2" ) public expect fun Double . nextTowards ( to : Double ) : Double @ SinceKotlin ( "1.2" ) public expect fun Double . nextAfter ( to : Double ) : Double @ SinceKotlin ( "1.2" ) public expect fun Double . nextBefore ( from : Double ) : Double @ SinceKotlin ( "1.2" ) public expect fun Double . nextAfter ( from : Double ) : Double @ SinceKotlin ( "1.2" ) public expect fun Double . nextBefore ( to : Double ) : Double
@ SinceKotlin ( "1.2" ) public expect fun Double . nextUp ( ) : Double @ SinceKotlin ( "1.2" ) public expect fun Double . nextTowards ( to : Double ) : Double @ SinceKotlin ( "1.2" ) public expect fun Double . nextAfter ( after : Double ) : Double



import kotlin . math . sin import kotlin . test . * fun box ( ) : String { assertEquals ( 0 , sin ( 0 ) ) assertEquals ( - 0 , sin ( - 0 ) ) assertEquals ( 0 , sin ( 0 ) ) assertEquals ( - 0 , sin ( - 0 ) ) assertEquals ( 0 , sin ( 0 ) ) assertEquals ( - 0 , sin ( - 0 ) ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
import kotlin . test . * fun box ( ) : String { val answer = tan ( 0 ) assertEquals ( answer , 0 ) return "OK" }


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }






import kotlin . math . atanh fun box ( ) : String { val answer = atanh ( 0 ) if ( answer != 0 ) return "" return "OK" }
import kotlin . math . * import kotlin . test . * fun box ( ) : String { assertEquals ( 0 , Math . hypot ( 0 , 0 ) ) assertEquals ( 0 , Math . hypot ( 0 , 0 ) ) assertEquals ( 0 , Math . hypot ( 0 , 0 ) ) assertEquals ( 0 , Math . hypot ( 0 , 0 ) ) assertEquals ( 0 , Math . hypot ( 0 , 0 ) ) assertEquals ( 0 , Math . hypot ( 0 , 0 ) ) assertEquals ( 0 , Math . hypot ( 0 , 0 ) ) assertEquals ( 0 , Math . hypot ( 0 , 0 ) ) assertEquals ( 0 , Math . hypot ( 0 , 0 ) ) assertEquals ( 0 , Math . hypot ( 0 , 0 ) ) assertEquals ( 0 , Math . hypot ( 0 , 0 ) ) assertEquals ( 0 ,
import kotlin . math . sqrt import kotlin . test . * fun box ( ) : String { assertEquals ( 0 , sqrt ( 0 ) ) assertEquals ( 0 , sqrt ( 0 ) ) assertEquals ( 0 , sqrt ( 0 ) ) assertEquals ( 0 , sqrt ( 0 ) ) return "OK" }
fun box ( ) : String { val exp = 0 . exp ( ) if ( exp != 0 ) return "" return "OK" }


import kotlin . math . ln fun box ( ) : String { val result = ln ( 0 ) if ( result != 0 ) return "" return "OK" }
import kotlin . math . log10 fun box ( ) : String { val result = log10 ( 0 ) if ( result != 0 ) return "" return "OK" }
import kotlin . math . log2 import kotlin . test . * fun box ( ) : String { val answer = log2 ( 0 ) assertEquals ( answer , 0 ) return "OK" }




@ SinceKotlin ( "1.2" ) public expect fun round ( x : Double ) : Double @ SinceKotlin ( "1.2" ) public expect fun round ( x : Float ) : Float @ SinceKotlin ( "1.2" ) public expect fun round ( x : Double ) : Double
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ SinceKotlin ( "1.2" ) public expect fun min ( a : Int , b : Int ) : Int @ SinceKotlin ( "1.2" ) public expect fun min ( a : Long , b : Long ) : Long @ SinceKotlin ( "1.2" ) public expect fun min ( a : Short , b : Short ) : Short @ SinceKotlin ( "1.2" ) public expect fun min ( a : Byte , b : Byte ) : Byte @ SinceKotlin ( "1.2" ) public expect fun max ( a : Float , b : Float ) : Float @ SinceKotlin ( "1.2" ) public expect fun max ( a : Int , b : Int ) : Int @ SinceKotlin ( "1.2" ) public expect fun max ( a : Long , b : Long ) : Long @ SinceKotlin ( "1.2" ) public expect fun max ( a : Short , b : Short ) : Short @ SinceKotlin ( "1.2" ) public expect fun max ( a : Byte , b : Byte
@ SinceKotlin ( "1.4" ) public actual fun max ( a : Int , b : Int ) : Int { return if ( a > b ) a else b } @ SinceKotlin ( "1.4" ) public actual fun max ( a : Long , b : Long ) : Long { return if ( a > b ) a else b } @ SinceKotlin ( "1.4" ) public actual fun max ( a : Short , b : Short ) : Short { return if ( a > b ) a else b } @ SinceKotlin ( "1.4" ) public actual fun max ( a : Byte , b : Byte ) : Byte { return if ( a > b ) a else b }


@ SinceKotlin ( "1.2" ) public expect fun Double . pow ( n : Int ) : Double @ SinceKotlin ( "1.2" ) public expect fun Byte . pow ( n : Int ) : Byte @ SinceKotlin ( "1.2" ) public expect fun Short . pow ( n : Int ) : Short @ SinceKotlin ( "1.2" ) public expect fun Int . pow ( n : Int ) : Int @ SinceKotlin ( "1.2" ) public expect fun Long . pow ( n : Int ) : Long @ SinceKotlin ( "1.2" ) public expect fun Float . pow ( n : Int ) : Float @ SinceKotlin ( "1.2" ) public expect fun Double . pow ( n : Int ) : Double @ SinceKotlin ( "1.2" ) public expect fun Byte . pow ( n : Int ) : Byte @ SinceKotlin ( "1.2" ) public expect fun Short . pow ( n : Int ) : Short @ SinceKotlin ( "1.2" ) public
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build2 ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > id ( getInv ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) !
@ SinceKotlin ( "1.2" ) public expect fun Double . withSign ( sign : Int ) : Double @ SinceKotlin ( "1.2" ) public expect fun Float . withSign ( sign : Float ) : Float @ SinceKotlin ( "1.2" ) public expect fun Double . withSign ( sign : Float ) : Double


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ SinceKotlin ( "1.4" ) public actual fun min ( a : Int , b : Int , c : Int ) : Int { return Math . min ( a , Math . min ( b , c ) ) }
import kotlin . test . * fun box ( ) : String { assertEquals ( 3 , max ( 1 , 2 ) ) assertEquals ( 3 , max ( 2 , 1 ) ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ SinceKotlin ( "1.4" ) public actual fun min ( a : Int , b : Int ) : Int { return if ( a < b ) a else b }
@ SinceKotlin ( "1.4" ) public actual fun max ( a : Int , b : Int ) : Int { return if ( a > b ) a else b }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import helpers . * fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } suspend fun calculate ( ) = "OK" fun box ( ) : String { builder { calculate ( ) } return "" }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }






@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

package org . jetbrains . kotlin . analysis . low . level . api . fir . providers import com . intellij . openapi . project . Project import com . intellij . psi . search . GlobalSearchScope import org . jetbrains . kotlin . analysis . low . level . api . fir . project . structure . LLFirLibrarySymbolProviderFactory import org . jetbrains . kotlin . analysis . low . level . api . fir . project . structure . LLFirModuleData import org . jetbrains . kotlin . analysis . low . level . api . fir . providers . LLFirModuleWithDependenciesSymbolProvider import org . jetbrains . kotlin . analysis . project . structure . KtBinaryModule import org . jetbrains . kotlin . analysis . project . structure . KtDanglingFileModule import org . jetbrains . kotlin . analysis . project . structure . KtModule import org . jetbrains . kotlin . analysis . project . structure . KtSourceModule import org . jet






import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . api . convert import org . jetbrains . kotlinx . dataframe . api . convertTo import org . jetbrains . kotlinx . dataframe . api . convertToDouble import org . jetbrains . kotlinx . dataframe . api . convertToFloat import org . jetbrains . kotlinx . dataframe . api . convertToInt import org . jetbrains . kotlinx . dataframe . api . convertToLocalDate import org . jetbrains . kotlinx . dataframe . api . convertToLong import org . jetbrains . kotlinx . dataframe . api . convertToShort import org . jetbrains . kotlinx . dataframe . api . convertToString import org .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any } external open class Foo { open fun bar ( a : Any ) : Number open var baz : Any }
import org . jetbrains . kotlin . analysis . low . level . api . fir . test . configurators . AnalysisApiFirSourceTestConfigurator import org . jetbrains . kotlin . analysis . test . framework . base . AbstractAnalysisApiBasedTest import org . jetbrains . kotlin . analysis . test . framework . project . structure . KtTestModule import org . jetbrains . kotlin . analysis . test . framework . services . expressionMarkerProvider import org . jetbrains . kotlin . analysis . test . framework . test . configurators . AnalysisApiTestServiceRegistrar import org . jetbrains . kotlin . analysis . test . framework . test . configurators . AnalysisApiTestServiceRegistrar import org . jetbrains . kotlin . analysis . test . framework . test . configurators . FrontendKind import org . jetbrains . kotlin . analysis . test . framework . test . configurators . TestModuleKind import org . jetbrains . kotlin . analysis . test . framework
import kotlin . experimental . ExperimentalTypeInference import kotlin . reflect . KClass import kotlin . reflect . KType import kotlin . reflect . KTypeProjection import kotlin . reflect . KVariance import kotlin . reflect . KVisibility import kotlin . reflect . full . createType import kotlin . reflect . full . starProjectedType import kotlin . test . assertEquals import kotlin . test . assertNotEquals import kotlin . test . assertTrue class A class B class C class D class E class F class G class H class I class J class K class L class M class N class O class P class R class S class T fun box ( ) : String { assertEquals ( "" , A :: class . simpleName ) assertEquals ( "" , B :: class . simpleName ) assert
@ file : JvmName ( "" ) @ file : JvmMultifileClass package kotlin . io . path import java . io . IOException import java . nio . file . Files import java . nio . file . Path import java . nio . file . attribute . BasicFileAttributes import kotlin . contracts . ExperimentalContracts import kotlin . contracts . contract @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalPathApi :: class ) @ Throws ( IOException :: class ) @ kotlin . internal . InlineOnly public inline fun Path . inputStream ( vararg options : OpenOption ) : InputStream { contract { callsInPlace ( * options , InvocationKind . EXACTLY_ONCE ) } return Files . newInputStream ( this , * options ) } @ SinceKotlin ( "1.5" ) @ WasExperimental ( ExperimentalPathApi :: class ) @ Throws ( IOException :: class ) @ kot
class SirType
package org . jetbrains . kotlin . sir . providers . impl import org . jetbrains . kotlin . analysis . api . KtAnalysisSession import org . jetbrains . kotlin . analysis . api . symbols . * import org . jetbrains . kotlin . analysis . api . types . KtType import org . jetbrains . kotlin . sir . * import org . jetbrains . kotlin . sir . providers . * import org . jetbrains . kotlin . sir . providers . impl . * import org . jetbrains . kotlin . sir . providers . SirSession import org . jetbrains . kotlin . sir . providers . source . KotlinSource import org . jetbrains . kotlin . sir . providers . utils . withSirAnalyse import org . jetbrains . kotlin . sir . util . SirSwiftModule import org . jetbrains . kotlin . sir . util . SirSwiftModule . Module import org . jetbrains . kotlin . sir

import org . jetbrains . kotlin . fir . types . * import org . jetbrains . kotlin . fir . types . builder . buildErrorTypeRef import org . jetbrains . kotlin . fir . types . builder . buildResolvedTypeRef import org . jetbrains . kotlin . fir . types . impl . ConeClassLikeTypeImpl import org . jetbrains . kotlin . fir . types . impl . ConeTypeParameterTypeImpl import org . jetbrains . kotlin . fir . types . impl . FirImplicitTypeRefImplWithoutSource import org . jetbrains . kotlin . fir . types . impl . FirQualifierPartImpl import org . jetbrains . kotlin . fir . types . impl . FirTypeArgumentListImpl import org . jetbrains . kotlin . fir . types . impl . FirTypeRefWithNullability import org . jetbrains . kotlin . fir . types . impl . FirTypeRefWithNullabilityImpl import org . jetbrains . kotlin . fir . type
import org . jetbrains . kotlin . fir . types . * import org . jetbrains . kotlin . fir . types . builder . buildResolvedTypeRef import org . jetbrains . kotlin . fir . types . impl . ConeClassLikeTypeImpl import org . jetbrains . kotlin . fir . types . impl . ConeTypeParameterTypeImpl import org . jetbrains . kotlin . fir . types . impl . FirImplicitTypeRefImplWithoutSource import org . jetbrains . kotlin . fir . types . impl . FirImplicitTypeRefImplWithoutSource import org . jetbrains . kotlin . fir . types . impl . FirQualifierPartImpl import org . jetbrains . kotlin . fir . types . impl . FirTypeArgumentListImpl import org . jetbrains . kotlin . fir . types . impl . FirTypeRefWithNullability import org . jetbrains . kotlin . fir . types . impl . FirTypeRefWithNullabilityImpl import org . jetbrains . kotlin
import org . jetbrains . kotlin . fir . types . * import org . jetbrains . kotlin . fir . types . builder . buildResolvedTypeRef import org . jetbrains . kotlin . fir . types . impl . ConeClassLikeTypeImpl import org . jetbrains . kotlin . fir . types . impl . FirImplicitTypeRefImplWithoutSource import org . jetbrains . kotlin . fir . types . impl . FirImplicitTypeRefImplWithoutSource import org . jetbrains . kotlin . fir . types . impl . FirQualifierPartImpl import org . jetbrains . kotlin . fir . types . impl . FirTypeArgumentListImpl import org . jetbrains . kotlin . fir . types . impl . FirTypeRefWithNullability import org . jetbrains . kotlin . fir . types . impl . FirTypeRefWithNullabilityImpl import org . jetbrains . kotlin . fir . types . impl . FirUserTypeRefImpl import org . jetbrains . kotlin .
@ OptIn ( ExperimentalContracts :: class ) fun FirTypeAlias . isActual ( ) : Boolean { contract { returns ( true ) implies ( this @ isActual is FirTypeAlias ) } return isActual }

package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ SinceKotlin ( "1.1" ) fun f ( ) { } @ SinceKotlin ( "1.1" ) fun g ( ) { } @ SinceKotlin ( "1.1" ) fun h ( ) { } @ SinceKotlin ( "1.1" ) fun i ( ) { } @ SinceKotlin ( "1.1" ) fun j ( ) { } @ SinceKotlin ( "1.1" ) fun k ( ) { } @ SinceKotlin ( "1.1" ) fun l ( ) { }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

package org . jetbrains . kotlin . fir . analysis . js . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . checkers . declaration . FirBasicDeclarationChecker import org . jetbrains . kotlin . fir . analysis . diagnostics . js . FirJsErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isEffectivelyExternal <EOL
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo { companion object { open class Foo } }



import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . annotations . DataSchema import org . jetbrains . kotlinx . dataframe . api . add import org . jetbrains . kotlinx . dataframe . api . after import org . jetbrains . kotlinx . dataframe . api . asColumnGroup import org . jetbrains . kotlinx . dataframe . api . asDataColumn import org . jetbrains . kotlinx . dataframe . api . asDataFrame import org . jetbrains . kotlinx . dataframe . api . at import org . jetbrains . kotlinx . dataframe . api . by import org . jetbrains . kotlinx . dataframe . api . byName import org . jetbrains . kotlin






package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl .
package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl .
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . KtFakeSourceElementKind import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . annotations . DataSchema import org . jetbrains . kotlinx . dataframe . api . cast import org . jetbrains . kotlinx . dataframe . api . dataFrameOf import org . jetbrains . kotlinx . dataframe . api . dataFrameOf import org . jetbrains . kotlinx . dataframe . api . dataFrameOf import org . jetbrains . kotlinx . dataframe . api . dataFrameOf import org . jetbrains . kotlinx . dataframe . api . dataFrameOf import org . jetbrains . kotlinx . dataframe . api . dataFrameOf import org . jetbrains . kotlinx . dataframe . api . dataFrameOf import org . jetbrains . kotlinx . dataframe . api . dataFrameOf <EOL
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . annotations . DataSchema import org . jetbrains . kotlinx . dataframe . api . cast import org . jetbrains . kotlinx . dataframe . api . dataFrameOf import org . jetbrains . kotlinx . dataframe . api . dataFrameOf import org . jetbrains . kotlinx . dataframe . api . filter import org . jetbrains . kotlinx . dataframe . api . into import org . jetbrains . kotlinx . dataframe . api . intoColumns import org . jetbrains . kotlinx . dataframe . api . intoList import org . jetbrains . kotlinx . dataframe . api . intoRows import org . jetbrains . k
import kotlinx . coroutines . * import kotlinx . coroutines . flow . * import org . junit . * import org . junit . Test import java . util . concurrent . * import java . util . concurrent . atomic . * import kotlin . concurrent . * import kotlin . concurrent . atomic . * import kotlin . test . * class FlowConsumeTest : TestBase ( ) { @ Before fun setup ( ) { ignoreLostThreads ( "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , "" , ""
import kotlin . test . * val log = StringBuilder ( ) fun logged ( message : String , value : Int ) = value . also { log . append ( message ) } fun box ( ) : String { var sum = 0 for ( i in ( logged ( "" , 1 ) .. logged ( "" , 4 ) ) . reversed ( ) . reversed ( ) ) { sum = sum * 10 + i } assertEquals ( 0 , sum ) assertEquals ( "" , log . toString ( ) ) return "OK" }
fun testYield ( ) { val arg : UserKlass = UserKlass ( ) val buildee = build { yield ( id ( arg ) ) } checkExactType < Buildee < UserKlass > > ( buildee ) }
package kotlinx . coroutines . scheduling import kotlinx . coroutines . testing . * import kotlinx . coroutines . * import org . junit . * import org . junit . Test import java . util . concurrent . * import java . util . concurrent . atomic . * import kotlin . test . * class ReusableCancellableContinuationInvariantStressTest : TestBase ( ) { private val iterations = 0 * stressTestMultiplier private val testScheduler = TestCoroutineScheduler ( 1 ) private val mainDispatcher = StandardTestDispatcher ( testScheduler ) private val mainLooper = Shadows . shadowOf ( Looper . getMainLooper ( ) ) private val mainScheduler = Shadows . shadowOf ( Looper . getMainLooper ( ) . scheduler ) private val mainQueue = Shadows . shadowOf ( Looper . getMainLooper ( ) . queue ) private val mainBlock = Shadows . shadowOf ( Looper . getMain
import kotlin . reflect . full . * import kotlin . reflect . jvm . * import kotlin . test . * @ Target ( AnnotationTarget . CLASS ) @ Retention ( AnnotationRetention . RUNTIME ) annotation class A @ Target ( AnnotationTarget . CLASS ) @ Retention ( AnnotationRetention . RUNTIME ) annotation class B @ Target ( AnnotationTarget . CLASS ) @ Retention ( AnnotationRetention . RUNTIME ) annotation class C @ Target ( AnnotationTarget . CLASS ) @ Retention ( AnnotationRetention . RUNTIME ) annotation class D @ Target ( AnnotationTarget . CLASS ) @ Retention ( AnnotationRetention . RUNTIME ) annotation class E @ Target ( AnnotationTarget . CLASS ) @ Retention ( AnnotationRetention . RUNTIME ) annotation class F @ Target ( AnnotationTarget . CLASS ) @ Retention ( AnnotationRetention . RUNTIME ) annotation class G @ Target ( AnnotationTarget . CLASS ) <EOL
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . encoding . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . modules . * import kotlinx . serialization . test . * import kotlin . test . * @ Serializable data class Project ( val name : String , val language : String = "" ) object SerializerB : KSerializer < Project > { override val descriptor : SerialDescriptor = buildClassSerialDescriptor ( "" ) { element ( "name" , isOptional = true ) element ( "" , isOptional = true ) element ( "" , isOptional = true ) } override fun serialize ( encoder : Encoder , value : Project ) = encoder . encodeStructure ( descriptor ) { encodeStringElement ( descriptor , 0 , value . name ) encodeStringElement ( descriptor , 1 , value . language
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface IoNull external interface IoPipe external interface IoOptions < IoIn , IoOut , IoErr >
import org . jetbrains . kotlinx . dl . api . core . Sequential import org . jetbrains . kotlinx . dl . api . core . activation . Activations import org . jetbrains . kotlinx . dl . api . core . initializer . Constant import org . jetbrains . kotlinx . dl . api . core . initializer . HeNormal import org . jetbrains . kotlinx . dl . api . core . initializer . Zeros import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . Conv2D import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . core . Dense import org . jetbrains . kotlinx . dl . api . core . layer . core . Input import org . jetbrains . kotlinx . dl . api . core
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlinx . dl . api . core . Sequential import org . jetbrains . kotlinx . dl . api . core . activation . Activations import org . jetbrains . kotlinx . dl . api . core . initializer . Constant import org . jetbrains . kotlinx . dl . api . core . initializer . HeNormal import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . Conv2D import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . core . Dense import org . jetbrains . kotlinx . dl . api . core . layer . core . Input import org . jetbrains . kotlinx . dl . api . core . layer . pooling . AvgPool2D import org . jetbrains . kotlinx . dl
import org . jetbrains . kotlinx . dl . api . core . Sequential import org . jetbrains . kotlinx . dl . api . core . activation . Activations import org . jetbrains . kotlinx . dl . api . core . initializer . Constant import org . jetbrains . kotlinx . dl . api . core . initializer . HeNormal import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . Conv2D import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . core . Dense import org . jetbrains . kotlinx . dl . api . core . layer . core . Input import org . jetbrains . kotlinx . dl . api . core . layer . pooling . AvgPool2D import org . jetbrains . kotlinx . dl
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . containingClassLookupTag import org . jetbrains . kotlin . fir . declarations . * import org . jetbrains . kotlin . fir . declarations . utils . isInline import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir . declarations . util
@ JvmName ( "" ) internal fun close ( ) { session . isAdmin ( ) } }
@ JvmName ( "" ) internal fun close ( ) { session . isAdmin ( ) } }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit }


import kotlin . test . * fun box ( ) : String { assertEquals ( 0 , Result . success ( 0 ) . getOrNull ( ) ) assertEquals ( 0 , Result . success ( 0 ) . getOrNull ( ) ) assertEquals ( 0 , Result . success ( 0 ) . getOrNull ( ) ) assertEquals ( 0 , Result . success ( 0 ) . getOrNull ( ) ) assertEquals ( 0 , Result . success ( 0 ) . getOrNull ( ) ) assertEquals ( 0 , Result . success ( 0 ) . getOrNull ( ) ) assertEquals ( 0 , Result . success ( 0 ) . getOrNull ( ) ) return "OK" }
import org . jetbrains . kotlinx . dl . api . core . Sequential import org . jetbrains . kotlinx . dl . api . core . activation . Activations import org . jetbrains . kotlinx . dl . api . core . initializer . Constant import org . jetbrains . kotlinx . dl . api . core . initializer . HeNormal import org . jetbrains . kotlinx . dl . api . core . initializer . Zeros import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . Conv2D import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . core . Dense import org . jetbrains . kotlinx . dl . api . core . layer . core . Input import org . jetbrains . kotlinx . dl . api . core
import kotlin . reflect . KClass import kotlin . reflect . KType import kotlin . reflect . KTypeProjection import kotlin . reflect . KVariance import kotlin . reflect . KVisibility import kotlin . reflect . KVisibility . * import kotlin . reflect . typeOf import kotlin . test . assertEquals import kotlin . test . assertTrue import kotlin . test . assertFalse import kotlin . test . assertNotEquals import kotlin . test . assertNotEquals import kotlin . test . assertNotEquals import kotlin . test . assertTrue import kotlin . test . assertTrue import kotlin . test . assertTrue import kotlin . test . assertFalse import kotlin . test . assertFalse import kotlin . test . assertFails import kotlin . test . assertFailsWith import kotlin . test . assertFailsWith import kotlin . test
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirClass import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInner import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir .
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirClass import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInner import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir .
import kotlin . reflect . KClass import kotlin . reflect . KType import kotlin . reflect . KTypeProjection import kotlin . reflect . KVariance import kotlin . reflect . full . createType import kotlin . reflect . full . starProjectedType import kotlin . test . assertEquals import kotlin . test . assertNotEquals import kotlin . test . assertTrue annotation class A annotation class B annotation class C annotation class D annotation class E @ Target ( AnnotationTarget . TYPE ) annotation class F @ Target ( AnnotationTarget . TYPE_PARAMETER ) annotation class G @ Target ( AnnotationTarget . TYPE_PARAMETER ) annotation class H @ Target ( AnnotationTarget . TYPE_PARAMETER ) annotation class I @ Target ( AnnotationTarget . TYPE_PARAMETER ) annotation class J @ Target ( AnnotationTarget . TYPE_PARAMETER ) annotation class K
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirClass import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInner import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir .
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) return "OK" }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInline import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir
import kotlin . reflect . KClass import kotlin . reflect . KType import kotlin . reflect . KTypeProjection import kotlin . reflect . KVariance import kotlin . reflect . KVisibility import kotlin . reflect . KVisibility . * import kotlin . reflect . full . * import kotlin . reflect . jvm . internal . * import kotlin . reflect . jvm . internal . calls . * import kotlin . reflect . jvm . internal . calls . Caller import kotlin . reflect . jvm . internal . calls . createCaller import kotlin . reflect . jvm . internal . calls . toJvmDescriptor import kotlin . reflect . jvm . internal . calls . toKCaller import kotlin . reflect . jvm . internal . calls . toKCallerImpl import kotlin . reflect . jvm . internal . calls . toKFunction import kotlin . reflect . jvm . internal . calls . toKFunctionImpl import
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirClass import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInner import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlinx . dl . api . core . Sequential import org . jetbrains . kotlinx . dl . api . core . activation . Activations import org . jetbrains . kotlinx . dl . api . core . initializer . Constant import org . jetbrains . kotlinx . dl . api . core . initializer . HeNormal import org . jetbrains . kotlinx . dl . api . core . initializer . Zeros import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . Conv2D import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . core . Dense import org . jetbrains . kotlinx . dl . api . core . layer . core . Input import org . jetbrains . kotlinx . dl . api . core
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirClass import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInner import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir .
import kotlin . reflect . KClass import kotlin . reflect . KType import kotlin . reflect . KTypeProjection import kotlin . reflect . KVariance import kotlin . reflect . full . createType import kotlin . reflect . full . starProjectedType import kotlin . reflect . full . withNullability import kotlin . reflect . jvm . internal . KTypeImpl import kotlin . reflect . jvm . internal . KotlinReflectionInternalError import kotlin . reflect . jvm . internal . asKCallableImpl import kotlin . reflect . jvm . internal . asKPropertyImpl import kotlin . reflect . jvm . internal . asKProperty0Impl import kotlin . reflect . jvm . internal . asKProperty1Impl import kotlin . reflect . jvm . internal . asKTypeImpl import kotlin . reflect . jvm . internal . asKTypeProjectionImpl import kotlin . reflect . typeOf import kotlin . reflect
import org . jetbrains . kotlinx . dl . api . core . Sequential import org . jetbrains . kotlinx . dl . api . core . activation . Activations import org . jetbrains . kotlinx . dl . api . core . initializer . Constant import org . jetbrains . kotlinx . dl . api . core . initializer . HeNormal import org . jetbrains . kotlinx . dl . api . core . initializer . Zeros import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . Conv2D import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . core . Dense import org . jetbrains . kotlinx . dl . api . core . layer . core . Input import org . jetbrains . kotlinx . dl . api . core
import kotlin . reflect . KClass import kotlin . reflect . KType import kotlin . reflect . KTypeProjection import kotlin . reflect . KVariance import kotlin . test . assertEquals import kotlin . test . assertNotEquals import kotlin . test . assertTrue import kotlin . test . assertNull import kotlin . test . assertNotNull import kotlin . test . assertSame import kotlin . test . assertTrue import kotlin . test . fail annotation class A annotation class B annotation class C annotation class D annotation class E annotation class F annotation class G annotation class H annotation class I annotation class J annotation class K annotation class L annotation class M annotation class N annotation class O annotation class P @ A @ B @ C @ D @ E @ F @ G @ H @ I @ J
package org . jetbrains . kotlinx . dl . api . core . layer . convolutional import org . jetbrains . kotlinx . dl . api . core . layer . Layer import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . requireArraySize import org . jetbrains . kotlinx . dl . api . core . util . toLongList import org . tensorflow . Operand import org . tensorflow . Shape import org . tensorflow . op . Ops public class Conv2D ( public override val filters : Int = 3 , public override val kernelSize : IntArray = intArrayOf ( 3 , 3 ) , public override val strides : IntArray = intArrayOf ( 1 , 1 , 1 , 1 ) , public override val dilations : IntArray = intArrayOf ( 1 , 1 , 1 , 1 ) , public override val activation
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
package org . jetbrains . kotlinx . dl . api . core . layer . convolutional import org . jetbrains . kotlinx . dl . api . core . layer . Layer import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding . VALID import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding . SAME import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding . FULL import org . jetbrains . kotlinx . dl . api . core . layer . requireArraySize import org . jetbrains . kotlinx . dl . api . core . util . toLongList import org . tensorflow . Operand import org . tensorflow . Shape import org . tensorflow . op . Ops public class Conv2D ( public override val filters : Int = 3 , public override val kernelSize : Int
import kotlin . reflect . KClass import kotlin . reflect . KType import kotlin . reflect . KTypeProjection import kotlin . reflect . KVariance import kotlin . reflect . KVisibility import kotlin . reflect . KVisibility . * import kotlin . reflect . full . * import kotlin . reflect . jvm . internal . * import kotlin . reflect . jvm . internal . calls . * import kotlin . reflect . jvm . internal . calls . CallerImpl import kotlin . reflect . jvm . internal . calls . createCaller import kotlin . reflect . jvm . internal . calls . toJvmDescriptor import kotlin . reflect . jvm . internal . calls . toKCaller import kotlin . reflect . jvm . internal . calls . toKCallerImpl import kotlin . reflect . jvm . internal . calls . toKFunction import kotlin . reflect . jvm . internal . calls . toKFunctionImpl <EOL

package org . jetbrains . kotlinx . dl . api . core . initializer import org . jetbrains . kotlinx . dl . api . core . shape . shapeOperand import org . junit . jupiter . api . Assertions . assertArrayEquals import org . junit . jupiter . api . Assertions . assertEquals import org . junit . jupiter . api . Test import org . tensorflow . EagerSession import org . tensorflow . Shape import org . tensorflow . op . Ops private const val EPS = 0 private const val FAN_IN = 2 private const val FAN_OUT = 4 private const val SEED = 0 private const val DEFAULT_LAYER_NAME = "" internal class RandomNormalTest { @ Test fun initialize ( ) { val actual = Array ( 2 ) { FloatArray ( 2 ) { 0 } } val expected = Array ( 2 ) { FloatArray ( 2 ) {
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlinx . dl . api . core . Sequential import org . jetbrains . kotlinx . dl . api . core . activation . Activations import org . jetbrains . kotlinx . dl . api . core . initializer . Constant import org . jetbrains . kotlinx . dl . api . core . initializer . HeNormal import org . jetbrains . kotlinx . dl . api . core . initializer . Zeros import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . Conv2D import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . core . Dense import org . jetbrains . kotlinx . dl . api . core . layer . core . Input import org . jetbrains . kotlinx . dl . api . core
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import helpers . * fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } suspend fun calculate ( ) = "OK" fun box ( ) : String { builder { calculate ( ) } return "OK" }
import org . tensorflow . Operand import org . tensorflow . Shape import org . tensorflow . op . Ops private const val EPS = 0 private const val FAN_IN = 2 private const val FAN_OUT = 4 private const val SEED = 0 private const val DEFAULT_LAYER_NAME = "" internal class LeCunUniformTest { @ Test fun initialize ( ) { val actual = Array ( 2 ) { FloatArray ( 2 ) { 0 } } val expected = Array ( 2 ) { FloatArray ( 2 ) { 0 } } expected [ 0 ] [ 0 ] = 0 expected [ 0 ] [ 1 ] = 0 expected [ 1 ] [ 0 ] = 0 expected [ 1 ] [ 1 ] = 0 val shape = Shape . make ( 2 , 2 ) EagerSession . create ( ) . use { session -> val tf = Ops . create ( session ) val
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any var boo : String var show : ( overrideChecks : Boolean ) -> Unit @ nativeGetter operator fun get ( s : String ) : Any ? <EOL
import kotlin . reflect . KClass import kotlin . reflect . KType import kotlin . reflect . KTypeParameter import kotlin . reflect . KType import kotlin . reflect . KTypeParameter import kotlin . reflect . KTypeProjection import kotlin . reflect . full . createType import kotlin . reflect . full . isSubtypeOf import kotlin . reflect . full . starProjectedType import kotlin . reflect . full . withNullability import kotlin . reflect . jvm . internal . KTypeImpl import kotlin . reflect . jvm . internal . asKTypeProjection import kotlin . reflect . jvm . internal . asTypeProjection import kotlin . reflect . jvm . internal . asTypeProjectionWithVariance import kotlin . reflect . jvm . internal . asTypeProjectionWithDirection import kotlin . reflect . jvm . internal . asTypeProjectionWithType import kotlin . reflect . jvm . internal . a
package org . jetbrains . kotlin . gradle . plugin import org . gradle . api . Project import org . gradle . api . artifacts . Configuration import org . gradle . api . attributes . Category import org . gradle . api . attributes . Usage import org . gradle . api . provider . Provider import org . jetbrains . kotlin . gradle . dsl . KotlinCommonOptions import org . jetbrains . kotlin . gradle . dsl . KotlinCommonCompilerOptions import org . jetbrains . kotlin . gradle . dsl . KotlinCommonCompilerOptionsHelper import org . jetbrains . kotlin . gradle . plugin . KotlinCompilerArgumentsProducer . ContributeCompilerArgumentsContext import org . jetbrains . kotlin . gradle . plugin . KotlinCompilerArgumentsProducer . CreateCompilerArgumentsContext import org . jetbrains . kotlin . gradle . plugin . KotlinCompilerArgumentsProducer . CreateCompilerArgumentsContext . Companion . create






package kotlinx . coroutines import kotlinx . coroutines . testing . * import kotlinx . coroutines . * import org . junit . * import org . junit . Test import org . junit . runner . * import org . junit . runners . * import java . util . concurrent . * import kotlin . test . * @ RunWith ( Parameterized :: class ) class FailingCoroutinesMachineryTest ( private val element : CoroutineContext . Element ) : TestBase ( ) { companion object { @ Parameterized . Parameters ( name = "" ) @ JvmStatic fun params ( ) : Collection < Array < Any > > = listOf ( arrayOf < Any > ( "" ) , arrayOf < Any > ( "" ) , arrayOf < Any > ( "" ) , arrayOf < Any > ( "" ) , arrayOf < Any > ( "" ) , arrayOf < Any > ( "" ) , arrayOf < Any > ( ""
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *


import org . jetbrains . dokka . base . testApi . testRunner . BaseAbstractTest import org . jetbrains . dokka . links . DRI import org . jetbrains . dokka . model . AncestryNode import org . jetbrains . dokka . model . TypeConstructor import org . jetbrains . dokka . model . TypeParameter import kotlin . test . Test import kotlin . test . assertEquals import kotlin . test . assertTrue class AncestryNodeTest : BaseAbstractTest ( ) { private val configuration = dokkaConfiguration { sourceSets { sourceSet { sourceRoots = listOf ( "src/" ) classpath += jvmStdlibPath ! ! } } } @ Test fun `class filtered by more specific ancestry` ( ) { val model = dokkaConfiguration { sourceSets { sourceSet { sourceRoots = listOf ( "src/" ) classpath += jvm
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface Interface { fun ping ( ) : String } external open class Class { open fun ping ( ) : String }

import kotlinx . cinterop . * import kotlinx . cinterop . internal . * import kotlinx . cinterop . descriptors . * import kotlinx . cinterop . internal . * import kotlinx . cinterop . indexer . * import kotlinx . cinterop . internal . * import kotlinx . cinterop . indexer . * import kotlinx . cinterop . internal . * import kotlinx . cinterop . indexer . * import kotlinx . cinterop . indexer . impl . * import kotlinx . cinterop . indexer . impl . * import kotlinx . cinterop . indexer . impl . * import kotlinx . cinterop . indexer . impl . * import kotlinx . cinterop . indexer . impl . * import kotlinx . cinterop . indexer . impl . * import kotlinx . cinterop . index
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInline import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var num : Number external var bool : Boolean external var str : String
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . gradle . api . * import org . gradle . api . artifacts . * import org . gradle . api . attributes . * import org . gradle . api . file . * import org . gradle . api . model . * import org . gradle . api . provider . * import org . gradle . api . tasks . * import org . gradle . work . DisableCachingByDefault import org . jetbrains . kotlin . gradle . plugin . * import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_NATIVE_USE_XCODE_MESSAGE_STYLE import org . jetbrains . kotlin . gradle . plugin . cocoapods . KotlinCocoapodsPlugin import org . jetbrains . kotlin . gradle . plugin . cocoapods . KotlinCocoapodsPlugin . Companion . POD_BUILD_TASK_NAME import org . jetbrains . kotlin . gradle .

package org . jetbrains . kotlin . gradle . plugin import org . gradle . api . Project import org . jetbrains . kotlin . gradle . dsl . KotlinCommonOptions import org . jetbrains . kotlin . gradle . dsl . KotlinCommonCompilerOptions import org . jetbrains . kotlin . gradle . dsl . KotlinCommonCompilerOptionsHelper import org . jetbrains . kotlin . gradle . plugin . KotlinCompilerArgumentsProducer . ContributeCompilerArgumentsContext import org . jetbrains . kotlin . gradle . plugin . KotlinCompilerArgumentsProducer . CreateCompilerArgumentsContext import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_NATIVE_USE_XCODE_MESSAGE_STYLE import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any } external open class Foo { open fun bar ( a : Any ) : Number open var baz : Any }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *


package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . KtFakeSourceElementKind import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kot
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo { open fun bar ( ) : Number companion object { var variable : String } }


package org . jetbrains . kotlinx . dataframe . impl . columns import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . api . asColumnGroup import org . jetbrains . kotlinx . dataframe . api . asDataColumn import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . FrameColumn import org . jetbrain
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import k
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf
package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . AnyColumnReference import org . jetbrains . kotlinx . dataframe . ColumnsSelector import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Ind
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf
import org . jetbrains . kotlinx . spark . api . * import org . jetbrains . kotlinx . spark . api . tuples . * import scala . Tuple2 import scala . Tuple3 import scala . Tuple4 import scala . Tuple5 import scala . Tuple6 import scala . Tuple7 import scala . Tuple8 import scala . Tuple9 import scala . Tuple10 import scala . Tuple11 import scala . Tuple12 import scala . Tuple13 import scala . Tuple14 import scala . Tuple15 import scala . Tuple16 import scala . Tuple17 import scala . Tuple18 import scala . Tuple19 import scala . Tuple20 import scala . Tuple21 import scala . Tuple22 import scala . Tuple23 import scala . Tuple24 import scala . Tuple25
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . dataFrameOf import org . jetbrains . kotlinx . dataframe . api . group import org . jetbrains . kotlinx . dataframe . api . into import org . jetbrains . kotlinx . dataframe . api . intoColumns import org . jetbrains . kotlinx . dataframe . api . intoList import org . jetbrains . kotlinx . dataframe . api . intoRows import org . jetbrains . kotlinx . dataframe . api . inward import org . jetbrains . kotlinx . dataframe . api . intoRows import org . jetbrains . kotlinx . dataframe . api . intoSingleColumn import org . jet
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . dataFrameOf import org . jetbrains . kotlinx . dataframe . api . group import org . jetbrains . kotlinx . dataframe . api . into import org . jetbrains . kotlinx . dataframe . api . intoColumns import org . jetbrains . kotlinx . dataframe . api . intoList import org . jetbrains . kotlinx . dataframe . api . intoRows import org . jetbrains . kotlinx . dataframe . api . inward import org . jetbrains . kotlinx . dataframe . api . intoRows import org . jetbrains . kotlinx . dataframe . api . intoSingleColumn import org . jet
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import kot
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlinx . dataframe . AnyCol import org . jetbrains . kotlinx . dataframe . ColumnsSelector import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . AnyColumnGroupAccessor import org . jetbrains . kotlinx . dataframe . ColumnAccessor import org . jetbrains . kotlinx . dataframe . ColumnsSelector import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx .
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbr
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import kot
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import kot
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . dataFrameOf import org . jetbrains . kotlinx . dataframe . api . group import org . jetbrains . kotlinx . dataframe . api . into import org . jetbrains . kotlinx . dataframe . api . intoColumns import org . jetbrains . kotlinx . dataframe . api . intoList import org . jetbrains . kotlinx . dataframe . api . intoRows import org . jetbrains . kotlinx . dataframe . api . inward import org . jetbrains . kotlinx . dataframe . api . intoRows import org . jetbrains . kotlinx . dataframe . api . intoSingleColumn import org . jet
import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbr
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl .
package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . AnyColumnReference import org . jetbrains . kotlinx . dataframe . ColumnsSelector import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx
package org . jetbrains . kotlinx . dataframe . api import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . DataRow import org . jetbrains . kotlinx . dataframe . columns . ColumnAccessor import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . ColumnsSelectionDsl import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains .
import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnAccessor import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kotlinx . dataframe . impl . columns . TransformableColumnSet import kotlin . reflect .
import org . jetbrains . kotlinx . dataframe . * import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . columns . ColumnAccessor import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbr
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . dataFrameOf import org . jetbrains . kotlinx . dataframe . api . group import org . jetbrains . kotlinx . dataframe . api . into import org . jetbrains . kotlinx . dataframe . api . intoColumns import org . jetbrains . kotlinx . dataframe . api . intoList import org . jetbrains . kotlinx . dataframe . api . intoRows import org . jetbrains . kotlinx . dataframe . api . inward import org . jetbrains . kotlinx . dataframe . api . intoRows import org . jetbrains . kotlinx . dataframe . api . intoSingleColumn import org . jet
import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOfNulls import org . jetbrains . kotlinx . dataframe . api
import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbr
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }

import kotlinx . cinterop . * import kotlinx . cinterop . internal . * import kotlin . test . * import objcTests . * import kotlin . native . concurrent . * import kotlin . native . internal . * import kotlin . test . assertEquals import kotlin . test . assertFalse import kotlin . test . assertTrue import kotlin . test . assertNull import kotlin . test . assertSame import kotlin . test . assertSame import kotlin . test . assertSame import kotlin . test . assertTrue import kotlin . test . assertFalse import kotlin . test . assertNull import kotlin . test . assertSame import kotlin . test . assertTrue import kotlin . test . assertFalse import kotlin . test . assertNull import kotlin . test . assertSame import kotlin . test . assertTrue import kotlin . test . assert

import helpers . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * class Controller { suspend fun suspendHere ( v : String ) : String = suspendCoroutineUninterceptedOrReturn { x -> x . resume ( v ) COROUTINE_SUSPENDED } } fun builder ( c : suspend Controller . ( ) -> Unit ) { c . startCoroutine ( Controller ( ) , EmptyContinuation ) } fun box ( ) : String { var res = "" builder { res = suspendHere ( "OK" ) } return res }
package org . jetbrains . kotlin . konan . test . blackbox . support . runner import org . jetbrains . kotlin . konan . test . blackbox . AbstractNativeSimpleTest import org . jetbrains . kotlin . konan . test . blackbox . support . * import org . jetbrains . kotlin . konan . test . blackbox . support . TestCase . NoTestRunnerExtras import org . jetbrains . kotlin . konan . test . blackbox . support . compilation . TestCompilationArtifact . Executable import org . jetbrains . kotlin . konan . test . blackbox . support . compilation . TestCompilationFactory import org . jetbrains . kotlin . konan . test . blackbox . support . compilation . TestCompilationResult . Companion . assertSuccess import org . jetbrains . kotlin . konan . test . blackbox . support . group . TestCaseGroupProvider import org . jetbrains . kotlin . konan . test . blackbox
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Artifact
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
package org . jetbrains . kotlin . gradle . idea . proto . tcs import org . jetbrains . kotlin . gradle . idea . proto . Extras import org . jetbrains . kotlin . gradle . idea . proto . IdeaExtrasProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . ideaKotlinSourceDependencyProto import org . jetbrains . kotlin . gradle . idea . tcs . IdeaKotlinSourceDependency import org . jetbrains . kotlin . gradle . idea . testFixtures . tcs . TestIdeaKotlinInstances import org . jetbrains . kotlin . gradle . idea . testFixtures . tcs . TestIdeaKotlinInstances . simpleProject import org . jetbrains . kotlin . gradle . idea . testFixtures .
fun Project . allInteropLibrariesFrom ( ) { kotlin { linuxX64 ( ) mingwX64 ( ) applyDefaultHierarchyTemplate ( ) } }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface Element external interface TextElement : Element
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
import org . jetbrains . dokka . base . testApi . testRunner . BaseAbstractTest import org . jetbrains . dokka . links . DRI import org . jetbrains . dokka . model . Documentable import org . jetbrains . dokka . model . InheritedMember import org . jetbrains . dokka . model . properties . WithExtraProperties import kotlin . test . Test import kotlin . test . assertEquals class SuperclassesWithKindTest : BaseAbstractTest ( ) { private val configuration = dokkaConfiguration { sourceSets { sourceSet { sourceRoots = listOf ( "src/" ) classpath += jvmStdlibPath ! ! } } } @ Test fun `java inheriting java` ( ) { testInline ( """""" . trimIndent ( ) , configuration ) { documentablesMergingStage = { module -> val inheritorProperties = module . packages . single ( ) . classlikes .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * val sb = StringBuilder ( ) open class EmptyContinuation ( override val context : CoroutineContext = EmptyCoroutineContext ) : Continuation < Any ? > { companion object : EmptyContinuation ( ) override fun resumeWith ( result : Result < Any ? > ) { result . getOrThrow ( ) } } suspend fun s1 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resume ( 42 ) COROUTINE_SUSPENDED } suspend fun s2 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resumeWithException ( Error ( ) ) COROUTINE_SUSPENDED } fun f1 ( ) : Int { sb . appendLine ( "" ) return 0
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * val sb = StringBuilder ( ) open class EmptyContinuation ( override val context : CoroutineContext = EmptyCoroutineContext ) : Continuation < Any ? > { companion object : EmptyContinuation ( ) override fun resumeWith ( result : Result < Any ? > ) { result . getOrThrow ( ) } } suspend fun s1 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resume ( 42 ) COROUTINE_SUSPENDED } suspend fun s2 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resumeWithException ( Error ( ) ) COROUTINE_SUSPENDED } fun f1 ( ) : Int { sb . appendLine ( "" ) return 0
import kotlin . test . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * val sb = StringBuilder ( ) open class EmptyContinuation ( override val context : CoroutineContext = EmptyCoroutineContext ) : Continuation < Any ? > { companion object : EmptyContinuation ( ) override fun resumeWith ( result : Result < Any ? > ) { result . getOrThrow ( ) } } suspend fun s1 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resume ( 42 ) COROUTINE_SUSPENDED } suspend fun s2 ( ) : Int = suspendCoroutineUninterceptedOrReturn { x -> sb . appendLine ( "" ) x . resumeWithException ( Error ( ) ) COROUTINE_SUSPENDED } fun f1 ( ) : Int { sb . appendLine ( "" ) return 0
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface AssertionErrorWithCause { var message : String ? get ( ) = definedExternally set ( value ) = definedExternally var cause : Throwable ? get ( ) = definedExternally set ( value ) = definedExternally }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlin . ir . builders . * import org . jetbrains . kotlin . ir . declarations . * import org . jetbrains . kotlin . ir . expressions . * import org . jetbrains . kotlin . ir . expressions . impl . IrCallImpl import org . jetbrains . kotlin . ir . expressions . impl . IrConstImpl import org . jetbrains . kotlin . ir . expressions . impl . IrConstKind import org . jetbrains . kotlin . ir . expressions . impl . IrConstKind . Null import org . jetbrains . kotlin . ir . expressions . impl . IrConstKind . String import org . jetbrains . kotlin . ir . expressions . impl . IrConstKind . NullableString import org . jetbrains . kotlin . ir . expressions . impl . IrConstKind . NonNullString import org . jetbrains . kotlin . ir . expressions . impl . IrConstKind . NullableString import org . jetbrains . kotlin
import org . jetbrains . kotlin . ir . builders . * import org . jetbrains . kotlin . ir . declarations . * import org . jetbrains . kotlin . ir . expressions . * import org . jetbrains . kotlin . ir . expressions . impl . IrCallImpl import org . jetbrains . kotlin . ir . expressions . impl . IrConstImpl import org . jetbrains . kotlin . ir . expressions . impl . IrConstKind import org . jetbrains . kotlin . ir . expressions . impl . IrConstKind . * import org . jetbrains . kotlin . ir . symbols . IrClassSymbol import org . jetbrains . kotlin . ir . symbols . IrClassifierSymbol import org . jetbrains . kotlin . ir . symbols . IrScriptSymbol import org . jetbrains . kotlin . ir . symbols . IrTypeParameterSymbol import org . jetbrains . kotlin . ir . types . * import org . jetbrains . k
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
package org . jetbrains . kotlinx . dataframe . impl . columns import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . k
import kotlinx . cinterop . * import kotlin . test . * import objcTests . * @ Test fun test ( ) { kotlin . native . internal . GC . collect ( ) kotlin . native . internal . GC . collect ( ) }
import kotlin . experimental . ExperimentalTypeInference @ OptIn ( ExperimentalTypeInference :: class ) fun < R > build ( block : TestInterface < R > . ( ) -> Unit ) : R = TODO ( ) class Inv < K > interface TestInterface < R > { fun emit ( r : R ) fun get ( ) : R fun getInv ( ) : Inv < R > } fun < U > id ( x : U ) = x fun < E > select ( vararg x : E ) = x [ 0 ] fun test ( ) { val ret = build { emit ( "" ) < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( get ( ) , getInv ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( getInv ( ) , get ( ) ) < ! > < ! DEBUG_INFO_EXPRESSION_TYPE ( "" ) ! > select ( getInv ( ) , getInv ( ) )
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . checkers . declaration . FirBasicDeclarationChecker import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInline import org . jetbrain
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . checkers . declaration . FirBasicDeclarationChecker import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . containingClassLookupTag import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kot
import com . intellij . openapi . util . Ref import com . intellij . openapi . util . TextRange import com . intellij . psi . * import com . intellij . psi . tree . TokenSet import com . intellij . psi . util . PsiTreeUtil import org . jetbrains . kotlin . KtNodeTypes import org . jetbrains . kotlin . lexer . KtModifierKeywordToken import org . jetbrains . kotlin . lexer . KtTokens import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . MODALITY_MODIFIERS import org . jetbrains . kotlin . lexer . KtTokens . VISIBILITY_MODIFIERS import org . jetbrains . kot
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirClass import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInner import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir .
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbr

package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirRegularClassSymbol import org . jetbrains . kot

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *

import kotlin . test . * fun box ( ) : String { assertFalse ( isEmpty ( ) ) return "OK" } fun isEmpty ( ) : Boolean { throw UnsupportedOperationException ( ) }

package org . jetbrains . kotlin . metadata . jvm . deserialization import org . jetbrains . kotlin . metadata . ProtoBuf import org . jetbrains . kotlin . metadata . deserialization . BinaryVersion import org . jetbrains . kotlin . metadata . jvm . JvmProtoBuf import org . jetbrains . kotlin . metadata . jvm . JvmProtoBuf . StringTableTypes . Record import org . jetbrains . kotlin . metadata . jvm . JvmProtoBuf . StringTableTypes . Record . Operation . * import org . jetbrains . kotlin . metadata . jvm . deserialization . JvmNameResolver import org . jetbrains . kotlin . metadata . jvm . deserialization . JvmNameResolverBase import org . jetbrains . kotlin . name . ClassId import org . jetbrains . kotlin . name . FqName import org . jetbrains . kotlin . name . Name import org
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
package org . jetbrains . kotlin . load . kotlin import org . jetbrains . kotlin . descriptors . ModuleDescriptor import org . jetbrains . kotlin . descriptors . NotFoundClasses import org . jetbrains . kotlin . descriptors . deserialization . AdditionalClassPartsProvider import org . jetbrains . kotlin . descriptors . deserialization . PlatformDependentDeclarationFilter import org . jetbrains . kotlin . incremental . components . LookupTracker import org . jetbrains . kotlin . metadata . ProtoBuf import org . jetbrains . kotlin . metadata . deserialization . BinaryVersion import org . jetbrains . kotlin . metadata . deserialization . NameResolverImpl import org . jetbrains . kotlin . metadata . deserialization . TypeTable import org . jetbrains . kotlin . metadata . deserialization . VersionRequirementTable import org . jetbrains . kotlin . name . ClassId import org . jetbr
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirClass import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . isInner import org . jetbrains . kotlin . fir . declarations . utils . isLocal import org . jetbrains . kotlin . fir .
import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var foo : String
@ file : JsQualifier ( "" ) @ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) package fs . chmod import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external fun __promisify__ ( path : String , mode : String ) : Promise < Unit > external fun __promisify__ ( path : String , mode : Number ) : Promise < Unit >






import kotlin . test . * import kotlin . concurrent . * import kotlin . native . concurrent . * import kotlin . native . internal . * import kotlin . native . internal . test . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion .
package org . jetbrains . kotlinx . dl . impl . preprocessing . image import org . jetbrains . kotlinx . dl . api . core . shape . TensorShape import org . jetbrains . kotlinx . dl . api . preprocessing . Operation import org . jetbrains . kotlinx . dl . api . preprocessing . pipeline import org . jetbrains . kotlinx . dl . impl . preprocessing . image . ColorMode import org . jetbrains . kotlinx . dl . impl . preprocessing . image . convert import org . jetbrains . kotlinx . dl . impl . preprocessing . image . toFloatArray import org . jetbrains . kotlinx . dl . impl . preprocessing . rescale import org . jetbrains . kotlinx . dl . impl . summary . logSummary import java . awt . image . BufferedImage import java . io . ByteArrayInputStream import java . io . ByteArrayOutputStream import

import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . hours import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds
package kotlinx . coroutines . scheduling import kotlinx . coroutines . testing . * import kotlinx . coroutines . * import kotlinx . coroutines . internal . * import org . junit . * import org . junit . Test import java . util . concurrent . * import java . util . concurrent . atomic . * import java . util . concurrent . locks . * import kotlin . concurrent . * import kotlin . concurrent . locks . * import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import kotlin . jvm . internal . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds import kotlin . time . Duration . Companion . minutes import kotlin . time . Duration . Companion . nanoseconds import kotlin . time . Duration . Companion . seconds import kot
package kotlinx . coroutines . scheduling import kotlinx . coroutines . testing . * import kotlinx . coroutines . * import kotlinx . coroutines . internal . * import kotlinx . coroutines . selects . * import org . junit . * import org . junit . Test import java . util . concurrent . * import java . util . concurrent . atomic . * import java . util . concurrent . locks . * import kotlin . concurrent . * import kotlin . concurrent . locks . * import kotlin . test . * class ReusableCancellableContinuationInvariantStressTest : TestBase ( ) { private val iterations = 0 * stressTestMultiplierSqrt @ Test fun testReusableCancellableContinuationInvariant ( ) = runTest { repeat ( iterations ) { val latch = CountDownLatch ( 1 ) val job = launch ( Dispatchers . Unconfined ) { <EOL
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import helpers . * class Controller { suspend fun suspendHere ( v : String ) : Unit = suspendCoroutineUninterceptedOrReturn { x -> x . resume ( v ) COROUTINE_SUSPENDED } } fun builder ( c : suspend Controller . ( ) -> Unit ) { c . startCoroutine ( Controller ( ) , EmptyContinuation ) } fun box ( ) : String { var result = "" builder { result = suspendHere ( "OK" ) } return result }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
import kotlin . test . * fun box ( ) : String { val intList = mutableListOf < Int > ( ) val intProgression = 1 ..< 8 for ( i in intProgression step 2 step 3 ) { intList += i } assertEquals ( listOf ( 1 ) , intList ) val longList = mutableListOf < Long > ( ) val longProgression = 1L ..< 0 for ( i in longProgression step 0 step 3L ) { longList += i } assertEquals ( listOf ( 1L ) , longList ) val charList = mutableListOf < Char > ( ) val charProgression = 'a' ..< '' for ( i in charProgression step 2 step 3 ) { charList += i } assertEquals ( listOf ( 'a' ) , charList ) return "OK" }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }


package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kotlin . fir . declarations . utils . isExpect import org . jetbr




import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . api . asColumnGroup import org . jetbrains . kotlinx . dataframe . api . asDataColumn import org . jetbrains . kotlinx . dataframe . api . at import org . jetbrains . kotlinx . dataframe . api . by import org . jetbrains . kotlinx . dataframe . api . byName import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . byValue import org . jetbrains . kotlinx . dataframe . api . column import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kotlinx . dataframe . api . columnOf import org . jetbrains . kot
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . api . column . ColumnGroup import org . jetbrains . kotlinx . dataframe . api . column . ColumnPath import org . jetbrains . kotlinx . dataframe . api . column . ColumnSet import org . jetbrains . kotlinx . dataframe . api . column . SingleColumn import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import
import org . jetbrains . kotlinx . dataframe . api . * import org . jetbrains . kotlinx . dataframe . api . column . ColumnGroup import org . jetbrains . kotlinx . dataframe . api . column . ColumnPath import org . jetbrains . kotlinx . dataframe . api . column . ColumnSet import org . jetbrains . kotlinx . dataframe . api . column . SingleColumn import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . DataFrame import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrains . kot
import org . jetbrains . kotlin . fir . types . * import org . jetbrains . kotlin . fir . types . builder . buildResolvedTypeRef import org . jetbrains . kotlin . fir . types . impl . ConeClassLikeTypeImpl import org . jetbrains . kotlin . fir . types . impl . FirImplicitTypeRefImplWithoutSource import org . jetbrains . kotlin . fir . types . impl . FirImplicitTypeRefImplWithoutSource import org . jetbrains . kotlin . fir . types . impl . FirImplicitTypeRefImplWithoutSource import org . jetbrains . kotlin . fir . types . impl . FirQualifierPartImpl import org . jetbrains . kotlin . fir . types . impl . FirTypeArgumentListImpl import org . jetbrains . kotlin . fir . types . impl . FirTypeRefWithNullability import org . jetbrains . kotlin . fir . types . impl . FirTypeRefWithNullabilityImpl import org . jetbrains . k

import org . jetbrains . kotlinx . dl . api . core . Sequential import org . jetbrains . kotlinx . dl . api . core . activation . Activations import org . jetbrains . kotlinx . dl . api . core . initializer . HeNormal import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . Conv2D import org . jetbrains . kotlinx . dl . api . core . layer . convolutional . ConvPadding import org . jetbrains . kotlinx . dl . api . core . layer . core . Dense import org . jetbrains . kotlinx . dl . api . core . layer . core . Input import org . jetbrains . kotlinx . dl . api . core . layer . pooling . AvgPool2D import org . jetbrains . kotlinx . dl . api . core . loss . Losses import org . jetbrains . kotlinx . dl
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirRegularClassSymbol import org . jetbrains . kot
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import helpers . * fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } suspend fun calculate ( ) = "OK" fun box ( ) : String { builder { calculate ( ) } return "" }
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import helpers . * fun builder ( c : suspend ( ) -> Unit ) { c . startCoroutine ( EmptyContinuation ) } suspend fun calculate ( ) = "OK" fun box ( ) : String { var result = "" builder { result = calculate ( ) } return result }
import kotlin . coroutines . * import kotlin . coroutines . intrinsics . * import kotlin . coroutines . jvm . internal . * import kotlin . coroutines . intrinsics . COROUTINE_SUSPENDED import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturn import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnNull import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithResult import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithException import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithExceptionOrNull import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithResult import kotlin . coroutines . intrinsics . suspendCoroutineUninterceptedOrReturnWithThrow import kotlin . coroutines . intrinsics . suspendCoroutineUn


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface A external interface B external interface C
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *





@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
package org . jetbrains . kotlin . analysis . low . level . api . fir . sessions import com . intellij . openapi . project . Project import com . intellij . psi . search . GlobalSearchScope import org . jetbrains . kotlin . analysis . low . level . api . fir . project . structure . LLFirLibrarySymbolProviderFactory import org . jetbrains . kotlin . analysis . low . level . api . fir . project . structure . LLFirModuleData import org . jetbrains . kotlin . analysis . low . level . api . fir . providers . LLFirModuleWithDependenciesSymbolProvider import org . jetbrains . kotlin . analysis . project . structure . KtBinaryModule import org . jetbrains . kotlin . analysis . project . structure . KtDanglingFileModule import org . jetbrains . kotlin . analysis . project . structure . KtModule import org . jetbrains . kotlin . analysis . project . structure . KtSourceModule import org . jet

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlinx . cinterop . * import platform . darwin . * import platform . Foundation . * class Zzz : NSAssertionHandler { < ! CONSTRUCTOR_DOES_NOT_OVERRIDE_ANY_SUPER_CONSTRUCTOR ! > @ OptIn ( kotlinx . cinterop . BetaInteropApi :: class ) @ OverrideInit constructor ( x : Int ) { } < ! > }



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }







fun assertFileNotExists ( file : Path , ) { try { Files . list ( file ) fail ( "" ) } catch ( e : UnsupportedOperationException ) { } }
@ OptIn ( ExperimentalPathApi :: class ) fun Path . assertExists ( ) { assertTrue ( exists ( ) , "" ) } @ OptIn ( ExperimentalPathApi :: class ) fun Path . assertNotExists ( ) { assertFalse ( exists ( ) , "" ) }

package org . jetbrains . kotlin . cli . jvm . compiler import com . intellij . openapi . Disposable import com . intellij . openapi . util . Disposer import com . intellij . openapi . vfs . StandardFileSystems import com . intellij . openapi . vfs . VirtualFile import com . intellij . openapi . vfs . VirtualFileManager import com . intellij . openapi . vfs . impl . jar . CoreJarFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJarFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtVirtualFileSystem import com . intellij . openapi . vfs . impl . jar . CoreJrtVirtualFileSystem import com . intellij
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ OptIn ( ExperimentalPathApi :: class ) fun Path . assertExists ( ) { assertTrue ( exists ( ) , "" ) } @ OptIn ( ExperimentalPathApi :: class ) fun Path . assertNotExists ( ) { assertFalse ( exists ( ) , "" ) }
@ kotlin . internal . InlineOnly public inline fun Path . exists ( ) : Boolean = kotlin . io . path . exists ( this ) @ kotlin . internal . InlineOnly public inline fun Path . exists ( message : String ? = null ) : Boolean = kotlin . io . path . exists ( this , message )

import org . gradle . api . Project import org . gradle . api . Task import org . gradle . api . file . DirectoryProperty import org . gradle . api . plugins . BasePlugin import org . gradle . api . provider . Provider import org . gradle . api . tasks . TaskProvider import org . gradle . kotlin . dsl . getByType import org . gradle . kotlin . dsl . property import org . jetbrains . kotlin . gradle . dsl . kotlinExtension import org . jetbrains . kotlin . gradle . dsl . multiplatformExtension import org . jetbrains . kotlin . gradle . plugin . KotlinCompilation import org . jetbrains . kotlin . gradle . plugin . KotlinPluginLifecycle import org . jetbrains . kotlin . gradle . plugin . KotlinSourceSet import org . jetbrains . kotlin . gradle . plugin . await import org . jetbrains . kotlin .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String } external open class Pong { open fun pong ( ) : String } external open class PingPong : Ping { open fun pong ( ) : String }
import kotlinx . cinterop . * import kotlinx . cinterop . internal . * import kotlin . test . * import kotlin . text . * import kotlin . time . * import kotlin . time . Duration . Companion . milliseconds import kotlin . time . Duration . Companion . seconds @ OptIn ( kotlinx . cinterop . ExperimentalForeignApi :: class ) fun box ( ) : String { assertEquals ( "" , file ( "" ) . readText ( ) ) assertEquals ( "" , file ( "" ) . readText ( ) ) assertEquals ( "" , file ( "" ) . readText ( ) ) assertEquals ( "" , file ( "" ) . readText ( ) ) return "OK" }
package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . KtFakeSourceElementKind import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getSingleMatchedExpectForActualOrNull import org . jetbrains . kotlin . fir . declarations . utils . isActual import org . jetbrains . kot

import org . gradle . api . DefaultTask import org . gradle . api . file . DirectoryProperty import org . gradle . api . file . FileCollection import org . gradle . api . model . ObjectFactory import org . gradle . api . provider . ListProperty import org . gradle . api . provider . Provider import org . gradle . api . provider . SetProperty import org . gradle . api . tasks . * import org . gradle . work . DisableCachingByDefault import org . jetbrains . kotlin . gradle . idea . tcs . IdeaKotlinDependency import org . jetbrains . kotlin . gradle . idea . tcs . IdeaKotlinSourceCoordinates import org . jetbrains . kotlin . gradle . idea . tcs . IdeaKotlinSourceDependency import org . jetbrains . kotlin . gradle . idea . tcs . IdeaKotlinSourceDependency . Type . Regular import org . jetbrains . kotlin . gradle .
package org . jetbrains . kotlin . gradle . idea . proto . generated . tcs ; @ kotlin . jvm . JvmName ( "" ) inline fun ideaKotlinClasspathProto ( block : org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinClasspathProtoKt . Dsl . ( ) -> kotlin . Unit ) : org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinClasspathProto = org . jetbrains . kotlin . gradle . idea . proto . generated . tcs . IdeaKotlinClasspathProtoKt . Dsl . _create ( this . toBuilder ( ) ) . apply { block ( ) } . _build ( ) object IdeaKotlinClasspathProtoKt { @ kotlin . OptIn ( com . google . protobuf . kotlin . OnlyForUseByGeneratedProtoCode :: class ) @ com . google . protobuf . kotlin .





package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirRegularClassSymbol import org . jetbrains . kot
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class GrandParent ( ) external open class Parent ( ) : GrandParent external open class Child ( ) : Parent

package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . KtFakeSourceElementKind import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . checkTypeMismatch import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirTypeAlias import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . declarations . utils . expandedConeType import org . jetbrains . kotlin . fir .
fun test ( ) { LLFirResolveTarget ( ) }

import org . gradle . api . * import org . gradle . api . artifacts . * import org . gradle . api . file . * import org . gradle . api . provider . * import org . gradle . api . tasks . * import org . gradle . kotlin . dsl . * import org . jetbrains . kotlin . gradle . dsl . KotlinCommonOptions import org . jetbrains . kotlin . gradle . dsl . KotlinMultiplatformExtension import org . jetbrains . kotlin . gradle . dsl . KotlinVersion import org . jetbrains . kotlin . gradle . plugin . * import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . Companion . kotlinPropertiesProvider import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_NATIVE_USE_XCODE_MESSAGE_STYLE import org . jetbrains . kotlin . gradle .
import org . jetbrains . kotlin . fir . FirSession import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . FirDeclarationOrigin import org . jetbrains . kotlin . fir . declarations . FirDeclarationStatus import org . jetbrains . kotlin . fir . declarations . impl . FirDeclarationStatusImpl import org . jetbrains . kotlin . fir . declarations . impl . FirDeclarationStatusImpl import org . jetbrains . kotlin . fir . declarations . impl . FirDeclarationStatusImpl import org . jetbrains . kotlin . fir . declarations . impl . FirDeclarationStatusImpl import org . jetbrains . kotlin . fir . declarations . impl . FirDeclarationStatusImpl import org . jetbrains . kotlin . fir . declarations . impl . FirDeclarationStatusImpl import org . jetbrains . kotlin . fir . declarations . impl . FirDeclarationStatusImpl import org . jetbrains . kot
import org . jetbrains . kotlin . fir . FirSession import org . jetbrains . kotlin . fir . resolve . ScopeSession import org . jetbrains . kotlin . fir . resolve . transformers . ReturnTypeCalculatorForFullBodyResolve import org . jetbrains . kotlin . fir . resolve . transformers . ScopeClassDeclaration import org . jetbrains . kotlin . fir . scopes . FirKotlinScopeProvider import org . jetbrains . kotlin . fir . symbols . impl . FirCallableSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirClassLikeSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirClassSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirNamedFunctionSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirPropertySymbol import org . jetbrains . kotlin . fir . symbols . impl . FirRegularClassSymbol
import kotlin . experimental . ExperimentalNativeApi import kotlin . native . internal . GCUnsafeCall import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . IntrinsicType import kotlin . native . internal . TypedIntrinsic import kotlin . native . internal . IntrinsicType . * import kotlin . native . internal . TypedIntrinsic . IntrinsicType . * import kotlin . native . internal . TypedIntrinsic . IntrinsicType . * import kotlin . native . internal . TypedIntrinsic . IntrinsicType . * import kotlin . native . internal . TypedIntrinsic . IntrinsicType . * import kotlin . native . internal . TypedIntrinsic . IntrinsicType . * import kotlin . native . internal . TypedIntrinsic . IntrinsicType . * import kotlin . native . internal . Typ
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import kotlin . test . * fun box ( ) : String { val regex = "" . toRegExp ( ) val result = regex . exec ( "" ) assertEquals ( "" , result ? . value ) return "OK" }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface Cleaner { fun clean ( ) }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface Cleaner { fun clean ( ) }
import kotlinx . android . parcel . * import android . os . * import android . accounts . Account @ Parcelize class Foo ( val kp : Account ) : Parcelable


package org . jetbrains . kotlin . fir . analysis . checkers . declaration import org . jetbrains . kotlin . diagnostics . DiagnosticReporter import org . jetbrains . kotlin . diagnostics . reportOn import org . jetbrains . kotlin . fir . analysis . checkers . MppCheckerKind import org . jetbrains . kotlin . fir . analysis . checkers . closestNonLocalWith import org . jetbrains . kotlin . fir . analysis . checkers . context . CheckerContext import org . jetbrains . kotlin . fir . analysis . diagnostics . FirErrors import org . jetbrains . kotlin . fir . declarations . FirDeclaration import org . jetbrains . kotlin . fir . declarations . getAnnotationByClassId import org . jetbrains . kotlin . fir . resolve . toFirRegularClassSymbol import org . jetbrains . kotlin . fir . symbols . impl . FirRegularClassSymbol import org . jetbrains . kot

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
import org . jetbrains . kotlinx . dataframe . DataColumn import org . jetbrains . kotlinx . dataframe . columns . ColumnAccessor import org . jetbrains . kotlinx . dataframe . columns . ColumnGroup import org . jetbrains . kotlinx . dataframe . columns . ColumnPath import org . jetbrains . kotlinx . dataframe . columns . ColumnSet import org . jetbrains . kotlinx . dataframe . columns . ColumnWithPath import org . jetbrains . kotlinx . dataframe . columns . ColumnsResolver import org . jetbrains . kotlinx . dataframe . columns . SingleColumn import org . jetbrains . kotlinx . dataframe . documentation . DslGrammarTemplateColumnsSelectionDsl . DslGrammarTemplate import org . jetbrains . kotlinx . dataframe . documentation . Indent import org . jetbrains . kotlinx . dataframe . documentation . LineBreak import org . jetbrain
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }


import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . modules . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . modules . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . modules . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kot
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . modules . * import kotlinx . serialization . json . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . internal . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules . * import kotlinx . serialization . modules .
import kotlinx . serialization . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . encoding . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . modules . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import kotlinx . serialization . descriptors . * import kotlinx . serialization . modules . * import kotlinx . serialization . json . * import kotlinx . serialization . modules . * import k
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * fun f ( ) { }
import kotlinx . cinterop . * import kotlin . test . * import objcTests . * @ Test fun testInitWithCustomSelector ( ) { assertFalse ( TestInitWithCustomSelector ( ) . custom ) assertTrue ( TestInitWithCustomSelector ( custom = Unit ) . custom ) assertFalse ( TestInitWithCustomSelector ( custom = 42 ) . custom ) assertTrue ( TestInitWithCustomSelector ( custom ) . custom ) }

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * fun f ( ) { }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }


@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *

@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Klass
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Klass


fun main ( ) { val modelHub = ONNXModelHub ( cacheDirectory = File ( "" ) ) val model = modelHub . loadModel ( ONNXModels . ObjectDetection . SSDMobileNetV1 ) model . use { detectionModel -> println ( detectionModel ) val imageFile = getFileFromResource ( "" ) val detectedObjects = detectionModel . detectObjects ( imageFile = imageFile ) detectedObjects . forEach { println ( "" ) } } }







@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo



@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Foo { open fun bar ( ) : Number companion object { var variable : String } }
package org . jetbrains . kotlin . gradle . plugin . mpp import org . gradle . api . Project import org . gradle . api . artifacts . Configuration import org . gradle . api . attributes . Category import org . gradle . api . attributes . Usage import org . gradle . api . provider . Provider import org . jetbrains . kotlin . gradle . dsl . multiplatformExtension import org . jetbrains . kotlin . gradle . dsl . multiplatformExtensionOrNull import org . jetbrains . kotlin . gradle . plugin . * import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_NATIVE_USE_XCODE_MESSAGE_STYLE import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_USE_XCODE_MESSAGE_STYLE import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider .
import kotlin . test . * import kotlin . native . concurrent . * import kotlin . native . internal . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . * import kotlin . native . internal . test . *
@ kotlin . ExperimentalUnsignedTypes @ kotlin . internal . InlineOnly public inline fun UIntArray . elementAt ( index : Int ) : UInt { return elementAtOrElse ( index ) { throw IndexOutOfBoundsException ( "" ) } } @ kotlin . ExperimentalUnsignedTypes @ kotlin . internal . InlineOnly public inline fun ULongArray . elementAt ( index : Int ) : ULong { return elementAtOrElse ( index ) { throw IndexOutOfBoundsException ( "" ) } } @ kotlin . ExperimentalUnsignedTypes @ kotlin . internal . InlineOnly public inline fun UShortArray . elementAt ( index : Int ) : UShort { return elementAtOrElse ( index ) { throw IndexOutOfBoundsException ( "" ) } }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external open class Ping { open fun ping ( ) : String }
import org . jetbrains . kotlin . descriptors . ClassKind import org . jetbrains . kotlin . descriptors . DescriptorVisibilities import org . jetbrains . kotlin . descriptors . DescriptorVisibility import org . jetbrains . kotlin . descriptors . Modality import org . jetbrains . kotlin . ir . builders . * import org . jetbrains . kotlin . ir . declarations . * import org . jetbrains . kotlin . ir . declarations . impl . IrClassImpl import org . jetbrains . kotlin . ir . declarations . impl . IrFieldImpl import org . jetbrains . kotlin . ir . declarations . impl . IrFunctionImpl import org . jetbrains . kotlin . ir . declarations . impl . IrPropertyImpl import org . jetbrains . kotlin . ir . declarations . impl . IrSimpleFunctionImpl import org . jetbrains . kotlin . ir . declarations . impl . IrValueParameterImpl import org . jetbrains . k
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface HeaderInfo external interface IterableHeaderInfo : HeaderInfo
import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; public class IterableHeaderInfo { @ NotNull public Iterable < @ Nullable String > getIterable ( ) { return null ; } } import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; public class IterableExpressionHeaderInfo extends IterableHeaderInfo { @ Override public Iterable < @ Nullable String > getIterable ( ) { return null ; } } import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; public class IterableExpressionHeaderInfo extends IterableExpressionHeaderInfo { @ Override public Iterable < @ Nullable String > getIterable ( ) { return null ; } }
import org . gradle . api . Project import org . gradle . kotlin . dsl . extra import org . gradle . kotlin . dsl . project import org . jetbrains . kotlin . gradle . dsl . KotlinCommonOptions import org . jetbrains . kotlin . gradle . dsl . KotlinCommonCompilerOptions import org . jetbrains . kotlin . gradle . dsl . KotlinCommonCompilerOptionsHelper import org . jetbrains . kotlin . gradle . plugin . KotlinCompilerArgumentsProducer . ContributeCompilerArgumentsContext import org . jetbrains . kotlin . gradle . plugin . KotlinCompilerArgumentsProducer . CreateCompilerArgumentsContext import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_NATIVE_USE_XCODE_MESSAGE_STYLE import org . jetbrains .
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface Argv < T > { fun ping ( ) : T } external interface Argv__0 : Argv < Any >
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . *
package org . jetbrains . kotlin . gradle . plugin . mpp import org . gradle . api . Project import org . gradle . api . artifacts . Configuration import org . gradle . api . attributes . Category import org . gradle . api . attributes . Usage import org . jetbrains . kotlin . gradle . plugin . KotlinAndroidTarget import org . jetbrains . kotlin . gradle . plugin . KotlinProjectSetupAction import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_MPP_ENABLE_GRANULAR_SOURCE_SETS_METADATA import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_MPP_HIERARCHICAL_STRUCTURE_BY_DEFAULT import org . jetbrains . kotlin . gradle . plugin . PropertiesProvider . PropertyNames . KOTLIN_MPP_HIERARCH





import kotlinx . cinterop . * import kotlin . test . * import kotlinx . cinterop . ExperimentalForeignApi @ OptIn ( ExperimentalForeignApi :: class ) fun box ( ) : String { val foo = Foo ( ) if ( foo . toString ( ) != "" ) return "" return "OK" } @ OptIn ( ExperimentalForeignApi :: class ) class Foo : CStructVar ( )





@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external var vector1 : FloatArray external var vector2 : FloatArray
@ file : Suppress ( "INTERFACE_WITH_SUPERCLASS" , "OVERRIDING_FINAL_MEMBER" , "RETURN_TYPE_MISMATCH_ON_OVERRIDE" , "CONFLICTING_OVERLOADS" ) import kotlin . js . * import org . khronos . webgl . * import org . w3c . dom . * import org . w3c . dom . events . * import org . w3c . dom . parsing . * import org . w3c . dom . svg . * import org . w3c . dom . url . * import org . w3c . fetch . * import org . w3c . files . * import org . w3c . notifications . * import org . w3c . performance . * import org . w3c . workers . * import org . w3c . xhr . * external interface `T$0` { fun bar ( a : Any ) : Number var baz : Any } external open class Foo { open fun bar ( a : Any ) : Number open var baz : Any }
